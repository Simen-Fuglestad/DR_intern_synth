
DR_intern_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b54  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08010ce0  08010ce0  00020ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112f8  080112f8  000300c0  2**0
                  CONTENTS
  4 .ARM          00000008  080112f8  080112f8  000212f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011300  08011300  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011300  08011300  00021300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011304  08011304  00021304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08011308  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300c0  2**0
                  CONTENTS
 10 .bss          000114cc  200000c0  200000c0  000300c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001158c  2001158c  000300c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020e85  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005634  00000000  00000000  00050f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b98  00000000  00000000  000565b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001928  00000000  00000000  00058148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027dde  00000000  00000000  00059a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025edc  00000000  00000000  0008184e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e145b  00000000  00000000  000a772a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00188b85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d8c  00000000  00000000  00188bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c0 	.word	0x200000c0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08010cc4 	.word	0x08010cc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c4 	.word	0x200000c4
 80001c4:	08010cc4 	.word	0x08010cc4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MIDI_Application>:
 * @brief  Main routine for MIDI application, looped in main.c
 * @param  None
 * @retval none
 */
void MIDI_Application(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	if (Appli_state == MIDI_APPLICATION_READY)
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MIDI_Application+0x34>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d107      	bne.n	8000eb0 <MIDI_Application+0x1c>
	{
		USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // just once at the beginning, start the first reception
 8000ea0:	2240      	movs	r2, #64	; 0x40
 8000ea2:	490a      	ldr	r1, [pc, #40]	; (8000ecc <MIDI_Application+0x38>)
 8000ea4:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <MIDI_Application+0x3c>)
 8000ea6:	f002 ffc1 	bl	8003e2c <USBH_MIDI_Receive>
		Appli_state = APPLICATION_RUNNING;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MIDI_Application+0x34>)
 8000eac:	2203      	movs	r2, #3
 8000eae:	701a      	strb	r2, [r3, #0]
	if (Appli_state == APPLICATION_RUNNING)
	{
		//....pffff......grrrrr......
	}

	if (Appli_state == MIDI_APPLICATION_DISCONNECT)
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <MIDI_Application+0x34>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d105      	bne.n	8000ec4 <MIDI_Application+0x30>
	{
		Appli_state = MIDI_APPLICATION_IDLE;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <MIDI_Application+0x34>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
		USBH_MIDI_Stop(&hUsbHostFS);
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MIDI_Application+0x3c>)
 8000ec0:	f002 ff53 	bl	8003d6a <USBH_MIDI_Stop>
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20011274 	.word	0x20011274
 8000ecc:	200000dc 	.word	0x200000dc
 8000ed0:	20010dcc 	.word	0x20010dcc

08000ed4 <USBH_MIDI_ReceiveCallback>:
 * @brief  MIDI data receive callback.
 * @param  phost: Host handle
 * @retval None
 */
void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < RX_BUFF_SIZE; i+=MIDI_MSG_LEN) {
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e010      	b.n	8000f04 <USBH_MIDI_ReceiveCallback+0x30>
		ProcessReceivedMidiData(MIDI_RX_Buffer[i], MIDI_RX_Buffer[i + 2], MIDI_RX_Buffer[i+3]);
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <USBH_MIDI_ReceiveCallback+0x48>)
 8000ee6:	5cd0      	ldrb	r0, [r2, r3]
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	3302      	adds	r3, #2
 8000eec:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <USBH_MIDI_ReceiveCallback+0x48>)
 8000eee:	5cd1      	ldrb	r1, [r2, r3]
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	3303      	adds	r3, #3
 8000ef4:	4a09      	ldr	r2, [pc, #36]	; (8000f1c <USBH_MIDI_ReceiveCallback+0x48>)
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	f000 f8c7 	bl	800108c <ProcessReceivedMidiData>
	for (uint8_t i = 0; i < RX_BUFF_SIZE; i+=MIDI_MSG_LEN) {
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	3304      	adds	r3, #4
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	2b3f      	cmp	r3, #63	; 0x3f
 8000f08:	d9eb      	bls.n	8000ee2 <USBH_MIDI_ReceiveCallback+0xe>
	}

	USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // start a new reception
 8000f0a:	2240      	movs	r2, #64	; 0x40
 8000f0c:	4903      	ldr	r1, [pc, #12]	; (8000f1c <USBH_MIDI_ReceiveCallback+0x48>)
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <USBH_MIDI_ReceiveCallback+0x4c>)
 8000f10:	f002 ff8c 	bl	8003e2c <USBH_MIDI_Receive>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200000dc 	.word	0x200000dc
 8000f20:	20010dcc 	.word	0x20010dcc
 8000f24:	00000000 	.word	0x00000000

08000f28 <MIDI_update_input>:

uint8_t* MIDI_get_input_keys(void) {
	return MIDI_input_keys;
}

void MIDI_update_input(float* f_steps) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	float pitch_factor;
	pitch_factor = OCT_D2 + OCT_R2 *((float)MIDI_ctrl_pitch/MIDI_PITCH_REF);
 8000f30:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <MIDI_update_input+0xc0>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f3c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f4c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000fec <MIDI_update_input+0xc4>
 8000f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f54:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000ff0 <MIDI_update_input+0xc8>
 8000f58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f5c:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint8_t i = 0; i < POLY_INPUTS; i++) {
 8000f60:	2300      	movs	r3, #0
 8000f62:	75fb      	strb	r3, [r7, #23]
 8000f64:	e032      	b.n	8000fcc <MIDI_update_input+0xa4>
		float fmidi = MIDI_key2f(MIDI_input_keys[i]);
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
 8000f68:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <MIDI_update_input+0xcc>)
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f843 	bl	8000ff8 <MIDI_key2f>
 8000f72:	ed87 0a02 	vstr	s0, [r7, #8]
		float f = fmidi/FREQ_BASE;
 8000f76:	68b8      	ldr	r0, [r7, #8]
 8000f78:	f7ff fa8a 	bl	8000490 <__aeabi_f2d>
 8000f7c:	a318      	add	r3, pc, #96	; (adr r3, 8000fe0 <MIDI_update_input+0xb8>)
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff fc07 	bl	8000794 <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fdaf 	bl	8000af0 <__aeabi_d2f>
 8000f92:	4603      	mov	r3, r0
 8000f94:	613b      	str	r3, [r7, #16]
		if (f < 1)
 8000f96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa6:	d502      	bpl.n	8000fae <MIDI_update_input+0x86>
			f = 0;
 8000fa8:	f04f 0300 	mov.w	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
		f_steps[i] = f * pitch_factor;
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fba:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc2:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < POLY_INPUTS; i++) {
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	75fb      	strb	r3, [r7, #23]
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	d9c9      	bls.n	8000f66 <MIDI_update_input+0x3e>
	}
}
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	ac083127 	.word	0xac083127
 8000fe4:	40205a1c 	.word	0x40205a1c
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	3e6d1f08 	.word	0x3e6d1f08
 8000ff0:	3f6411e6 	.word	0x3f6411e6
 8000ff4:	2000011c 	.word	0x2000011c

08000ff8 <MIDI_key2f>:

float MIDI_key2f(uint8_t key) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	float exponent = (float)key - 69;
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800100c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800104c <MIDI_key2f+0x54>
 8001010:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001014:	edc7 7a03 	vstr	s15, [r7, #12]
	exponent = exponent/12;
 8001018:	ed97 7a03 	vldr	s14, [r7, #12]
 800101c:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8001020:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001024:	edc7 7a03 	vstr	s15, [r7, #12]
	return 440 * powf(2, exponent);
 8001028:	edd7 0a03 	vldr	s1, [r7, #12]
 800102c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001030:	f00d f84a 	bl	800e0c8 <powf>
 8001034:	eef0 7a40 	vmov.f32	s15, s0
 8001038:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001050 <MIDI_key2f+0x58>
 800103c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001040:	eeb0 0a67 	vmov.f32	s0, s15
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	428a0000 	.word	0x428a0000
 8001050:	43dc0000 	.word	0x43dc0000

08001054 <MIDI_get_n_voices>:

uint8_t MIDI_get_n_voices() {
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	return POLY_INPUTS;
 8001058:	230a      	movs	r3, #10
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <MIDI_note_disable>:

env_t* MIDI_get_envelopes() {
	return envelopes;
}

void MIDI_note_disable(uint8_t midi_code, int index) {
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
	MIDI_input_keys[index] = 0;
 8001070:	4a05      	ldr	r2, [pc, #20]	; (8001088 <MIDI_note_disable+0x24>)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	4413      	add	r3, r2
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	2000011c 	.word	0x2000011c

0800108c <ProcessReceivedMidiData>:

void ProcessReceivedMidiData(uint8_t midi_code, uint8_t midi_data1, uint8_t midi_data2) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	460b      	mov	r3, r1
 8001098:	71bb      	strb	r3, [r7, #6]
 800109a:	4613      	mov	r3, r2
 800109c:	717b      	strb	r3, [r7, #5]
	switch(midi_code) {
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	3b08      	subs	r3, #8
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d85d      	bhi.n	8001162 <ProcessReceivedMidiData+0xd6>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <ProcessReceivedMidiData+0x20>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	080010c9 	.word	0x080010c9
 80010b0:	080010d3 	.word	0x080010d3
 80010b4:	08001141 	.word	0x08001141
 80010b8:	08001147 	.word	0x08001147
 80010bc:	08001163 	.word	0x08001163
 80010c0:	08001163 	.word	0x08001163
 80010c4:	0800114d 	.word	0x0800114d
	case MIDI_CODE_NOTE_OFF:
//		test_key_off_events++;
		env_release(midi_data1);
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fc2a 	bl	8001924 <env_release>

		break;
 80010d0:	e048      	b.n	8001164 <ProcessReceivedMidiData+0xd8>

	case MIDI_CODE_NOTE_ON:
//		test_key_on_events++;
		;
		uint8_t next_free = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	75fb      	strb	r3, [r7, #23]

		for(uint8_t i = 0; i < POLY_INPUTS; ++i) {
 80010d6:	2300      	movs	r3, #0
 80010d8:	75bb      	strb	r3, [r7, #22]
 80010da:	e013      	b.n	8001104 <ProcessReceivedMidiData+0x78>
			uint8_t midi = MIDI_input_keys[i];
 80010dc:	7dbb      	ldrb	r3, [r7, #22]
 80010de:	4a23      	ldr	r2, [pc, #140]	; (800116c <ProcessReceivedMidiData+0xe0>)
 80010e0:	5cd3      	ldrb	r3, [r2, r3]
 80010e2:	72fb      	strb	r3, [r7, #11]

			if (midi == midi_data1) {
 80010e4:	7afa      	ldrb	r2, [r7, #11]
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d103      	bne.n	80010f4 <ProcessReceivedMidiData+0x68>
				next_key_index = i;
 80010ec:	4a20      	ldr	r2, [pc, #128]	; (8001170 <ProcessReceivedMidiData+0xe4>)
 80010ee:	7dbb      	ldrb	r3, [r7, #22]
 80010f0:	7013      	strb	r3, [r2, #0]
				break;
 80010f2:	e00a      	b.n	800110a <ProcessReceivedMidiData+0x7e>
			} else if (midi == 0) {
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <ProcessReceivedMidiData+0x72>
				next_free = i;
 80010fa:	7dbb      	ldrb	r3, [r7, #22]
 80010fc:	75fb      	strb	r3, [r7, #23]
		for(uint8_t i = 0; i < POLY_INPUTS; ++i) {
 80010fe:	7dbb      	ldrb	r3, [r7, #22]
 8001100:	3301      	adds	r3, #1
 8001102:	75bb      	strb	r3, [r7, #22]
 8001104:	7dbb      	ldrb	r3, [r7, #22]
 8001106:	2b09      	cmp	r3, #9
 8001108:	d9e8      	bls.n	80010dc <ProcessReceivedMidiData+0x50>
			}
		}

		if (next_free != 0 && next_key_index == 0) {
 800110a:	7dfb      	ldrb	r3, [r7, #23]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d006      	beq.n	800111e <ProcessReceivedMidiData+0x92>
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <ProcessReceivedMidiData+0xe4>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <ProcessReceivedMidiData+0x92>
			next_key_index = next_free;
 8001118:	4a15      	ldr	r2, [pc, #84]	; (8001170 <ProcessReceivedMidiData+0xe4>)
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	7013      	strb	r3, [r2, #0]
		}
		MIDI_input_keys[next_key_index] = midi_data1;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <ProcessReceivedMidiData+0xe4>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4619      	mov	r1, r3
 8001124:	4a11      	ldr	r2, [pc, #68]	; (800116c <ProcessReceivedMidiData+0xe0>)
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	5453      	strb	r3, [r2, r1]

		env_create(next_key_index, midi_data1);
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <ProcessReceivedMidiData+0xe4>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	79ba      	ldrb	r2, [r7, #6]
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fb94 	bl	8001860 <env_create>

		next_key_index = 0;
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <ProcessReceivedMidiData+0xe4>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
		break;
 800113e:	e011      	b.n	8001164 <ProcessReceivedMidiData+0xd8>
	case MIDI_CODE_POLY_KEY_PRESS: ; //currently not registering any from microkey S25
	int test_poly_br = 10;
 8001140:	230a      	movs	r3, #10
 8001142:	60fb      	str	r3, [r7, #12]
	break;
 8001144:	e00e      	b.n	8001164 <ProcessReceivedMidiData+0xd8>
	case MIDI_CODE_CTRL_CHANGE: ;
	//from sustain btn and north/south joystick movement on KORG microkey s25
	int test_ctrl_br = 10;
 8001146:	230a      	movs	r3, #10
 8001148:	613b      	str	r3, [r7, #16]
	break;
 800114a:	e00b      	b.n	8001164 <ProcessReceivedMidiData+0xd8>
	case MIDI_CODE_PITCH_BEND: ;
	MIDI_ctrl_pitch = midi_data1 + (midi_data2 << 7);
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	b29a      	uxth	r2, r3
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	b29b      	uxth	r3, r3
 8001154:	01db      	lsls	r3, r3, #7
 8001156:	b29b      	uxth	r3, r3
 8001158:	4413      	add	r3, r2
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <ProcessReceivedMidiData+0xe8>)
 800115e:	801a      	strh	r2, [r3, #0]
	break;
 8001160:	e000      	b.n	8001164 <ProcessReceivedMidiData+0xd8>
	default:
		break;
 8001162:	bf00      	nop
	}
}
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000011c 	.word	0x2000011c
 8001170:	20000126 	.word	0x20000126
 8001174:	20000000 	.word	0x20000000

08001178 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af02      	add	r7, sp, #8
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8001184:	4a09      	ldr	r2, [pc, #36]	; (80011ac <write_register+0x34>)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <write_register+0x34>)
 8001190:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8001192:	2364      	movs	r3, #100	; 0x64
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2302      	movs	r3, #2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <write_register+0x34>)
 800119a:	2194      	movs	r1, #148	; 0x94
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <write_register+0x38>)
 800119e:	f006 fe15 	bl	8007dcc <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000128 	.word	0x20000128
 80011b0:	2000012c 	.word	0x2000012c

080011b4 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <read_register+0x3c>)
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 80011c6:	2364      	movs	r3, #100	; 0x64
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <read_register+0x3c>)
 80011ce:	2194      	movs	r1, #148	; 0x94
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <read_register+0x40>)
 80011d2:	f006 fdfb 	bl	8007dcc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 80011d6:	2364      	movs	r3, #100	; 0x64
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	2194      	movs	r1, #148	; 0x94
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <read_register+0x40>)
 80011e2:	f006 fef1 	bl	8007fc8 <HAL_I2C_Master_Receive>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000128 	.word	0x20000128
 80011f4:	2000012c 	.word	0x2000012c

080011f8 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 80011f8:	b084      	sub	sp, #16
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	f107 0c08 	add.w	ip, r7, #8
 8001202:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8001206:	4b81      	ldr	r3, [pc, #516]	; (800140c <CS43_Init+0x214>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800120e:	4b7f      	ldr	r3, [pc, #508]	; (800140c <CS43_Init+0x214>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	69da      	ldr	r2, [r3, #28]
 8001214:	4b7d      	ldr	r3, [pc, #500]	; (800140c <CS43_Init+0x214>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800121c:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	2110      	movs	r1, #16
 8001222:	487b      	ldr	r0, [pc, #492]	; (8001410 <CS43_Init+0x218>)
 8001224:	f005 f838 	bl	8006298 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8001228:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <CS43_Init+0x21c>)
 800122a:	4618      	mov	r0, r3
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	2254      	movs	r2, #84	; 0x54
 8001232:	4619      	mov	r1, r3
 8001234:	f00c fc58 	bl	800dae8 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8001238:	4b77      	ldr	r3, [pc, #476]	; (8001418 <CS43_Init+0x220>)
 800123a:	2201      	movs	r2, #1
 800123c:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 800123e:	4976      	ldr	r1, [pc, #472]	; (8001418 <CS43_Init+0x220>)
 8001240:	2002      	movs	r0, #2
 8001242:	f7ff ff99 	bl	8001178 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001246:	4b74      	ldr	r3, [pc, #464]	; (8001418 <CS43_Init+0x220>)
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800124c:	4b72      	ldr	r3, [pc, #456]	; (8001418 <CS43_Init+0x220>)
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	f043 0320 	orr.w	r3, r3, #32
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b70      	ldr	r3, [pc, #448]	; (8001418 <CS43_Init+0x220>)
 8001258:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800125a:	4b6f      	ldr	r3, [pc, #444]	; (8001418 <CS43_Init+0x220>)
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	f043 030c 	orr.w	r3, r3, #12
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b6c      	ldr	r3, [pc, #432]	; (8001418 <CS43_Init+0x220>)
 8001266:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8001268:	4b6b      	ldr	r3, [pc, #428]	; (8001418 <CS43_Init+0x220>)
 800126a:	785b      	ldrb	r3, [r3, #1]
 800126c:	f043 0303 	orr.w	r3, r3, #3
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b69      	ldr	r3, [pc, #420]	; (8001418 <CS43_Init+0x220>)
 8001274:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8001276:	4969      	ldr	r1, [pc, #420]	; (800141c <CS43_Init+0x224>)
 8001278:	2004      	movs	r0, #4
 800127a:	f7ff ff7d 	bl	8001178 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 800127e:	4b66      	ldr	r3, [pc, #408]	; (8001418 <CS43_Init+0x220>)
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8001284:	4965      	ldr	r1, [pc, #404]	; (800141c <CS43_Init+0x224>)
 8001286:	2005      	movs	r0, #5
 8001288:	f7ff ff76 	bl	8001178 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 800128c:	4962      	ldr	r1, [pc, #392]	; (8001418 <CS43_Init+0x220>)
 800128e:	2006      	movs	r0, #6
 8001290:	f7ff ff90 	bl	80011b4 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8001294:	4b60      	ldr	r3, [pc, #384]	; (8001418 <CS43_Init+0x220>)
 8001296:	785b      	ldrb	r3, [r3, #1]
 8001298:	f003 0320 	and.w	r3, r3, #32
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b5e      	ldr	r3, [pc, #376]	; (8001418 <CS43_Init+0x220>)
 80012a0:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80012a2:	4b5d      	ldr	r3, [pc, #372]	; (8001418 <CS43_Init+0x220>)
 80012a4:	785b      	ldrb	r3, [r3, #1]
 80012a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b5a      	ldr	r3, [pc, #360]	; (8001418 <CS43_Init+0x220>)
 80012ae:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <CS43_Init+0x220>)
 80012b2:	785b      	ldrb	r3, [r3, #1]
 80012b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b57      	ldr	r3, [pc, #348]	; (8001418 <CS43_Init+0x220>)
 80012bc:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80012be:	4b56      	ldr	r3, [pc, #344]	; (8001418 <CS43_Init+0x220>)
 80012c0:	785b      	ldrb	r3, [r3, #1]
 80012c2:	f023 0310 	bic.w	r3, r3, #16
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b53      	ldr	r3, [pc, #332]	; (8001418 <CS43_Init+0x220>)
 80012ca:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80012cc:	4b52      	ldr	r3, [pc, #328]	; (8001418 <CS43_Init+0x220>)
 80012ce:	785b      	ldrb	r3, [r3, #1]
 80012d0:	f023 0304 	bic.w	r3, r3, #4
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b50      	ldr	r3, [pc, #320]	; (8001418 <CS43_Init+0x220>)
 80012d8:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 80012da:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <CS43_Init+0x220>)
 80012dc:	785b      	ldrb	r3, [r3, #1]
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <CS43_Init+0x220>)
 80012e6:	705a      	strb	r2, [r3, #1]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80012e8:	4b4b      	ldr	r3, [pc, #300]	; (8001418 <CS43_Init+0x220>)
 80012ea:	785b      	ldrb	r3, [r3, #1]
 80012ec:	f043 0303 	orr.w	r3, r3, #3
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b49      	ldr	r3, [pc, #292]	; (8001418 <CS43_Init+0x220>)
 80012f4:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 80012f6:	4949      	ldr	r1, [pc, #292]	; (800141c <CS43_Init+0x224>)
 80012f8:	2006      	movs	r0, #6
 80012fa:	f7ff ff3d 	bl	8001178 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 80012fe:	4947      	ldr	r1, [pc, #284]	; (800141c <CS43_Init+0x224>)
 8001300:	2008      	movs	r0, #8
 8001302:	f7ff ff57 	bl	80011b4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001306:	4b44      	ldr	r3, [pc, #272]	; (8001418 <CS43_Init+0x220>)
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	f023 030f 	bic.w	r3, r3, #15
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b41      	ldr	r3, [pc, #260]	; (8001418 <CS43_Init+0x220>)
 8001312:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8001314:	4b40      	ldr	r3, [pc, #256]	; (8001418 <CS43_Init+0x220>)
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <CS43_Init+0x220>)
 8001320:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8001322:	493e      	ldr	r1, [pc, #248]	; (800141c <CS43_Init+0x224>)
 8001324:	2008      	movs	r0, #8
 8001326:	f7ff ff27 	bl	8001178 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800132a:	493c      	ldr	r1, [pc, #240]	; (800141c <CS43_Init+0x224>)
 800132c:	2009      	movs	r0, #9
 800132e:	f7ff ff41 	bl	80011b4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001332:	4b39      	ldr	r3, [pc, #228]	; (8001418 <CS43_Init+0x220>)
 8001334:	785b      	ldrb	r3, [r3, #1]
 8001336:	f023 030f 	bic.w	r3, r3, #15
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b36      	ldr	r3, [pc, #216]	; (8001418 <CS43_Init+0x220>)
 800133e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <CS43_Init+0x220>)
 8001342:	785b      	ldrb	r3, [r3, #1]
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b33      	ldr	r3, [pc, #204]	; (8001418 <CS43_Init+0x220>)
 800134c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 800134e:	4933      	ldr	r1, [pc, #204]	; (800141c <CS43_Init+0x224>)
 8001350:	2009      	movs	r0, #9
 8001352:	f7ff ff11 	bl	8001178 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8001356:	4931      	ldr	r1, [pc, #196]	; (800141c <CS43_Init+0x224>)
 8001358:	200e      	movs	r0, #14
 800135a:	f7ff ff2b 	bl	80011b4 <read_register>
	if(outputMode == MODE_ANALOG1)
 800135e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001362:	2b01      	cmp	r3, #1
 8001364:	d123      	bne.n	80013ae <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <CS43_Init+0x220>)
 8001368:	785b      	ldrb	r3, [r3, #1]
 800136a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <CS43_Init+0x220>)
 8001372:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <CS43_Init+0x220>)
 8001376:	785b      	ldrb	r3, [r3, #1]
 8001378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <CS43_Init+0x220>)
 8001380:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <CS43_Init+0x220>)
 8001384:	785b      	ldrb	r3, [r3, #1]
 8001386:	f023 0320 	bic.w	r3, r3, #32
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <CS43_Init+0x220>)
 800138e:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <CS43_Init+0x220>)
 8001392:	785b      	ldrb	r3, [r3, #1]
 8001394:	f023 0310 	bic.w	r3, r3, #16
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <CS43_Init+0x220>)
 800139c:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <CS43_Init+0x220>)
 80013a0:	785b      	ldrb	r3, [r3, #1]
 80013a2:	f023 0308 	bic.w	r3, r3, #8
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <CS43_Init+0x220>)
 80013aa:	705a      	strb	r2, [r3, #1]
 80013ac:	e006      	b.n	80013bc <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80013ae:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <CS43_Init+0x220>)
 80013b8:	2202      	movs	r2, #2
 80013ba:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80013bc:	4917      	ldr	r1, [pc, #92]	; (800141c <CS43_Init+0x224>)
 80013be:	200e      	movs	r0, #14
 80013c0:	f7ff feda 	bl	8001178 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80013c4:	4915      	ldr	r1, [pc, #84]	; (800141c <CS43_Init+0x224>)
 80013c6:	200f      	movs	r0, #15
 80013c8:	f7ff fef4 	bl	80011b4 <read_register>
	iData[1] = 0x00;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <CS43_Init+0x220>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80013d2:	4912      	ldr	r1, [pc, #72]	; (800141c <CS43_Init+0x224>)
 80013d4:	200f      	movs	r0, #15
 80013d6:	f7ff fecf 	bl	8001178 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <CS43_Init+0x220>)
 80013dc:	2200      	movs	r2, #0
 80013de:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80013e0:	490e      	ldr	r1, [pc, #56]	; (800141c <CS43_Init+0x224>)
 80013e2:	2014      	movs	r0, #20
 80013e4:	f7ff fec8 	bl	8001178 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <CS43_Init+0x224>)
 80013ea:	2015      	movs	r0, #21
 80013ec:	f7ff fec4 	bl	8001178 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 80013f0:	490a      	ldr	r1, [pc, #40]	; (800141c <CS43_Init+0x224>)
 80013f2:	201a      	movs	r0, #26
 80013f4:	f7ff fec0 	bl	8001178 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 80013f8:	4908      	ldr	r1, [pc, #32]	; (800141c <CS43_Init+0x224>)
 80013fa:	201b      	movs	r0, #27
 80013fc:	f7ff febc 	bl	8001178 <write_register>
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001408:	b004      	add	sp, #16
 800140a:	4770      	bx	lr
 800140c:	20000908 	.word	0x20000908
 8001410:	40020c00 	.word	0x40020c00
 8001414:	2000012c 	.word	0x2000012c
 8001418:	20000128 	.word	0x20000128
 800141c:	20000129 	.word	0x20000129

08001420 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	switch (side)
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b03      	cmp	r3, #3
 800142e:	d837      	bhi.n	80014a0 <CS43_Enable_RightLeft+0x80>
 8001430:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <CS43_Enable_RightLeft+0x18>)
 8001432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001436:	bf00      	nop
 8001438:	08001449 	.word	0x08001449
 800143c:	0800145f 	.word	0x0800145f
 8001440:	08001475 	.word	0x08001475
 8001444:	0800148b 	.word	0x0800148b
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 800144a:	22c0      	movs	r2, #192	; 0xc0
 800144c:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 800145a:	705a      	strb	r2, [r3, #1]
			break;
 800145c:	e021      	b.n	80014a2 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 8001470:	705a      	strb	r2, [r3, #1]
			break;
 8001472:	e016      	b.n	80014a2 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 8001476:	22c0      	movs	r2, #192	; 0xc0
 8001478:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 800147c:	785b      	ldrb	r3, [r3, #1]
 800147e:	f043 0320 	orr.w	r3, r3, #32
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 8001486:	705a      	strb	r2, [r3, #1]
			break;
 8001488:	e00b      	b.n	80014a2 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 800149c:	705a      	strb	r2, [r3, #1]
			break;
 800149e:	e000      	b.n	80014a2 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80014a0:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 80014a4:	785b      	ldrb	r3, [r3, #1]
 80014a6:	f043 030c 	orr.w	r3, r3, #12
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 80014ae:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 80014b2:	785b      	ldrb	r3, [r3, #1]
 80014b4:	f043 0303 	orr.w	r3, r3, #3
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <CS43_Enable_RightLeft+0xb0>)
 80014bc:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80014be:	4905      	ldr	r1, [pc, #20]	; (80014d4 <CS43_Enable_RightLeft+0xb4>)
 80014c0:	2004      	movs	r0, #4
 80014c2:	f7ff fe59 	bl	8001178 <write_register>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000128 	.word	0x20000128
 80014d4:	20000129 	.word	0x20000129

080014d8 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	3b32      	subs	r3, #50	; 0x32
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 80014f6:	4a16      	ldr	r2, [pc, #88]	; (8001550 <CS43_SetVolume+0x78>)
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80014fc:	4915      	ldr	r1, [pc, #84]	; (8001554 <CS43_SetVolume+0x7c>)
 80014fe:	2014      	movs	r0, #20
 8001500:	f7ff fe3a 	bl	8001178 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001504:	4913      	ldr	r1, [pc, #76]	; (8001554 <CS43_SetVolume+0x7c>)
 8001506:	2015      	movs	r0, #21
 8001508:	f7ff fe36 	bl	8001178 <write_register>

	iData[1] = VOLUME_CONVERT_D(volume);
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d80e      	bhi.n	8001530 <CS43_SetVolume+0x58>
 8001512:	79fa      	ldrb	r2, [r7, #7]
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <CS43_SetVolume+0x80>)
 800151e:	fb82 1203 	smull	r1, r2, r2, r3
 8001522:	1152      	asrs	r2, r2, #5
 8001524:	17db      	asrs	r3, r3, #31
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	3b18      	subs	r3, #24
 800152c:	b2db      	uxtb	r3, r3
 800152e:	e000      	b.n	8001532 <CS43_SetVolume+0x5a>
 8001530:	2318      	movs	r3, #24
 8001532:	4a07      	ldr	r2, [pc, #28]	; (8001550 <CS43_SetVolume+0x78>)
 8001534:	7053      	strb	r3, [r2, #1]

	/* Set the Master volume */
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8001536:	4907      	ldr	r1, [pc, #28]	; (8001554 <CS43_SetVolume+0x7c>)
 8001538:	2020      	movs	r0, #32
 800153a:	f7ff fe1d 	bl	8001178 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800153e:	4905      	ldr	r1, [pc, #20]	; (8001554 <CS43_SetVolume+0x7c>)
 8001540:	2021      	movs	r0, #33	; 0x21
 8001542:	f7ff fe19 	bl	8001178 <write_register>
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000128 	.word	0x20000128
 8001554:	20000129 	.word	0x20000129
 8001558:	51eb851f 	.word	0x51eb851f

0800155c <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <CS43_Start+0x7c>)
 8001562:	2299      	movs	r2, #153	; 0x99
 8001564:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8001566:	491d      	ldr	r1, [pc, #116]	; (80015dc <CS43_Start+0x80>)
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff fe05 	bl	8001178 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <CS43_Start+0x7c>)
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 8001574:	4919      	ldr	r1, [pc, #100]	; (80015dc <CS43_Start+0x80>)
 8001576:	2047      	movs	r0, #71	; 0x47
 8001578:	f7ff fdfe 	bl	8001178 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800157c:	4917      	ldr	r1, [pc, #92]	; (80015dc <CS43_Start+0x80>)
 800157e:	2032      	movs	r0, #50	; 0x32
 8001580:	f7ff fe18 	bl	80011b4 <read_register>
	iData[1] |= 0x80;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <CS43_Start+0x7c>)
 8001586:	785b      	ldrb	r3, [r3, #1]
 8001588:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <CS43_Start+0x7c>)
 8001590:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8001592:	4912      	ldr	r1, [pc, #72]	; (80015dc <CS43_Start+0x80>)
 8001594:	2032      	movs	r0, #50	; 0x32
 8001596:	f7ff fdef 	bl	8001178 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800159a:	4910      	ldr	r1, [pc, #64]	; (80015dc <CS43_Start+0x80>)
 800159c:	2032      	movs	r0, #50	; 0x32
 800159e:	f7ff fe09 	bl	80011b4 <read_register>
	iData[1] &= ~(0x80);
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <CS43_Start+0x7c>)
 80015a4:	785b      	ldrb	r3, [r3, #1]
 80015a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <CS43_Start+0x7c>)
 80015ae:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80015b0:	490a      	ldr	r1, [pc, #40]	; (80015dc <CS43_Start+0x80>)
 80015b2:	2032      	movs	r0, #50	; 0x32
 80015b4:	f7ff fde0 	bl	8001178 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <CS43_Start+0x7c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80015be:	4907      	ldr	r1, [pc, #28]	; (80015dc <CS43_Start+0x80>)
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff fdd9 	bl	8001178 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <CS43_Start+0x7c>)
 80015c8:	229e      	movs	r2, #158	; 0x9e
 80015ca:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 80015cc:	4903      	ldr	r1, [pc, #12]	; (80015dc <CS43_Start+0x80>)
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff fdd2 	bl	8001178 <write_register>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000128 	.word	0x20000128
 80015dc:	20000129 	.word	0x20000129

080015e0 <OSC_res_update>:

static float res_tracker;

static float res_step_sz;

uint16_t OSC_res_update() {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
	res_step_sz = mixer_get_pmf()/4.095;
 80015e6:	f001 f92d 	bl	8002844 <mixer_get_pmf>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff3d 	bl	800046c <__aeabi_i2d>
 80015f2:	a357      	add	r3, pc, #348	; (adr r3, 8001750 <OSC_res_update+0x170>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7ff f8cc 	bl	8000794 <__aeabi_ddiv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff fa74 	bl	8000af0 <__aeabi_d2f>
 8001608:	4603      	mov	r3, r0
 800160a:	4a4d      	ldr	r2, [pc, #308]	; (8001740 <OSC_res_update+0x160>)
 800160c:	6013      	str	r3, [r2, #0]
	uint16_t depth = mixer_get_filter_fc_high()/2 - 1;
 800160e:	f001 f851 	bl	80026b4 <mixer_get_filter_fc_high>
 8001612:	4603      	mov	r3, r0
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	b29b      	uxth	r3, r3
 8001618:	3b01      	subs	r3, #1
 800161a:	83fb      	strh	r3, [r7, #30]
	uint16_t center = mixer_get_filter_fc_low()/2 - 1;
 800161c:	f001 f834 	bl	8002688 <mixer_get_filter_fc_low>
 8001620:	4603      	mov	r3, r0
 8001622:	085b      	lsrs	r3, r3, #1
 8001624:	b29b      	uxth	r3, r3
 8001626:	3b01      	subs	r3, #1
 8001628:	83bb      	strh	r3, [r7, #28]

	int start = center - depth;
 800162a:	8bba      	ldrh	r2, [r7, #28]
 800162c:	8bfb      	ldrh	r3, [r7, #30]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
	if (start < 0) start = 0;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	2b00      	cmp	r3, #0
 8001636:	da01      	bge.n	800163c <OSC_res_update+0x5c>
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
	int stop = center + depth;
 800163c:	8bba      	ldrh	r2, [r7, #28]
 800163e:	8bfb      	ldrh	r3, [r7, #30]
 8001640:	4413      	add	r3, r2
 8001642:	623b      	str	r3, [r7, #32]
	if (stop > 0xFFF) stop = 0xFFF;
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164a:	db02      	blt.n	8001652 <OSC_res_update+0x72>
 800164c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001650:	623b      	str	r3, [r7, #32]

	uint16_t* wt = wavetable_get_ptr(mixer_get_OSC_ws(1));
 8001652:	2001      	movs	r0, #1
 8001654:	f001 f90a 	bl	800286c <mixer_get_OSC_ws>
 8001658:	4603      	mov	r3, r0
 800165a:	4618      	mov	r0, r3
 800165c:	f002 fcaa 	bl	8003fb4 <wavetable_get_ptr>
 8001660:	61b8      	str	r0, [r7, #24]

	uint16_t osc_val = wt[(uint16_t)res_tracker];
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <OSC_res_update+0x164>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166c:	ee17 3a90 	vmov	r3, s15
 8001670:	b29b      	uxth	r3, r3
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4413      	add	r3, r2
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	82fb      	strh	r3, [r7, #22]
	float osc_scaled = (float)osc_val/OSC_ref;
 800167c:	8afb      	ldrh	r3, [r7, #22]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001686:	f640 73ff 	movw	r3, #4095	; 0xfff
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001696:	edc7 7a04 	vstr	s15, [r7, #16]

	float f_start = (float)start/0xFFF;
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001748 <OSC_res_update+0x168>
 80016a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ac:	edc7 7a03 	vstr	s15, [r7, #12]
	float f_stop = (float)stop/0xFFF;
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ba:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001748 <OSC_res_update+0x168>
 80016be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c2:	edc7 7a02 	vstr	s15, [r7, #8]

	uint16_t out_val = OSC_ref * (f_start + osc_scaled*f_stop);
 80016c6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d2:	edd7 6a04 	vldr	s13, [r7, #16]
 80016d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80016da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016de:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ee:	ee17 3a90 	vmov	r3, s15
 80016f2:	80fb      	strh	r3, [r7, #6]

	res_tracker+= res_step_sz;
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <OSC_res_update+0x164>)
 80016f6:	ed93 7a00 	vldr	s14, [r3]
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <OSC_res_update+0x160>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <OSC_res_update+0x164>)
 8001706:	edc3 7a00 	vstr	s15, [r3]
	if (res_tracker > N_WT_SAMPLES) {
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <OSC_res_update+0x164>)
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800174c <OSC_res_update+0x16c>
 8001714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171c:	dd09      	ble.n	8001732 <OSC_res_update+0x152>
		res_tracker -= N_WT_SAMPLES;
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <OSC_res_update+0x164>)
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800174c <OSC_res_update+0x16c>
 8001728:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <OSC_res_update+0x164>)
 800172e:	edc3 7a00 	vstr	s15, [r3]
	}

	return out_val;
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4618      	mov	r0, r3
 8001736:	3728      	adds	r7, #40	; 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	f3af 8000 	nop.w
 8001740:	20000184 	.word	0x20000184
 8001744:	20000180 	.word	0x20000180
 8001748:	457ff000 	.word	0x457ff000
 800174c:	45a84000 	.word	0x45a84000
 8001750:	ae147ae1 	.word	0xae147ae1
 8001754:	40106147 	.word	0x40106147

08001758 <env_update_ADSR>:
	dec_update();
	sus_update();
	rel_update();
}

int env_update_ADSR() {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
	if (mixer_get_updated()) {
 800175e:	f000 ff87 	bl	8002670 <mixer_get_updated>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d009      	beq.n	800177c <env_update_ADSR+0x24>
		atc_update();
 8001768:	f000 f810 	bl	800178c <atc_update>
		dec_update();
 800176c:	f000 f82a 	bl	80017c4 <dec_update>
		sus_update();
 8001770:	f000 f844 	bl	80017fc <sus_update>
		rel_update();
 8001774:	f000 f858 	bl	8001828 <rel_update>
		return 0;
 8001778:	2300      	movs	r3, #0
 800177a:	e003      	b.n	8001784 <env_update_ADSR+0x2c>
	} else {
		int br = 1;
 800177c:	2301      	movs	r3, #1
 800177e:	607b      	str	r3, [r7, #4]
	}
	return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <atc_update>:

void atc_update() {
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	// atc = (float)mixer_get_attack()/MIXER_DREF;
	atc = (float)mixer_get_attack()/(MIXER_DREF * ADSR_FACTOR);
 8001790:	f000 ffb0 	bl	80026f4 <mixer_get_attack>
 8001794:	4603      	mov	r3, r0
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800179e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a2:	461a      	mov	r2, r3
 80017a4:	4613      	mov	r3, r2
 80017a6:	031b      	lsls	r3, r3, #12
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b6:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <atc_update+0x34>)
 80017b8:	edc3 7a00 	vstr	s15, [r3]
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000188 	.word	0x20000188

080017c4 <dec_update>:

void dec_update() {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	dec = (float)mixer_get_decay()/(MIXER_DREF * ADSR_FACTOR);
 80017c8:	f000 ffa0 	bl	800270c <mixer_get_decay>
 80017cc:	4603      	mov	r3, r0
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017da:	461a      	mov	r2, r3
 80017dc:	4613      	mov	r3, r2
 80017de:	031b      	lsls	r3, r3, #12
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ee:	4b02      	ldr	r3, [pc, #8]	; (80017f8 <dec_update+0x34>)
 80017f0:	edc3 7a00 	vstr	s15, [r3]
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000018c 	.word	0x2000018c

080017fc <sus_update>:

void sus_update() {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	sus = (float)mixer_get_sustain()/MIXER_DREF;
 8001800:	f000 ff90 	bl	8002724 <mixer_get_sustain>
 8001804:	4603      	mov	r3, r0
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800180e:	eddf 6a04 	vldr	s13, [pc, #16]	; 8001820 <sus_update+0x24>
 8001812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001816:	4b03      	ldr	r3, [pc, #12]	; (8001824 <sus_update+0x28>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	457ff000 	.word	0x457ff000
 8001824:	20000190 	.word	0x20000190

08001828 <rel_update>:

void rel_update() {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	rel = (float)mixer_get_release()/(MIXER_DREF * ADSR_FACTOR);
 800182c:	f000 ff86 	bl	800273c <mixer_get_release>
 8001830:	4603      	mov	r3, r0
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	461a      	mov	r2, r3
 8001840:	4613      	mov	r3, r2
 8001842:	031b      	lsls	r3, r3, #12
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001852:	4b02      	ldr	r3, [pc, #8]	; (800185c <rel_update+0x34>)
 8001854:	edc3 7a00 	vstr	s15, [r3]
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000194 	.word	0x20000194

08001860 <env_create>:

void env_create(uint8_t index, uint8_t midicode) {
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	460a      	mov	r2, r1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	4613      	mov	r3, r2
 800186e:	71bb      	strb	r3, [r7, #6]
	env_index_map[index] = midicode;
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	491d      	ldr	r1, [pc, #116]	; (80018e8 <env_create+0x88>)
 8001874:	79ba      	ldrb	r2, [r7, #6]
 8001876:	54ca      	strb	r2, [r1, r3]
	envelopes[midicode].env_stage = ATTACK;
 8001878:	79ba      	ldrb	r2, [r7, #6]
 800187a:	491c      	ldr	r1, [pc, #112]	; (80018ec <env_create+0x8c>)
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]

	envelopes[midicode].rel_rdy = false;
 800188a:	79ba      	ldrb	r2, [r7, #6]
 800188c:	4917      	ldr	r1, [pc, #92]	; (80018ec <env_create+0x8c>)
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	3308      	adds	r3, #8
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
	envelopes[midicode].scaler = 0;
 800189e:	79ba      	ldrb	r2, [r7, #6]
 80018a0:	4912      	ldr	r1, [pc, #72]	; (80018ec <env_create+0x8c>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	3304      	adds	r3, #4
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

	envelopes[midicode].MIDI_code = midicode;
 80018b4:	79ba      	ldrb	r2, [r7, #6]
 80018b6:	490d      	ldr	r1, [pc, #52]	; (80018ec <env_create+0x8c>)
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	3309      	adds	r3, #9
 80018c4:	79ba      	ldrb	r2, [r7, #6]
 80018c6:	701a      	strb	r2, [r3, #0]
	envelopes[midicode].input_index = index;
 80018c8:	79ba      	ldrb	r2, [r7, #6]
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <env_create+0x8c>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	330a      	adds	r3, #10
 80018d8:	79fa      	ldrb	r2, [r7, #7]
 80018da:	701a      	strb	r2, [r3, #0]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	2000078c 	.word	0x2000078c
 80018ec:	20000198 	.word	0x20000198

080018f0 <env_map_get>:

env_t* env_map_get(uint8_t index) {
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
	uint16_t i = env_index_map[index];
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <env_map_get+0x2c>)
 80018fe:	5cd3      	ldrb	r3, [r2, r3]
 8001900:	81fb      	strh	r3, [r7, #14]
	return &envelopes[i];
 8001902:	89fa      	ldrh	r2, [r7, #14]
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4a04      	ldr	r2, [pc, #16]	; (8001920 <env_map_get+0x30>)
 800190e:	4413      	add	r3, r2
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	2000078c 	.word	0x2000078c
 8001920:	20000198 	.word	0x20000198

08001924 <env_release>:

void env_release(uint8_t midi_index) {
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
	envelopes[midi_index].rel_rdy = true;
 800192e:	79fa      	ldrb	r2, [r7, #7]
 8001930:	4909      	ldr	r1, [pc, #36]	; (8001958 <env_release+0x34>)
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3308      	adds	r3, #8
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
	env_index_map[midi_index] = 0;
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <env_release+0x38>)
 8001946:	2100      	movs	r1, #0
 8001948:	54d1      	strb	r1, [r2, r3]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000198 	.word	0x20000198
 800195c:	2000078c 	.word	0x2000078c

08001960 <env_process>:
	if (index >= 10) { //nr of inputs
		index = 0;
	}
}

void env_process(uint8_t index) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	env_t* env = &envelopes[env_index_map[index]];
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	4a55      	ldr	r2, [pc, #340]	; (8001ac4 <env_process+0x164>)
 800196e:	5cd3      	ldrb	r3, [r2, r3]
 8001970:	461a      	mov	r2, r3
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4a53      	ldr	r2, [pc, #332]	; (8001ac8 <env_process+0x168>)
 800197c:	4413      	add	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
	if (env->rel_rdy) {
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	7a1b      	ldrb	r3, [r3, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <env_process+0x2e>
		env->env_stage = RELEASE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2204      	movs	r2, #4
 800198c:	701a      	strb	r2, [r3, #0]
//		return;
	}

	switch(env->env_stage) {
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b05      	cmp	r3, #5
 8001994:	f200 808c 	bhi.w	8001ab0 <env_process+0x150>
 8001998:	a201      	add	r2, pc, #4	; (adr r2, 80019a0 <env_process+0x40>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	08001ab9 	.word	0x08001ab9
 80019a4:	080019b9 	.word	0x080019b9
 80019a8:	080019f5 	.word	0x080019f5
 80019ac:	08001a33 	.word	0x08001a33
 80019b0:	08001a3d 	.word	0x08001a3d
 80019b4:	08001a91 	.word	0x08001a91

	case ENV_IDLE:
		break;

	case ATTACK:
		if (env->scaler >= 1) {
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80019be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	db07      	blt.n	80019dc <env_process+0x7c>
			env->scaler = 1;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019d2:	605a      	str	r2, [r3, #4]
			env->env_stage = DECAY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2202      	movs	r2, #2
 80019d8:	701a      	strb	r2, [r3, #0]
		} else {
			env->scaler+=atc;
		}

		break;
 80019da:	e06e      	b.n	8001aba <env_process+0x15a>
			env->scaler+=atc;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	ed93 7a01 	vldr	s14, [r3, #4]
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <env_process+0x16c>)
 80019e4:	edd3 7a00 	vldr	s15, [r3]
 80019e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 80019f2:	e062      	b.n	8001aba <env_process+0x15a>

	case DECAY:
		if (env->scaler <= sus) {
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80019fa:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <env_process+0x170>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a08:	d807      	bhi.n	8001a1a <env_process+0xba>
			env->scaler = sus;
 8001a0a:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <env_process+0x170>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	605a      	str	r2, [r3, #4]
			env->env_stage = SUSTAIN;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2203      	movs	r2, #3
 8001a16:	701a      	strb	r2, [r3, #0]
		} else {
			env->scaler -= dec;
		}

		break;
 8001a18:	e04f      	b.n	8001aba <env_process+0x15a>
			env->scaler -= dec;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a20:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <env_process+0x174>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8001a30:	e043      	b.n	8001aba <env_process+0x15a>

	case SUSTAIN:
		env->scaler = sus;
 8001a32:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <env_process+0x170>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	605a      	str	r2, [r3, #4]
		break;
 8001a3a:	e03e      	b.n	8001aba <env_process+0x15a>

	case RELEASE:
		if (env->scaler <= 0) {
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	d812      	bhi.n	8001a72 <env_process+0x112>
			env->scaler = 0;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
			env->env_stage = ENV_DONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2205      	movs	r2, #5
 8001a58:	701a      	strb	r2, [r3, #0]
			env->rel_rdy = false;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	721a      	strb	r2, [r3, #8]
			MIDI_note_disable(env->MIDI_code, env->input_index);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	7a5a      	ldrb	r2, [r3, #9]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	7a9b      	ldrb	r3, [r3, #10]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f7ff fafa 	bl	8001064 <MIDI_note_disable>
		} else {
			env->rel_rdy = false;
			env->scaler -= rel;
		}

		break;
 8001a70:	e023      	b.n	8001aba <env_process+0x15a>
			env->rel_rdy = false;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	721a      	strb	r2, [r3, #8]
			env->scaler -= rel;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <env_process+0x178>)
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8001a8e:	e014      	b.n	8001aba <env_process+0x15a>

	case ENV_DONE:
		env_index_map[env->input_index] = 0;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	7a9b      	ldrb	r3, [r3, #10]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <env_process+0x164>)
 8001a98:	2100      	movs	r1, #0
 8001a9a:	5499      	strb	r1, [r3, r2]
		env->input_index = 0;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	729a      	strb	r2, [r3, #10]
//		env->scaler = 0;
		env->MIDI_code = 0;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	725a      	strb	r2, [r3, #9]
		env->env_stage = ENV_IDLE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]

		break;
 8001aae:	e004      	b.n	8001aba <env_process+0x15a>
	default:
		env->env_stage = ENV_DONE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2205      	movs	r2, #5
 8001ab4:	701a      	strb	r2, [r3, #0]
		break;
 8001ab6:	e000      	b.n	8001aba <env_process+0x15a>
		break;
 8001ab8:	bf00      	nop
	}
}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000078c 	.word	0x2000078c
 8001ac8:	20000198 	.word	0x20000198
 8001acc:	20000188 	.word	0x20000188
 8001ad0:	20000190 	.word	0x20000190
 8001ad4:	2000018c 	.word	0x2000018c
 8001ad8:	20000194 	.word	0x20000194

08001adc <filter_update>:
 *      Author: sfs
 */
#include "filter.h"


void filter_update() {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	if (mixer_get_updated()) {
 8001ae0:	f000 fdc6 	bl	8002670 <mixer_get_updated>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <filter_update+0x16>
		filter_lp_update();
 8001aea:	f002 fe53 	bl	8004794 <filter_lp_update>
		// filter_res_update();
		///filter_hp_update();
		filter_res_coeff_update();
 8001aee:	f002 feff 	bl	80048f0 <filter_res_coeff_update>
	}
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b095      	sub	sp, #84	; 0x54
 8001afc:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001afe:	f002 fff5 	bl	8004aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b02:	f000 f923 	bl	8001d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b06:	f000 fbaf 	bl	8002268 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b0a:	f000 fa91 	bl	8002030 <MX_I2C1_Init>
  MX_DMA_Init();
 8001b0e:	f000 fb75 	bl	80021fc <MX_DMA_Init>
  MX_USB_HOST_Init();
 8001b12:	f00b fca7 	bl	800d464 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8001b16:	f000 f983 	bl	8001e20 <MX_ADC1_Init>
  MX_I2S3_Init();
 8001b1a:	f000 fab7 	bl	800208c <MX_I2S3_Init>
  MX_TIM3_Init();
 8001b1e:	f000 fae3 	bl	80020e8 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001b22:	f000 fb37 	bl	8002194 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	CS43_Init(hi2c1, MODE_I2S);
 8001b26:	4c7f      	ldr	r4, [pc, #508]	; (8001d24 <main+0x22c>)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9311      	str	r3, [sp, #68]	; 0x44
 8001b2c:	4668      	mov	r0, sp
 8001b2e:	f104 0310 	add.w	r3, r4, #16
 8001b32:	2244      	movs	r2, #68	; 0x44
 8001b34:	4619      	mov	r1, r3
 8001b36:	f00b ffd7 	bl	800dae8 <memcpy>
 8001b3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b3e:	f7ff fb5b 	bl	80011f8 <CS43_Init>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8001b42:	2003      	movs	r0, #3
 8001b44:	f7ff fc6c 	bl	8001420 <CS43_Enable_RightLeft>
	CS43_SetVolume(1);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f7ff fcc5 	bl	80014d8 <CS43_SetVolume>
	CS43_Start();
 8001b4e:	f7ff fd05 	bl	800155c <CS43_Start>

	nf_map_init_440(nf_map_440hz);
 8001b52:	4875      	ldr	r0, [pc, #468]	; (8001d28 <main+0x230>)
 8001b54:	f000 ff6c 	bl	8002a30 <nf_map_init_440>

	wavetable_init_all();
 8001b58:	f002 f9ee 	bl	8003f38 <wavetable_init_all>


	HAL_StatusTypeDef tx_init_status = HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)i2s_out, I2S_OUT_N);
 8001b5c:	f241 5208 	movw	r2, #5384	; 0x1508
 8001b60:	4972      	ldr	r1, [pc, #456]	; (8001d2c <main+0x234>)
 8001b62:	4873      	ldr	r0, [pc, #460]	; (8001d30 <main+0x238>)
 8001b64:	f007 f8c4 	bl	8008cf0 <HAL_I2S_Transmit_DMA>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4871      	ldr	r0, [pc, #452]	; (8001d34 <main+0x23c>)
 8001b70:	f004 fbab 	bl	80062ca <HAL_GPIO_TogglePin>

	mixer_init(&hadc1, &htim3);
 8001b74:	4970      	ldr	r1, [pc, #448]	; (8001d38 <main+0x240>)
 8001b76:	4871      	ldr	r0, [pc, #452]	; (8001d3c <main+0x244>)
 8001b78:	f000 fcaa 	bl	80024d0 <mixer_init>

	filter_lp_RC_init(1, DELTA_T_DEFAULT);
 8001b7c:	eddf 7a70 	vldr	s15, [pc, #448]	; 8001d40 <main+0x248>
 8001b80:	eef0 0a67 	vmov.f32	s1, s15
 8001b84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001b88:	f002 fdd0 	bl	800472c <filter_lp_RC_init>

	filter_hp_RC_init(1, DELTA_T_DEFAULT);
 8001b8c:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8001d40 <main+0x248>
 8001b90:	eef0 0a67 	vmov.f32	s1, s15
 8001b94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001b98:	f002 fd94 	bl	80046c4 <filter_hp_RC_init>

	filter_res_init();
 8001b9c:	f002 fe84 	bl	80048a8 <filter_res_init>

	output_handler_init(MIDI_get_n_voices());
 8001ba0:	f7ff fa58 	bl	8001054 <MIDI_get_n_voices>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 ffa8 	bl	8002afc <output_handler_init>

	ws_enum wave_shape;

	while(env_update_ADSR()) {
 8001bac:	bf00      	nop
 8001bae:	f7ff fdd3 	bl	8001758 <env_update_ADSR>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1fa      	bne.n	8001bae <main+0xb6>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
	{
		MIDI_Application();
 8001bb8:	f7ff f96c 	bl	8000e94 <MIDI_Application>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001bbc:	f00b fc78 	bl	800d4b0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		filter_update(); //NOTE: Filter needs to update BEFORE mixer
 8001bc0:	f7ff ff8c 	bl	8001adc <filter_update>
		mixer_update();
 8001bc4:	f000 fcd8 	bl	8002578 <mixer_update>

		MIDI_update_input(output_handler_get_steps());
 8001bc8:	f001 fc54 	bl	8003474 <output_handler_get_steps>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f9aa 	bl	8000f28 <MIDI_update_input>
		env_update_ADSR();
 8001bd4:	f7ff fdc0 	bl	8001758 <env_update_ADSR>

		if (i2s_tx_half) {
 8001bd8:	4b5a      	ldr	r3, [pc, #360]	; (8001d44 <main+0x24c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d04b      	beq.n	8001c78 <main+0x180>
			wave_shape = mixer_get_waveshape_out();
 8001be0:	f000 fe68 	bl	80028b4 <mixer_get_waveshape_out>
 8001be4:	4603      	mov	r3, r0
 8001be6:	71bb      	strb	r3, [r7, #6]

			if (wave_shape == SINE) {
 8001be8:	79bb      	ldrb	r3, [r7, #6]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10a      	bne.n	8001c04 <main+0x10c>
				output_handler_outwave_update(i2s_out, 0, I2S_OUT_N_HALF, wavetable_get_ptr(SINE));
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f002 f9e0 	bl	8003fb4 <wavetable_get_ptr>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f640 2284 	movw	r2, #2692	; 0xa84
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	484b      	ldr	r0, [pc, #300]	; (8001d2c <main+0x234>)
 8001bfe:	f000 ffb3 	bl	8002b68 <output_handler_outwave_update>
 8001c02:	e036      	b.n	8001c72 <main+0x17a>
			}
			else if (wave_shape == SQUARE) {
 8001c04:	79bb      	ldrb	r3, [r7, #6]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d10a      	bne.n	8001c20 <main+0x128>
				output_handler_outwave_update(i2s_out, 0, I2S_OUT_N_HALF, wavetable_get_ptr(SQUARE));
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f002 f9d2 	bl	8003fb4 <wavetable_get_ptr>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f640 2284 	movw	r2, #2692	; 0xa84
 8001c16:	2100      	movs	r1, #0
 8001c18:	4844      	ldr	r0, [pc, #272]	; (8001d2c <main+0x234>)
 8001c1a:	f000 ffa5 	bl	8002b68 <output_handler_outwave_update>
 8001c1e:	e028      	b.n	8001c72 <main+0x17a>
			}
			else if (wave_shape == TRIANGLE) {
 8001c20:	79bb      	ldrb	r3, [r7, #6]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d10a      	bne.n	8001c3c <main+0x144>
				output_handler_outwave_update(i2s_out, 0, I2S_OUT_N_HALF, wavetable_get_ptr(TRIANGLE));
 8001c26:	2002      	movs	r0, #2
 8001c28:	f002 f9c4 	bl	8003fb4 <wavetable_get_ptr>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f640 2284 	movw	r2, #2692	; 0xa84
 8001c32:	2100      	movs	r1, #0
 8001c34:	483d      	ldr	r0, [pc, #244]	; (8001d2c <main+0x234>)
 8001c36:	f000 ff97 	bl	8002b68 <output_handler_outwave_update>
 8001c3a:	e01a      	b.n	8001c72 <main+0x17a>
			}
			else if (wave_shape == SAWTOOTH) {
 8001c3c:	79bb      	ldrb	r3, [r7, #6]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d10a      	bne.n	8001c58 <main+0x160>
				output_handler_outwave_update(i2s_out, 0, I2S_OUT_N_HALF, wavetable_get_ptr(SAWTOOTH));
 8001c42:	2003      	movs	r0, #3
 8001c44:	f002 f9b6 	bl	8003fb4 <wavetable_get_ptr>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f640 2284 	movw	r2, #2692	; 0xa84
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4836      	ldr	r0, [pc, #216]	; (8001d2c <main+0x234>)
 8001c52:	f000 ff89 	bl	8002b68 <output_handler_outwave_update>
 8001c56:	e00c      	b.n	8001c72 <main+0x17a>
			}
			else if (wave_shape == BOWSAW) {
 8001c58:	79bb      	ldrb	r3, [r7, #6]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d109      	bne.n	8001c72 <main+0x17a>
				output_handler_outwave_update(i2s_out, 0, I2S_OUT_N_HALF, wavetable_get_ptr(BOWSAW));
 8001c5e:	2004      	movs	r0, #4
 8001c60:	f002 f9a8 	bl	8003fb4 <wavetable_get_ptr>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f640 2284 	movw	r2, #2692	; 0xa84
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	482f      	ldr	r0, [pc, #188]	; (8001d2c <main+0x234>)
 8001c6e:	f000 ff7b 	bl	8002b68 <output_handler_outwave_update>
			}
			i2s_tx_half = false;
 8001c72:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <main+0x24c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
//		MIDI_Application();
//		MX_USB_HOST_Process();

//		env_process_update();

		if (i2s_tx_cplt) {
 8001c78:	4b33      	ldr	r3, [pc, #204]	; (8001d48 <main+0x250>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d09b      	beq.n	8001bb8 <main+0xc0>
			wave_shape = mixer_get_waveshape_out();
 8001c80:	f000 fe18 	bl	80028b4 <mixer_get_waveshape_out>
 8001c84:	4603      	mov	r3, r0
 8001c86:	71bb      	strb	r3, [r7, #6]

			if (wave_shape == SINE) {
 8001c88:	79bb      	ldrb	r3, [r7, #6]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10b      	bne.n	8001ca6 <main+0x1ae>
				output_handler_outwave_update(i2s_out, I2S_OUT_N_HALF, I2S_OUT_N, wavetable_get_ptr(SINE));
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f002 f990 	bl	8003fb4 <wavetable_get_ptr>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f241 5208 	movw	r2, #5384	; 0x1508
 8001c9a:	f640 2184 	movw	r1, #2692	; 0xa84
 8001c9e:	4823      	ldr	r0, [pc, #140]	; (8001d2c <main+0x234>)
 8001ca0:	f000 ff62 	bl	8002b68 <output_handler_outwave_update>
 8001ca4:	e03a      	b.n	8001d1c <main+0x224>
			}
			else if (wave_shape == SQUARE) {
 8001ca6:	79bb      	ldrb	r3, [r7, #6]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d10b      	bne.n	8001cc4 <main+0x1cc>
				output_handler_outwave_update(i2s_out, I2S_OUT_N_HALF, I2S_OUT_N, wavetable_get_ptr(SQUARE));
 8001cac:	2001      	movs	r0, #1
 8001cae:	f002 f981 	bl	8003fb4 <wavetable_get_ptr>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f241 5208 	movw	r2, #5384	; 0x1508
 8001cb8:	f640 2184 	movw	r1, #2692	; 0xa84
 8001cbc:	481b      	ldr	r0, [pc, #108]	; (8001d2c <main+0x234>)
 8001cbe:	f000 ff53 	bl	8002b68 <output_handler_outwave_update>
 8001cc2:	e02b      	b.n	8001d1c <main+0x224>
			}
			else if (wave_shape == TRIANGLE) {
 8001cc4:	79bb      	ldrb	r3, [r7, #6]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d10b      	bne.n	8001ce2 <main+0x1ea>
				output_handler_outwave_update(i2s_out, I2S_OUT_N_HALF, I2S_OUT_N, wavetable_get_ptr(TRIANGLE));
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f002 f972 	bl	8003fb4 <wavetable_get_ptr>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f241 5208 	movw	r2, #5384	; 0x1508
 8001cd6:	f640 2184 	movw	r1, #2692	; 0xa84
 8001cda:	4814      	ldr	r0, [pc, #80]	; (8001d2c <main+0x234>)
 8001cdc:	f000 ff44 	bl	8002b68 <output_handler_outwave_update>
 8001ce0:	e01c      	b.n	8001d1c <main+0x224>
			}
			else if (wave_shape == SAWTOOTH) {
 8001ce2:	79bb      	ldrb	r3, [r7, #6]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d10b      	bne.n	8001d00 <main+0x208>
				output_handler_outwave_update(i2s_out, I2S_OUT_N_HALF, I2S_OUT_N, wavetable_get_ptr(SAWTOOTH));
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f002 f963 	bl	8003fb4 <wavetable_get_ptr>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f241 5208 	movw	r2, #5384	; 0x1508
 8001cf4:	f640 2184 	movw	r1, #2692	; 0xa84
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <main+0x234>)
 8001cfa:	f000 ff35 	bl	8002b68 <output_handler_outwave_update>
 8001cfe:	e00d      	b.n	8001d1c <main+0x224>
			}
			else if (wave_shape == BOWSAW) {
 8001d00:	79bb      	ldrb	r3, [r7, #6]
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d10a      	bne.n	8001d1c <main+0x224>
				output_handler_outwave_update(i2s_out, I2S_OUT_N_HALF, I2S_OUT_N, wavetable_get_ptr(BOWSAW));
 8001d06:	2004      	movs	r0, #4
 8001d08:	f002 f954 	bl	8003fb4 <wavetable_get_ptr>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f241 5208 	movw	r2, #5384	; 0x1508
 8001d12:	f640 2184 	movw	r1, #2692	; 0xa84
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <main+0x234>)
 8001d18:	f000 ff26 	bl	8002b68 <output_handler_outwave_update>
			}
			i2s_tx_cplt = false;
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <main+0x250>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
		MIDI_Application();
 8001d22:	e749      	b.n	8001bb8 <main+0xc0>
 8001d24:	200008b4 	.word	0x200008b4
 8001d28:	20003454 	.word	0x20003454
 8001d2c:	20000a40 	.word	0x20000a40
 8001d30:	20000908 	.word	0x20000908
 8001d34:	40020800 	.word	0x40020800
 8001d38:	200009b0 	.word	0x200009b0
 8001d3c:	2000080c 	.word	0x2000080c
 8001d40:	37aec33e 	.word	0x37aec33e
 8001d44:	20003451 	.word	0x20003451
 8001d48:	20003450 	.word	0x20003450

08001d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b094      	sub	sp, #80	; 0x50
 8001d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d52:	f107 0320 	add.w	r3, r7, #32
 8001d56:	2230      	movs	r2, #48	; 0x30
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f00b fed2 	bl	800db04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <SystemClock_Config+0xcc>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <SystemClock_Config+0xcc>)
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <SystemClock_Config+0xcc>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <SystemClock_Config+0xd0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <SystemClock_Config+0xd0>)
 8001d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <SystemClock_Config+0xd0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001da8:	2301      	movs	r3, #1
 8001daa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db2:	2302      	movs	r3, #2
 8001db4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001db6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001dc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001dc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001dca:	2307      	movs	r3, #7
 8001dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dce:	f107 0320 	add.w	r3, r7, #32
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f007 fbea 	bl	80095ac <HAL_RCC_OscConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001dde:	f000 fb71 	bl	80024c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de2:	230f      	movs	r3, #15
 8001de4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de6:	2302      	movs	r3, #2
 8001de8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001df2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	2105      	movs	r1, #5
 8001e00:	4618      	mov	r0, r3
 8001e02:	f007 fe4b 	bl	8009a9c <HAL_RCC_ClockConfig>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e0c:	f000 fb5a 	bl	80024c4 <Error_Handler>
  }
}
 8001e10:	bf00      	nop
 8001e12:	3750      	adds	r7, #80	; 0x50
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000

08001e20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e26:	463b      	mov	r3, r7
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e32:	4b7d      	ldr	r3, [pc, #500]	; (8002028 <MX_ADC1_Init+0x208>)
 8001e34:	4a7d      	ldr	r2, [pc, #500]	; (800202c <MX_ADC1_Init+0x20c>)
 8001e36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e38:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <MX_ADC1_Init+0x208>)
 8001e3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e40:	4b79      	ldr	r3, [pc, #484]	; (8002028 <MX_ADC1_Init+0x208>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e46:	4b78      	ldr	r3, [pc, #480]	; (8002028 <MX_ADC1_Init+0x208>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e4c:	4b76      	ldr	r3, [pc, #472]	; (8002028 <MX_ADC1_Init+0x208>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e52:	4b75      	ldr	r3, [pc, #468]	; (8002028 <MX_ADC1_Init+0x208>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001e5a:	4b73      	ldr	r3, [pc, #460]	; (8002028 <MX_ADC1_Init+0x208>)
 8001e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001e62:	4b71      	ldr	r3, [pc, #452]	; (8002028 <MX_ADC1_Init+0x208>)
 8001e64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e6a:	4b6f      	ldr	r3, [pc, #444]	; (8002028 <MX_ADC1_Init+0x208>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8001e70:	4b6d      	ldr	r3, [pc, #436]	; (8002028 <MX_ADC1_Init+0x208>)
 8001e72:	220e      	movs	r2, #14
 8001e74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e76:	4b6c      	ldr	r3, [pc, #432]	; (8002028 <MX_ADC1_Init+0x208>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e7e:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <MX_ADC1_Init+0x208>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e84:	4868      	ldr	r0, [pc, #416]	; (8002028 <MX_ADC1_Init+0x208>)
 8001e86:	f002 fec7 	bl	8004c18 <HAL_ADC_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001e90:	f000 fb18 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e94:	2301      	movs	r3, #1
 8001e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4860      	ldr	r0, [pc, #384]	; (8002028 <MX_ADC1_Init+0x208>)
 8001ea6:	f003 f92f 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001eb0:	f000 fb08 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4859      	ldr	r0, [pc, #356]	; (8002028 <MX_ADC1_Init+0x208>)
 8001ec2:	f003 f921 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001ecc:	f000 fafa 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed8:	463b      	mov	r3, r7
 8001eda:	4619      	mov	r1, r3
 8001edc:	4852      	ldr	r0, [pc, #328]	; (8002028 <MX_ADC1_Init+0x208>)
 8001ede:	f003 f913 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001ee8:	f000 faec 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001eec:	2305      	movs	r3, #5
 8001eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	484b      	ldr	r0, [pc, #300]	; (8002028 <MX_ADC1_Init+0x208>)
 8001efa:	f003 f905 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001f04:	f000 fade 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f08:	2306      	movs	r3, #6
 8001f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001f0c:	2305      	movs	r3, #5
 8001f0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	4619      	mov	r1, r3
 8001f14:	4844      	ldr	r0, [pc, #272]	; (8002028 <MX_ADC1_Init+0x208>)
 8001f16:	f003 f8f7 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8001f20:	f000 fad0 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001f24:	2307      	movs	r3, #7
 8001f26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001f28:	2306      	movs	r3, #6
 8001f2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	4619      	mov	r1, r3
 8001f30:	483d      	ldr	r0, [pc, #244]	; (8002028 <MX_ADC1_Init+0x208>)
 8001f32:	f003 f8e9 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8001f3c:	f000 fac2 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f40:	2308      	movs	r3, #8
 8001f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001f44:	2307      	movs	r3, #7
 8001f46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4836      	ldr	r0, [pc, #216]	; (8002028 <MX_ADC1_Init+0x208>)
 8001f4e:	f003 f8db 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8001f58:	f000 fab4 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001f5c:	2309      	movs	r3, #9
 8001f5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001f60:	2308      	movs	r3, #8
 8001f62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f64:	463b      	mov	r3, r7
 8001f66:	4619      	mov	r1, r3
 8001f68:	482f      	ldr	r0, [pc, #188]	; (8002028 <MX_ADC1_Init+0x208>)
 8001f6a:	f003 f8cd 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8001f74:	f000 faa6 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001f78:	230b      	movs	r3, #11
 8001f7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001f7c:	2309      	movs	r3, #9
 8001f7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f80:	463b      	mov	r3, r7
 8001f82:	4619      	mov	r1, r3
 8001f84:	4828      	ldr	r0, [pc, #160]	; (8002028 <MX_ADC1_Init+0x208>)
 8001f86:	f003 f8bf 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8001f90:	f000 fa98 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001f94:	230c      	movs	r3, #12
 8001f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001f98:	230a      	movs	r3, #10
 8001f9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4821      	ldr	r0, [pc, #132]	; (8002028 <MX_ADC1_Init+0x208>)
 8001fa2:	f003 f8b1 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8001fac:	f000 fa8a 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001fb0:	230d      	movs	r3, #13
 8001fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001fb4:	230b      	movs	r3, #11
 8001fb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fb8:	463b      	mov	r3, r7
 8001fba:	4619      	mov	r1, r3
 8001fbc:	481a      	ldr	r0, [pc, #104]	; (8002028 <MX_ADC1_Init+0x208>)
 8001fbe:	f003 f8a3 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001fc8:	f000 fa7c 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001fcc:	230e      	movs	r3, #14
 8001fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4813      	ldr	r0, [pc, #76]	; (8002028 <MX_ADC1_Init+0x208>)
 8001fda:	f003 f895 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 8001fe4:	f000 fa6e 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001fe8:	230f      	movs	r3, #15
 8001fea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001fec:	230d      	movs	r3, #13
 8001fee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <MX_ADC1_Init+0x208>)
 8001ff6:	f003 f887 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_ADC1_Init+0x1e4>
  {
    Error_Handler();
 8002000:	f000 fa60 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002004:	2300      	movs	r3, #0
 8002006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002008:	230e      	movs	r3, #14
 800200a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800200c:	463b      	mov	r3, r7
 800200e:	4619      	mov	r1, r3
 8002010:	4805      	ldr	r0, [pc, #20]	; (8002028 <MX_ADC1_Init+0x208>)
 8002012:	f003 f879 	bl	8005108 <HAL_ADC_ConfigChannel>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_ADC1_Init+0x200>
  {
    Error_Handler();
 800201c:	f000 fa52 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	2000080c 	.word	0x2000080c
 800202c:	40012000 	.word	0x40012000

08002030 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <MX_I2C1_Init+0x50>)
 8002036:	4a13      	ldr	r2, [pc, #76]	; (8002084 <MX_I2C1_Init+0x54>)
 8002038:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <MX_I2C1_Init+0x50>)
 800203c:	4a12      	ldr	r2, [pc, #72]	; (8002088 <MX_I2C1_Init+0x58>)
 800203e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <MX_I2C1_Init+0x50>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <MX_I2C1_Init+0x50>)
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <MX_I2C1_Init+0x50>)
 800204e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002052:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <MX_I2C1_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <MX_I2C1_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <MX_I2C1_Init+0x50>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <MX_I2C1_Init+0x50>)
 8002068:	2200      	movs	r2, #0
 800206a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <MX_I2C1_Init+0x50>)
 800206e:	f005 fd69 	bl	8007b44 <HAL_I2C_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002078:	f000 fa24 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	200008b4 	.word	0x200008b4
 8002084:	40005400 	.word	0x40005400
 8002088:	000186a0 	.word	0x000186a0

0800208c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2S3_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <MX_I2S3_Init+0x54>)
 8002092:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <MX_I2S3_Init+0x58>)
 8002094:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <MX_I2S3_Init+0x54>)
 8002098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <MX_I2S3_Init+0x54>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <MX_I2S3_Init+0x54>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <MX_I2S3_Init+0x54>)
 80020ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <MX_I2S3_Init+0x54>)
 80020b4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80020b8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <MX_I2S3_Init+0x54>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <MX_I2S3_Init+0x54>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <MX_I2S3_Init+0x54>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80020cc:	4804      	ldr	r0, [pc, #16]	; (80020e0 <MX_I2S3_Init+0x54>)
 80020ce:	f006 fccf 	bl	8008a70 <HAL_I2S_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80020d8:	f000 f9f4 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000908 	.word	0x20000908
 80020e4:	40003c00 	.word	0x40003c00

080020e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	; 0x28
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ee:	f107 0320 	add.w	r3, r7, #32
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]
 8002104:	611a      	str	r2, [r3, #16]
 8002106:	615a      	str	r2, [r3, #20]
 8002108:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <MX_TIM3_Init+0xa4>)
 800210c:	4a20      	ldr	r2, [pc, #128]	; (8002190 <MX_TIM3_Init+0xa8>)
 800210e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <MX_TIM3_Init+0xa4>)
 8002112:	2208      	movs	r2, #8
 8002114:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <MX_TIM3_Init+0xa4>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <MX_TIM3_Init+0xa4>)
 800211e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002122:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <MX_TIM3_Init+0xa4>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <MX_TIM3_Init+0xa4>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002130:	4816      	ldr	r0, [pc, #88]	; (800218c <MX_TIM3_Init+0xa4>)
 8002132:	f008 f8bf 	bl	800a2b4 <HAL_TIM_OC_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800213c:	f000 f9c2 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002140:	2320      	movs	r3, #32
 8002142:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002148:	f107 0320 	add.w	r3, r7, #32
 800214c:	4619      	mov	r1, r3
 800214e:	480f      	ldr	r0, [pc, #60]	; (800218c <MX_TIM3_Init+0xa4>)
 8002150:	f008 fce6 	bl	800ab20 <HAL_TIMEx_MasterConfigSynchronization>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800215a:	f000 f9b3 	bl	80024c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2200      	movs	r2, #0
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_TIM3_Init+0xa4>)
 8002176:	f008 f9f5 	bl	800a564 <HAL_TIM_OC_ConfigChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002180:	f000 f9a0 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200009b0 	.word	0x200009b0
 8002190:	40000400 	.word	0x40000400

08002194 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219a:	463b      	mov	r3, r7
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80021a2:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <MX_TIM7_Init+0x60>)
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <MX_TIM7_Init+0x64>)
 80021a6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 168-1;
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <MX_TIM7_Init+0x60>)
 80021aa:	22a7      	movs	r2, #167	; 0xa7
 80021ac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_TIM7_Init+0x60>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 200-1;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <MX_TIM7_Init+0x60>)
 80021b6:	22c7      	movs	r2, #199	; 0xc7
 80021b8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <MX_TIM7_Init+0x60>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80021c0:	480c      	ldr	r0, [pc, #48]	; (80021f4 <MX_TIM7_Init+0x60>)
 80021c2:	f007 ffb7 	bl	800a134 <HAL_TIM_Base_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80021cc:	f000 f97a 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021d0:	2320      	movs	r3, #32
 80021d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80021d8:	463b      	mov	r3, r7
 80021da:	4619      	mov	r1, r3
 80021dc:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_TIM7_Init+0x60>)
 80021de:	f008 fc9f 	bl	800ab20 <HAL_TIMEx_MasterConfigSynchronization>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80021e8:	f000 f96c 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	200009f8 	.word	0x200009f8
 80021f8:	40001400 	.word	0x40001400

080021fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <MX_DMA_Init+0x68>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a16      	ldr	r2, [pc, #88]	; (8002264 <MX_DMA_Init+0x68>)
 800220c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <MX_DMA_Init+0x68>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <MX_DMA_Init+0x68>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a0f      	ldr	r2, [pc, #60]	; (8002264 <MX_DMA_Init+0x68>)
 8002228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <MX_DMA_Init+0x68>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	2010      	movs	r0, #16
 8002240:	f003 fae7 	bl	8005812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002244:	2010      	movs	r0, #16
 8002246:	f003 fb00 	bl	800584a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	2038      	movs	r0, #56	; 0x38
 8002250:	f003 fadf 	bl	8005812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002254:	2038      	movs	r0, #56	; 0x38
 8002256:	f003 faf8 	bl	800584a <HAL_NVIC_EnableIRQ>

}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800

08002268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226e:	f107 031c 	add.w	r3, r7, #28
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	4b75      	ldr	r3, [pc, #468]	; (8002458 <MX_GPIO_Init+0x1f0>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a74      	ldr	r2, [pc, #464]	; (8002458 <MX_GPIO_Init+0x1f0>)
 8002288:	f043 0310 	orr.w	r3, r3, #16
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b72      	ldr	r3, [pc, #456]	; (8002458 <MX_GPIO_Init+0x1f0>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	4b6e      	ldr	r3, [pc, #440]	; (8002458 <MX_GPIO_Init+0x1f0>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a6d      	ldr	r2, [pc, #436]	; (8002458 <MX_GPIO_Init+0x1f0>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b6b      	ldr	r3, [pc, #428]	; (8002458 <MX_GPIO_Init+0x1f0>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <MX_GPIO_Init+0x1f0>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a66      	ldr	r2, [pc, #408]	; (8002458 <MX_GPIO_Init+0x1f0>)
 80022c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b64      	ldr	r3, [pc, #400]	; (8002458 <MX_GPIO_Init+0x1f0>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b60      	ldr	r3, [pc, #384]	; (8002458 <MX_GPIO_Init+0x1f0>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a5f      	ldr	r2, [pc, #380]	; (8002458 <MX_GPIO_Init+0x1f0>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b5d      	ldr	r3, [pc, #372]	; (8002458 <MX_GPIO_Init+0x1f0>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	4b59      	ldr	r3, [pc, #356]	; (8002458 <MX_GPIO_Init+0x1f0>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a58      	ldr	r2, [pc, #352]	; (8002458 <MX_GPIO_Init+0x1f0>)
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b56      	ldr	r3, [pc, #344]	; (8002458 <MX_GPIO_Init+0x1f0>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	4b52      	ldr	r3, [pc, #328]	; (8002458 <MX_GPIO_Init+0x1f0>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a51      	ldr	r2, [pc, #324]	; (8002458 <MX_GPIO_Init+0x1f0>)
 8002314:	f043 0308 	orr.w	r3, r3, #8
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b4f      	ldr	r3, [pc, #316]	; (8002458 <MX_GPIO_Init+0x1f0>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|TEST_PIN_Pin, GPIO_PIN_RESET);
 8002326:	2200      	movs	r2, #0
 8002328:	f640 0108 	movw	r1, #2056	; 0x808
 800232c:	484b      	ldr	r0, [pc, #300]	; (800245c <MX_GPIO_Init+0x1f4>)
 800232e:	f003 ffb3 	bl	8006298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002332:	2201      	movs	r2, #1
 8002334:	2101      	movs	r1, #1
 8002336:	484a      	ldr	r0, [pc, #296]	; (8002460 <MX_GPIO_Init+0x1f8>)
 8002338:	f003 ffae 	bl	8006298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800233c:	2200      	movs	r2, #0
 800233e:	2110      	movs	r1, #16
 8002340:	4848      	ldr	r0, [pc, #288]	; (8002464 <MX_GPIO_Init+0x1fc>)
 8002342:	f003 ffa9 	bl	8006298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin TEST_PIN_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|TEST_PIN_Pin;
 8002346:	f640 0308 	movw	r3, #2056	; 0x808
 800234a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234c:	2301      	movs	r3, #1
 800234e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002358:	f107 031c 	add.w	r3, r7, #28
 800235c:	4619      	mov	r1, r3
 800235e:	483f      	ldr	r0, [pc, #252]	; (800245c <MX_GPIO_Init+0x1f4>)
 8002360:	f003 fdfe 	bl	8005f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002364:	2301      	movs	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4619      	mov	r1, r3
 800237a:	4839      	ldr	r0, [pc, #228]	; (8002460 <MX_GPIO_Init+0x1f8>)
 800237c:	f003 fdf0 	bl	8005f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002380:	2304      	movs	r3, #4
 8002382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	4619      	mov	r1, r3
 8002392:	4835      	ldr	r0, [pc, #212]	; (8002468 <MX_GPIO_Init+0x200>)
 8002394:	f003 fde4 	bl	8005f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800239c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023aa:	2305      	movs	r3, #5
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80023ae:	f107 031c 	add.w	r3, r7, #28
 80023b2:	4619      	mov	r1, r3
 80023b4:	482c      	ldr	r0, [pc, #176]	; (8002468 <MX_GPIO_Init+0x200>)
 80023b6:	f003 fdd3 	bl	8005f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PHASE_MULT_Pin */
  GPIO_InitStruct.Pin = BUTTON_PHASE_MULT_Pin;
 80023ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c6:	2301      	movs	r3, #1
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_PHASE_MULT_GPIO_Port, &GPIO_InitStruct);
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	4619      	mov	r1, r3
 80023d0:	4824      	ldr	r0, [pc, #144]	; (8002464 <MX_GPIO_Init+0x1fc>)
 80023d2:	f003 fdc5 	bl	8005f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_OSC3_CYCLE_Pin BUTTON_OSC2_CYCLE_Pin BUTTON_OSC1_CYCLE_Pin BUTTON_OUT_WAVE_CYCLE_Pin */
  GPIO_InitStruct.Pin = BUTTON_OSC3_CYCLE_Pin|BUTTON_OSC2_CYCLE_Pin|BUTTON_OSC1_CYCLE_Pin|BUTTON_OUT_WAVE_CYCLE_Pin;
 80023d6:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80023da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023e2:	2301      	movs	r3, #1
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023e6:	f107 031c 	add.w	r3, r7, #28
 80023ea:	4619      	mov	r1, r3
 80023ec:	481d      	ldr	r0, [pc, #116]	; (8002464 <MX_GPIO_Init+0x1fc>)
 80023ee:	f003 fdb7 	bl	8005f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80023f2:	2310      	movs	r3, #16
 80023f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	2301      	movs	r3, #1
 80023f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8002402:	f107 031c 	add.w	r3, r7, #28
 8002406:	4619      	mov	r1, r3
 8002408:	4816      	ldr	r0, [pc, #88]	; (8002464 <MX_GPIO_Init+0x1fc>)
 800240a:	f003 fda9 	bl	8005f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800240e:	2320      	movs	r3, #32
 8002410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800241a:	f107 031c 	add.w	r3, r7, #28
 800241e:	4619      	mov	r1, r3
 8002420:	4810      	ldr	r0, [pc, #64]	; (8002464 <MX_GPIO_Init+0x1fc>)
 8002422:	f003 fd9d 	bl	8005f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002426:	2302      	movs	r3, #2
 8002428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800242a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800242e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4619      	mov	r1, r3
 800243a:	4808      	ldr	r0, [pc, #32]	; (800245c <MX_GPIO_Init+0x1f4>)
 800243c:	f003 fd90 	bl	8005f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	2028      	movs	r0, #40	; 0x28
 8002446:	f003 f9e4 	bl	8005812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800244a:	2028      	movs	r0, #40	; 0x28
 800244c:	f003 f9fd 	bl	800584a <HAL_NVIC_EnableIRQ>

}
 8002450:	bf00      	nop
 8002452:	3730      	adds	r7, #48	; 0x30
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	40021000 	.word	0x40021000
 8002460:	40020800 	.word	0x40020800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	40020400 	.word	0x40020400

0800246c <HAL_I2S_TxHalfCpltCallback>:
//void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
//	if (htim == &htim3)
//		HAL_GPIO_TogglePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin);
//}

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef* hi2s) {
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	if (hi2s == &hi2s3) {
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a06      	ldr	r2, [pc, #24]	; (8002490 <HAL_I2S_TxHalfCpltCallback+0x24>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d102      	bne.n	8002482 <HAL_I2S_TxHalfCpltCallback+0x16>
		i2s_tx_half = true;
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_I2S_TxHalfCpltCallback+0x28>)
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
	}
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000908 	.word	0x20000908
 8002494:	20003451 	.word	0x20003451

08002498 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef* hi2s) {
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	if (hi2s == &hi2s3) {
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a06      	ldr	r2, [pc, #24]	; (80024bc <HAL_I2S_TxCpltCallback+0x24>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d102      	bne.n	80024ae <HAL_I2S_TxCpltCallback+0x16>
		i2s_tx_cplt = true;
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_I2S_TxCpltCallback+0x28>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
	}
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000908 	.word	0x20000908
 80024c0:	20003450 	.word	0x20003450

080024c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c8:	b672      	cpsid	i
}
 80024ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80024cc:	e7fe      	b.n	80024cc <Error_Handler+0x8>
	...

080024d0 <mixer_init>:
static const uint16_t ADC_HYSTERESIS_MAX_LIM = 20;

uint16_t adc_hysteresis(uint16_t next, uint16_t prev, uint16_t lim);


void mixer_init(ADC_HandleTypeDef* adc_handle, TIM_HandleTypeDef* htim) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
	adc_ptr = adc_handle;
 80024da:	4a12      	ldr	r2, [pc, #72]	; (8002524 <mixer_init+0x54>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6013      	str	r3, [r2, #0]

	if (adc_ptr) {
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <mixer_init+0x54>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d019      	beq.n	800251c <mixer_init+0x4c>
		HAL_StatusTypeDef tim_init = HAL_TIM_Base_Start_IT(htim);
 80024e8:	6838      	ldr	r0, [r7, #0]
 80024ea:	f007 fe73 	bl	800a1d4 <HAL_TIM_Base_Start_IT>
 80024ee:	4603      	mov	r3, r0
 80024f0:	73fb      	strb	r3, [r7, #15]
		HAL_StatusTypeDef adc_init = HAL_ADC_Start_DMA(adc_ptr, (uint32_t*)mixer_DMA, MIXER_ADC1_CHANNELS);
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <mixer_init+0x54>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	220e      	movs	r2, #14
 80024f8:	490b      	ldr	r1, [pc, #44]	; (8002528 <mixer_init+0x58>)
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 fce0 	bl	8004ec0 <HAL_ADC_Start_DMA>
 8002500:	4603      	mov	r3, r0
 8002502:	73bb      	strb	r3, [r7, #14]

		waveshape_out = SINE;
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <mixer_init+0x5c>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
		mixer_adc_update_flag = false;
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <mixer_init+0x60>)
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
		mixer_btn_pressed_flag = false;
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <mixer_init+0x64>)
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
		mixer_filter_en = false;
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <mixer_init+0x68>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
	}
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	200039d8 	.word	0x200039d8
 8002528:	20003964 	.word	0x20003964
 800252c:	200039dc 	.word	0x200039dc
 8002530:	200039dd 	.word	0x200039dd
 8002534:	200039de 	.word	0x200039de
 8002538:	200039df 	.word	0x200039df

0800253c <adc_hysteresis>:

uint16_t adc_hysteresis(uint16_t next, uint16_t prev, uint16_t lim) {
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	80fb      	strh	r3, [r7, #6]
 8002546:	460b      	mov	r3, r1
 8002548:	80bb      	strh	r3, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	807b      	strh	r3, [r7, #2]
	int a = abs(next - prev);
 800254e:	88fa      	ldrh	r2, [r7, #6]
 8002550:	88bb      	ldrh	r3, [r7, #4]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	bfb8      	it	lt
 8002558:	425b      	neglt	r3, r3
 800255a:	60fb      	str	r3, [r7, #12]

	if (lim < a) {
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	dd01      	ble.n	8002568 <adc_hysteresis+0x2c>
		return next;
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	e000      	b.n	800256a <adc_hysteresis+0x2e>
	} else {
		return prev;
 8002568:	88bb      	ldrh	r3, [r7, #4]
	}
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <mixer_update>:

void mixer_update() {
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
	if (mixer_adc_update_flag) {
 800257e:	4b35      	ldr	r3, [pc, #212]	; (8002654 <mixer_update+0xdc>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d04a      	beq.n	800261c <mixer_update+0xa4>
		mixer_adc_update_flag = false;
 8002586:	4b33      	ldr	r3, [pc, #204]	; (8002654 <mixer_update+0xdc>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
		avg_cnt++;
 800258c:	4b32      	ldr	r3, [pc, #200]	; (8002658 <mixer_update+0xe0>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b30      	ldr	r3, [pc, #192]	; (8002658 <mixer_update+0xe0>)
 8002596:	701a      	strb	r2, [r3, #0]
		if (avg_cnt <= adc_avg_n) {
 8002598:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <mixer_update+0xe0>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2210      	movs	r2, #16
 800259e:	4293      	cmp	r3, r2
 80025a0:	d821      	bhi.n	80025e6 <mixer_update+0x6e>
			for (uint16_t i = 0; i < MIXER_ADC1_CHANNELS; i++) {
 80025a2:	2300      	movs	r3, #0
 80025a4:	80fb      	strh	r3, [r7, #6]
 80025a6:	e01a      	b.n	80025de <mixer_update+0x66>
				mixer_avg[i]+= adc_hysteresis(mixer_DMA[i], mixer_tmp[i], ADC_HYSTERESIS_MAX_LIM);
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	4a2c      	ldr	r2, [pc, #176]	; (800265c <mixer_update+0xe4>)
 80025ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b0:	b298      	uxth	r0, r3
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	4a2a      	ldr	r2, [pc, #168]	; (8002660 <mixer_update+0xe8>)
 80025b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025ba:	2214      	movs	r2, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	f7ff ffbd 	bl	800253c <adc_hysteresis>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4619      	mov	r1, r3
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	4a26      	ldr	r2, [pc, #152]	; (8002664 <mixer_update+0xec>)
 80025ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	440a      	add	r2, r1
 80025d2:	4924      	ldr	r1, [pc, #144]	; (8002664 <mixer_update+0xec>)
 80025d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (uint16_t i = 0; i < MIXER_ADC1_CHANNELS; i++) {
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	3301      	adds	r3, #1
 80025dc:	80fb      	strh	r3, [r7, #6]
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	2b0d      	cmp	r3, #13
 80025e2:	d9e1      	bls.n	80025a8 <mixer_update+0x30>
 80025e4:	e01a      	b.n	800261c <mixer_update+0xa4>
			}
		} else {
			for (uint16_t i = 0; i < MIXER_ADC1_CHANNELS; i++) {
 80025e6:	2300      	movs	r3, #0
 80025e8:	80bb      	strh	r3, [r7, #4]
 80025ea:	e011      	b.n	8002610 <mixer_update+0x98>
				mixer_tmp[i] = mixer_avg[i] >> 4; //divide by 16, lowers resolution but reduces noise input
 80025ec:	88bb      	ldrh	r3, [r7, #4]
 80025ee:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <mixer_update+0xec>)
 80025f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f4:	091a      	lsrs	r2, r3, #4
 80025f6:	88bb      	ldrh	r3, [r7, #4]
 80025f8:	b291      	uxth	r1, r2
 80025fa:	4a19      	ldr	r2, [pc, #100]	; (8002660 <mixer_update+0xe8>)
 80025fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				mixer_avg[i] = 0;
 8002600:	88bb      	ldrh	r3, [r7, #4]
 8002602:	4a18      	ldr	r2, [pc, #96]	; (8002664 <mixer_update+0xec>)
 8002604:	2100      	movs	r1, #0
 8002606:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint16_t i = 0; i < MIXER_ADC1_CHANNELS; i++) {
 800260a:	88bb      	ldrh	r3, [r7, #4]
 800260c:	3301      	adds	r3, #1
 800260e:	80bb      	strh	r3, [r7, #4]
 8002610:	88bb      	ldrh	r3, [r7, #4]
 8002612:	2b0d      	cmp	r3, #13
 8002614:	d9ea      	bls.n	80025ec <mixer_update+0x74>
			}
			avg_cnt = 0;
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <mixer_update+0xe0>)
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (!btn_rdy) {
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <mixer_update+0xf0>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	f083 0301 	eor.w	r3, r3, #1
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d010      	beq.n	800264c <mixer_update+0xd4>
		debounce_cnt++;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <mixer_update+0xf4>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	3301      	adds	r3, #1
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <mixer_update+0xf4>)
 8002634:	701a      	strb	r2, [r3, #0]
		if (debounce_cnt >= debounce_limit) {
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <mixer_update+0xf4>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	22ff      	movs	r2, #255	; 0xff
 800263c:	4293      	cmp	r3, r2
 800263e:	d305      	bcc.n	800264c <mixer_update+0xd4>
			btn_rdy = true;
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <mixer_update+0xf0>)
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
			debounce_cnt = 0;
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <mixer_update+0xf4>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	200039dd 	.word	0x200039dd
 8002658:	2000399c 	.word	0x2000399c
 800265c:	20003964 	.word	0x20003964
 8002660:	20003980 	.word	0x20003980
 8002664:	200039a0 	.word	0x200039a0
 8002668:	20000002 	.word	0x20000002
 800266c:	20000003 	.word	0x20000003

08002670 <mixer_get_updated>:

bool mixer_get_updated() {
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
	return mixer_adc_update_flag;
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <mixer_get_updated+0x14>)
 8002676:	781b      	ldrb	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	200039dd 	.word	0x200039dd

08002688 <mixer_get_filter_fc_low>:


uint16_t mixer_get_filter_fc_low() {
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
	if (mixer_DMA[FILTER_LOW_CHANNEL] >= MIXER_SOFT_CAP) {
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <mixer_get_filter_fc_low+0x28>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	2bf9      	cmp	r3, #249	; 0xf9
 8002694:	d905      	bls.n	80026a2 <mixer_get_filter_fc_low+0x1a>
		return mixer_DMA[FILTER_LOW_CHANNEL] - MIXER_SOFT_CAP;
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <mixer_get_filter_fc_low+0x28>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	3bfa      	subs	r3, #250	; 0xfa
 800269e:	b29b      	uxth	r3, r3
 80026a0:	e000      	b.n	80026a4 <mixer_get_filter_fc_low+0x1c>
	}
	else {
		return 0;
 80026a2:	2300      	movs	r3, #0
	}
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20003964 	.word	0x20003964

080026b4 <mixer_get_filter_fc_high>:


uint16_t mixer_get_filter_fc_high() {
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
	if (mixer_tmp[FILTER_HIGH_CHANNEL] >= MIXER_SOFT_CAP) {
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <mixer_get_filter_fc_high+0x24>)
 80026ba:	885b      	ldrh	r3, [r3, #2]
 80026bc:	2bf9      	cmp	r3, #249	; 0xf9
 80026be:	d904      	bls.n	80026ca <mixer_get_filter_fc_high+0x16>
		return mixer_tmp[FILTER_HIGH_CHANNEL] - MIXER_SOFT_CAP;
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <mixer_get_filter_fc_high+0x24>)
 80026c2:	885b      	ldrh	r3, [r3, #2]
 80026c4:	3bfa      	subs	r3, #250	; 0xfa
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	e000      	b.n	80026cc <mixer_get_filter_fc_high+0x18>
	}
	else {
		return 0;
 80026ca:	2300      	movs	r3, #0
	}
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20003980 	.word	0x20003980

080026dc <mixer_get_volume>:

uint16_t mixer_get_volume() {
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
	return mixer_tmp[VOLUME_CHANNEL];
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <mixer_get_volume+0x14>)
 80026e2:	889b      	ldrh	r3, [r3, #4]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20003980 	.word	0x20003980

080026f4 <mixer_get_attack>:

uint16_t mixer_get_attack() {
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
	return mixer_tmp[ATTACK_CHANNEL];
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <mixer_get_attack+0x14>)
 80026fa:	891b      	ldrh	r3, [r3, #8]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20003980 	.word	0x20003980

0800270c <mixer_get_decay>:

uint16_t mixer_get_decay() {
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
	return mixer_tmp[DECAY_CHANNEL];
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <mixer_get_decay+0x14>)
 8002712:	895b      	ldrh	r3, [r3, #10]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20003980 	.word	0x20003980

08002724 <mixer_get_sustain>:

uint16_t mixer_get_sustain() {
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
	return mixer_tmp[SUSTAIN_CHANNEL];
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <mixer_get_sustain+0x14>)
 800272a:	899b      	ldrh	r3, [r3, #12]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20003980 	.word	0x20003980

0800273c <mixer_get_release>:

uint16_t mixer_get_release() {
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
	return mixer_tmp[RELEASE_CHANNEL];
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <mixer_get_release+0x14>)
 8002742:	89db      	ldrh	r3, [r3, #14]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20003980 	.word	0x20003980

08002754 <mixer_get_PWM>:

uint16_t mixer_get_PWM() {
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
	if (mixer_tmp[PWM_CHANNEL] >= MIXER_SOFT_CAP)
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <mixer_get_PWM+0x24>)
 800275a:	8a5b      	ldrh	r3, [r3, #18]
 800275c:	2bf9      	cmp	r3, #249	; 0xf9
 800275e:	d904      	bls.n	800276a <mixer_get_PWM+0x16>
		return mixer_tmp[PWM_CHANNEL] - MIXER_SOFT_CAP;
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <mixer_get_PWM+0x24>)
 8002762:	8a5b      	ldrh	r3, [r3, #18]
 8002764:	3bfa      	subs	r3, #250	; 0xfa
 8002766:	b29b      	uxth	r3, r3
 8002768:	e000      	b.n	800276c <mixer_get_PWM+0x18>
	else
		return 0;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20003980 	.word	0x20003980

0800277c <mixer_get_df>:

uint16_t mixer_get_df() {
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
	if (mixer_tmp[OSC_DF_CHANNEL] >= MIXER_SOFT_CAP) {
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <mixer_get_df+0x24>)
 8002782:	8a1b      	ldrh	r3, [r3, #16]
 8002784:	2bf9      	cmp	r3, #249	; 0xf9
 8002786:	d904      	bls.n	8002792 <mixer_get_df+0x16>
		return mixer_tmp[OSC_DF_CHANNEL] - MIXER_SOFT_CAP;
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <mixer_get_df+0x24>)
 800278a:	8a1b      	ldrh	r3, [r3, #16]
 800278c:	3bfa      	subs	r3, #250	; 0xfa
 800278e:	b29b      	uxth	r3, r3
 8002790:	e000      	b.n	8002794 <mixer_get_df+0x18>
	} else {
		return 0;
 8002792:	2300      	movs	r3, #0
	}
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20003980 	.word	0x20003980

080027a4 <mixer_get_OSC1_FM>:

uint16_t mixer_get_OSC1_FM() {
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
	if (mixer_tmp[OSC1_FM_CHANNEL] >= MIXER_SOFT_CAP) {
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <mixer_get_OSC1_FM+0x24>)
 80027aa:	8a9b      	ldrh	r3, [r3, #20]
 80027ac:	2bf9      	cmp	r3, #249	; 0xf9
 80027ae:	d904      	bls.n	80027ba <mixer_get_OSC1_FM+0x16>
		return mixer_tmp[OSC1_FM_CHANNEL] - MIXER_SOFT_CAP;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <mixer_get_OSC1_FM+0x24>)
 80027b2:	8a9b      	ldrh	r3, [r3, #20]
 80027b4:	3bfa      	subs	r3, #250	; 0xfa
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	e000      	b.n	80027bc <mixer_get_OSC1_FM+0x18>
	} else {
		return 0;
 80027ba:	2300      	movs	r3, #0
	}
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20003980 	.word	0x20003980

080027cc <mixer_get_OSC2_FM>:

uint16_t mixer_get_OSC2_FM() {
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
	if (mixer_tmp[OSC2_FM_CHANNEL] >= MIXER_SOFT_CAP)
 80027d0:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <mixer_get_OSC2_FM+0x24>)
 80027d2:	88db      	ldrh	r3, [r3, #6]
 80027d4:	2bf9      	cmp	r3, #249	; 0xf9
 80027d6:	d904      	bls.n	80027e2 <mixer_get_OSC2_FM+0x16>
		return mixer_tmp[OSC2_FM_CHANNEL] - MIXER_SOFT_CAP;
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <mixer_get_OSC2_FM+0x24>)
 80027da:	88db      	ldrh	r3, [r3, #6]
 80027dc:	3bfa      	subs	r3, #250	; 0xfa
 80027de:	b29b      	uxth	r3, r3
 80027e0:	e000      	b.n	80027e4 <mixer_get_OSC2_FM+0x18>
	else
		return 0;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20003980 	.word	0x20003980

080027f4 <mixer_get_pm_beta>:

uint16_t mixer_get_pm_beta() {
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
	if (mixer_tmp[PM1_BETA_CHANNEL] >= MIXER_SOFT_CAP)
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <mixer_get_pm_beta+0x24>)
 80027fa:	8adb      	ldrh	r3, [r3, #22]
 80027fc:	2bf9      	cmp	r3, #249	; 0xf9
 80027fe:	d904      	bls.n	800280a <mixer_get_pm_beta+0x16>
		return mixer_tmp[PM1_BETA_CHANNEL] - MIXER_SOFT_CAP;
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <mixer_get_pm_beta+0x24>)
 8002802:	8adb      	ldrh	r3, [r3, #22]
 8002804:	3bfa      	subs	r3, #250	; 0xfa
 8002806:	b29b      	uxth	r3, r3
 8002808:	e000      	b.n	800280c <mixer_get_pm_beta+0x18>
	else
		return 0;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20003980 	.word	0x20003980

0800281c <mixer_get_pm_beta2>:


uint16_t mixer_get_pm_beta2() {
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
	if (mixer_tmp[PM2_BETA_CHANNEL] >= MIXER_SOFT_CAP)
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <mixer_get_pm_beta2+0x24>)
 8002822:	8b1b      	ldrh	r3, [r3, #24]
 8002824:	2bf9      	cmp	r3, #249	; 0xf9
 8002826:	d904      	bls.n	8002832 <mixer_get_pm_beta2+0x16>
		return mixer_tmp[PM2_BETA_CHANNEL] - MIXER_SOFT_CAP;
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <mixer_get_pm_beta2+0x24>)
 800282a:	8b1b      	ldrh	r3, [r3, #24]
 800282c:	3bfa      	subs	r3, #250	; 0xfa
 800282e:	b29b      	uxth	r3, r3
 8002830:	e000      	b.n	8002834 <mixer_get_pm_beta2+0x18>
	else
		return 0;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20003980 	.word	0x20003980

08002844 <mixer_get_pmf>:

uint16_t mixer_get_pmf() {
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
	if (mixer_tmp[PMF_CHANNEL] >= MIXER_SOFT_CAP)
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <mixer_get_pmf+0x24>)
 800284a:	8b5b      	ldrh	r3, [r3, #26]
 800284c:	2bf9      	cmp	r3, #249	; 0xf9
 800284e:	d904      	bls.n	800285a <mixer_get_pmf+0x16>
		return mixer_tmp[PMF_CHANNEL] - 100;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <mixer_get_pmf+0x24>)
 8002852:	8b5b      	ldrh	r3, [r3, #26]
 8002854:	3b64      	subs	r3, #100	; 0x64
 8002856:	b29b      	uxth	r3, r3
 8002858:	e000      	b.n	800285c <mixer_get_pmf+0x18>
	else
		return 0;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20003980 	.word	0x20003980

0800286c <mixer_get_OSC_ws>:

ws_enum mixer_get_OSC_ws(uint8_t n) {
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
	switch(n) {
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	2b03      	cmp	r3, #3
 800287a:	d00c      	beq.n	8002896 <mixer_get_OSC_ws+0x2a>
 800287c:	2b03      	cmp	r3, #3
 800287e:	dc0d      	bgt.n	800289c <mixer_get_OSC_ws+0x30>
 8002880:	2b01      	cmp	r3, #1
 8002882:	d002      	beq.n	800288a <mixer_get_OSC_ws+0x1e>
 8002884:	2b02      	cmp	r3, #2
 8002886:	d003      	beq.n	8002890 <mixer_get_OSC_ws+0x24>
		return mixer_OSC2_ws;
	case 3:
		return mixer_OSC3_ws;

	default:
		return;
 8002888:	e008      	b.n	800289c <mixer_get_OSC_ws+0x30>
		return mixer_OSC1_ws;
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <mixer_get_OSC_ws+0x3c>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	e005      	b.n	800289c <mixer_get_OSC_ws+0x30>
		return mixer_OSC2_ws;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <mixer_get_OSC_ws+0x40>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	e002      	b.n	800289c <mixer_get_OSC_ws+0x30>
		return mixer_OSC3_ws;
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <mixer_get_OSC_ws+0x44>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	e7ff      	b.n	800289c <mixer_get_OSC_ws+0x30>
	}
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	200039e0 	.word	0x200039e0
 80028ac:	200039e1 	.word	0x200039e1
 80028b0:	200039e2 	.word	0x200039e2

080028b4 <mixer_get_waveshape_out>:

ws_enum mixer_get_waveshape_out() {
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
	return waveshape_out;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <mixer_get_waveshape_out+0x14>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	200039dc 	.word	0x200039dc

080028cc <mixer_cycle_wave>:

bool mixer_is_LFO_en() {
	return mixer_OSC1_en;
}

void mixer_cycle_wave(ws_enum* w_shape_ptr) {
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	switch (*w_shape_ptr) {
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d81b      	bhi.n	8002914 <mixer_cycle_wave+0x48>
 80028dc:	a201      	add	r2, pc, #4	; (adr r2, 80028e4 <mixer_cycle_wave+0x18>)
 80028de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e2:	bf00      	nop
 80028e4:	080028f5 	.word	0x080028f5
 80028e8:	080028fd 	.word	0x080028fd
 80028ec:	08002905 	.word	0x08002905
 80028f0:	0800290d 	.word	0x0800290d
	case SINE:
		*w_shape_ptr = SQUARE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
		break;
 80028fa:	e00f      	b.n	800291c <mixer_cycle_wave+0x50>
	case SQUARE:
		*w_shape_ptr = TRIANGLE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	701a      	strb	r2, [r3, #0]
		break;
 8002902:	e00b      	b.n	800291c <mixer_cycle_wave+0x50>
	case TRIANGLE:
		*w_shape_ptr = SAWTOOTH;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2203      	movs	r2, #3
 8002908:	701a      	strb	r2, [r3, #0]
		break;
 800290a:	e007      	b.n	800291c <mixer_cycle_wave+0x50>
	case SAWTOOTH:
		*w_shape_ptr = BOWSAW;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2204      	movs	r2, #4
 8002910:	701a      	strb	r2, [r3, #0]
		break;
 8002912:	e003      	b.n	800291c <mixer_cycle_wave+0x50>
	default:
		*w_shape_ptr = SINE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
		break;
 800291a:	bf00      	nop
	}
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <mixer_get_sync>:

float mixer_get_PM_mult() {
	return MIXER_PM_MULTS[pm_mult_idx];
}

bool mixer_get_sync() {
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
	return mixer_sync;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <mixer_get_sync+0x14>)
 800292e:	781b      	ldrb	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	200039e3 	.word	0x200039e3

08002940 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	if (hadc == adc_ptr) {
	}
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	if (hadc == adc_ptr) {
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_ADC_ConvCpltCallback+0x24>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	429a      	cmp	r2, r3
 8002964:	d102      	bne.n	800296c <HAL_ADC_ConvCpltCallback+0x18>
		mixer_adc_update_flag = true;
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_ADC_ConvCpltCallback+0x28>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
	}
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	200039d8 	.word	0x200039d8
 800297c:	200039dd 	.word	0x200039dd

08002980 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
	if (btn_rdy) {
 800298a:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x98>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d03b      	beq.n	8002a0a <HAL_GPIO_EXTI_Callback+0x8a>
		btn_rdy = false;
 8002992:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x98>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
		switch(GPIO_Pin) {
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800299e:	d015      	beq.n	80029cc <HAL_GPIO_EXTI_Callback+0x4c>
 80029a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a4:	dc33      	bgt.n	8002a0e <HAL_GPIO_EXTI_Callback+0x8e>
 80029a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029aa:	d013      	beq.n	80029d4 <HAL_GPIO_EXTI_Callback+0x54>
 80029ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b0:	dc2d      	bgt.n	8002a0e <HAL_GPIO_EXTI_Callback+0x8e>
 80029b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b6:	d010      	beq.n	80029da <HAL_GPIO_EXTI_Callback+0x5a>
 80029b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029bc:	dc27      	bgt.n	8002a0e <HAL_GPIO_EXTI_Callback+0x8e>
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c2:	d012      	beq.n	80029ea <HAL_GPIO_EXTI_Callback+0x6a>
 80029c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c8:	d00b      	beq.n	80029e2 <HAL_GPIO_EXTI_Callback+0x62>
			mixer_sync = !mixer_sync;
			break;


		default:
			break;
 80029ca:	e020      	b.n	8002a0e <HAL_GPIO_EXTI_Callback+0x8e>
			mixer_cycle_wave(&waveshape_out);
 80029cc:	4813      	ldr	r0, [pc, #76]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x9c>)
 80029ce:	f7ff ff7d 	bl	80028cc <mixer_cycle_wave>
			break;
 80029d2:	e01d      	b.n	8002a10 <HAL_GPIO_EXTI_Callback+0x90>
			mixer_cycle_wave(&mixer_OSC1_ws);
 80029d4:	4812      	ldr	r0, [pc, #72]	; (8002a20 <HAL_GPIO_EXTI_Callback+0xa0>)
 80029d6:	f7ff ff79 	bl	80028cc <mixer_cycle_wave>
			mixer_cycle_wave(&mixer_OSC2_ws);
 80029da:	4812      	ldr	r0, [pc, #72]	; (8002a24 <HAL_GPIO_EXTI_Callback+0xa4>)
 80029dc:	f7ff ff76 	bl	80028cc <mixer_cycle_wave>
			break;
 80029e0:	e016      	b.n	8002a10 <HAL_GPIO_EXTI_Callback+0x90>
			mixer_cycle_wave(&mixer_OSC3_ws);
 80029e2:	4811      	ldr	r0, [pc, #68]	; (8002a28 <HAL_GPIO_EXTI_Callback+0xa8>)
 80029e4:	f7ff ff72 	bl	80028cc <mixer_cycle_wave>
			break;
 80029e8:	e012      	b.n	8002a10 <HAL_GPIO_EXTI_Callback+0x90>
			mixer_sync = !mixer_sync;
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_GPIO_EXTI_Callback+0xac>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f083 0301 	eor.w	r3, r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_GPIO_EXTI_Callback+0xac>)
 8002a06:	701a      	strb	r2, [r3, #0]
			break;
 8002a08:	e002      	b.n	8002a10 <HAL_GPIO_EXTI_Callback+0x90>
		}
	}
 8002a0a:	bf00      	nop
 8002a0c:	e000      	b.n	8002a10 <HAL_GPIO_EXTI_Callback+0x90>
			break;
 8002a0e:	bf00      	nop
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000002 	.word	0x20000002
 8002a1c:	200039dc 	.word	0x200039dc
 8002a20:	200039e0 	.word	0x200039e0
 8002a24:	200039e1 	.word	0x200039e1
 8002a28:	200039e2 	.word	0x200039e2
 8002a2c:	200039e3 	.word	0x200039e3

08002a30 <nf_map_init_440>:
 *      Author: sfs
 */

#include "note_frequency.h"

void nf_map_init_440(note_t* nf_lookup_table_440hz) {
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b08d      	sub	sp, #52	; 0x34
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	note_t note;
    const double p = (double)1/12;
 8002a38:	a32e      	add	r3, pc, #184	; (adr r3, 8002af4 <nf_map_init_440+0xc4>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	const double F_STEP = pow(2, p);
 8002a42:	ed97 1b08 	vldr	d1, [r7, #32]
 8002a46:	ed9f 0b28 	vldr	d0, [pc, #160]	; 8002ae8 <nf_map_init_440+0xb8>
 8002a4a:	f00b faa1 	bl	800df90 <pow>
 8002a4e:	ed87 0b06 	vstr	d0, [r7, #24]
	float current_f = NOTE_C0_440HZ;
 8002a52:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <nf_map_init_440+0xc0>)
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (uint16_t oct = 0; oct < N_OCTAVES; oct++) {
 8002a56:	2300      	movs	r3, #0
 8002a58:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002a5a:	e03a      	b.n	8002ad2 <nf_map_init_440+0xa2>
		for (uint16_t st = 0; st < N_SEMITONES; st++) {
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002a60:	e031      	b.n	8002ac6 <nf_map_init_440+0x96>
			semitone_t semitone = st;
 8002a62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a64:	75fb      	strb	r3, [r7, #23]
			note.note = semitone;
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	723b      	strb	r3, [r7, #8]
			note.octave = oct;
 8002a6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	727b      	strb	r3, [r7, #9]
            note.f = current_f;
 8002a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a72:	60fb      	str	r3, [r7, #12]

            current_f = current_f * F_STEP;
 8002a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a76:	f7fd fd0b 	bl	8000490 <__aeabi_f2d>
 8002a7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a7e:	f7fd fd5f 	bl	8000540 <__aeabi_dmul>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f7fe f831 	bl	8000af0 <__aeabi_d2f>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c

			nf_lookup_table_440hz[oct*N_SEMITONES + st] = note;
 8002a92:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002aa0:	4413      	add	r3, r2
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	461a      	mov	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	461c      	mov	r4, r3
 8002ab4:	f107 0308 	add.w	r3, r7, #8
 8002ab8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002abc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		for (uint16_t st = 0; st < N_SEMITONES; st++) {
 8002ac0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	853b      	strh	r3, [r7, #40]	; 0x28
 8002ac6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ac8:	2b0b      	cmp	r3, #11
 8002aca:	d9ca      	bls.n	8002a62 <nf_map_init_440+0x32>
	for (uint16_t oct = 0; oct < N_OCTAVES; oct++) {
 8002acc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ace:	3301      	adds	r3, #1
 8002ad0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002ad2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d9c1      	bls.n	8002a5c <nf_map_init_440+0x2c>
		}
	}
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3734      	adds	r7, #52	; 0x34
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd90      	pop	{r4, r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	40000000 	.word	0x40000000
 8002af0:	4182d0e5 	.word	0x4182d0e5
 8002af4:	55555555 	.word	0x55555555
 8002af8:	3fb55555 	.word	0x3fb55555

08002afc <output_handler_init>:
static float steps[MAX_VOICES];

uint32_t apply_effects(uint32_t sample);
uint32_t apply_filters(uint32_t sample);

void output_handler_init(uint8_t MIDI_in_voices) {
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
	if (MIDI_in_voices <= MAX_VOICES) {
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d802      	bhi.n	8002b12 <output_handler_init+0x16>
		poly_inputs = MIDI_in_voices;
 8002b0c:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <output_handler_init+0x60>)
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	7013      	strb	r3, [r2, #0]
	}

	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
 8002b16:	e019      	b.n	8002b4c <output_handler_init+0x50>
		squares[i] = sqrt(i + 1);
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fca5 	bl	800046c <__aeabi_i2d>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	ec43 2b10 	vmov	d0, r2, r3
 8002b2a:	f00b faa1 	bl	800e070 <sqrt>
 8002b2e:	ec53 2b10 	vmov	r2, r3, d0
 8002b32:	7bfc      	ldrb	r4, [r7, #15]
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	f7fd ffda 	bl	8000af0 <__aeabi_d2f>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4908      	ldr	r1, [pc, #32]	; (8002b60 <output_handler_init+0x64>)
 8002b40:	00a3      	lsls	r3, r4, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_VOICES; i++) {
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b0f      	cmp	r3, #15
 8002b50:	d9e2      	bls.n	8002b18 <output_handler_init+0x1c>
	}
}
 8002b52:	bf00      	nop
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd90      	pop	{r4, r7, pc}
 8002b5c:	200039e4 	.word	0x200039e4
 8002b60:	200039e8 	.word	0x200039e8
 8002b64:	00000000 	.word	0x00000000

08002b68 <output_handler_outwave_update>:

void output_handler_outwave_update(uint16_t* out, uint16_t out_start, uint16_t out_stop, uint16_t* wavetable) {
 8002b68:	b5b0      	push	{r4, r5, r7, lr}
 8002b6a:	ed2d 8b02 	vpush	{d8}
 8002b6e:	b0a0      	sub	sp, #128	; 0x80
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	817b      	strh	r3, [r7, #10]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	813b      	strh	r3, [r7, #8]
#define REF_CENTER 2048
	static uint32_t out_val;

	static float global_tracker;

	float c0_baseline = 16.352;
 8002b7e:	4bca      	ldr	r3, [pc, #808]	; (8002ea8 <output_handler_outwave_update+0x340>)
 8002b80:	65fb      	str	r3, [r7, #92]	; 0x5c
	float fs = 22000;
 8002b82:	4bca      	ldr	r3, [pc, #808]	; (8002eac <output_handler_outwave_update+0x344>)
 8002b84:	65bb      	str	r3, [r7, #88]	; 0x58


	float df = (float)mixer_get_df()/(c0_baseline * 1000);
 8002b86:	f7ff fdf9 	bl	800277c <mixer_get_df>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b94:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002b98:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8002eb0 <output_handler_outwave_update+0x348>
 8002b9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ba4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	float fm = (float)mixer_get_OSC1_FM()/(20000);
 8002ba8:	f7ff fdfc 	bl	80027a4 <mixer_get_OSC1_FM>
 8002bac:	4603      	mov	r3, r0
 8002bae:	ee07 3a90 	vmov	s15, r3
 8002bb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bb6:	eddf 6abf 	vldr	s13, [pc, #764]	; 8002eb4 <output_handler_outwave_update+0x34c>
 8002bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bbe:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	float fm2 = (float)mixer_get_OSC2_FM()/1000;
 8002bc2:	f7ff fe03 	bl	80027cc <mixer_get_OSC2_FM>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bd0:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8002eb0 <output_handler_outwave_update+0x348>
 8002bd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bd8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	float beta = (float)mixer_get_pm_beta()/4095; //0-1
 8002bdc:	f7ff fe0a 	bl	80027f4 <mixer_get_pm_beta>
 8002be0:	4603      	mov	r3, r0
 8002be2:	ee07 3a90 	vmov	s15, r3
 8002be6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bea:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8002eb8 <output_handler_outwave_update+0x350>
 8002bee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bf2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	float beta2 = (float)mixer_get_pm_beta2()/409.5; //0-10
 8002bf6:	f7ff fe11 	bl	800281c <mixer_get_pm_beta2>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c04:	ee17 0a90 	vmov	r0, s15
 8002c08:	f7fd fc42 	bl	8000490 <__aeabi_f2d>
 8002c0c:	a39e      	add	r3, pc, #632	; (adr r3, 8002e88 <output_handler_outwave_update+0x320>)
 8002c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c12:	f7fd fdbf 	bl	8000794 <__aeabi_ddiv>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f7fd ff67 	bl	8000af0 <__aeabi_d2f>
 8002c22:	4603      	mov	r3, r0
 8002c24:	647b      	str	r3, [r7, #68]	; 0x44

	float ipmf  = (float)mixer_get_pmf()/0xFFF;
 8002c26:	f7ff fe0d 	bl	8002844 <mixer_get_pmf>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	ee07 3a90 	vmov	s15, r3
 8002c30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c34:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8002eb8 <output_handler_outwave_update+0x350>
 8002c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c3c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
//	pmf = roundf(pmf * 10)/10;

#define octave_ratio 0.0833
	float pmf_scaler = roundf(ipmf/octave_ratio);
 8002c40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002c42:	f7fd fc25 	bl	8000490 <__aeabi_f2d>
 8002c46:	a392      	add	r3, pc, #584	; (adr r3, 8002e90 <output_handler_outwave_update+0x328>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f7fd fda2 	bl	8000794 <__aeabi_ddiv>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	f7fd ff4a 	bl	8000af0 <__aeabi_d2f>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	ee00 3a10 	vmov	s0, r3
 8002c62:	f00b f971 	bl	800df48 <roundf>
 8002c66:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

	float pmf = powf(1.059, pmf_scaler) + octave_ratio;
 8002c6a:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8002c6e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8002ebc <output_handler_outwave_update+0x354>
 8002c72:	f00b fa29 	bl	800e0c8 <powf>
 8002c76:	ee10 3a10 	vmov	r3, s0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fc08 	bl	8000490 <__aeabi_f2d>
 8002c80:	a383      	add	r3, pc, #524	; (adr r3, 8002e90 <output_handler_outwave_update+0x328>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f7fd faa5 	bl	80001d4 <__adddf3>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	f7fd ff2d 	bl	8000af0 <__aeabi_d2f>
 8002c96:	4603      	mov	r3, r0
 8002c98:	63bb      	str	r3, [r7, #56]	; 0x38

	float k1;
	float k2;

	if (fm > 0.01) {
 8002c9a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002c9c:	f7fd fbf8 	bl	8000490 <__aeabi_f2d>
 8002ca0:	a37d      	add	r3, pc, #500	; (adr r3, 8002e98 <output_handler_outwave_update+0x330>)
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	f7fd fedb 	bl	8000a60 <__aeabi_dcmpgt>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d030      	beq.n	8002d12 <output_handler_outwave_update+0x1aa>
		k1 = (df * fs) / (fm * 2 * M_PI * REF_CENTER);
 8002cb0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002cb4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cbc:	ee17 0a90 	vmov	r0, s15
 8002cc0:	f7fd fbe6 	bl	8000490 <__aeabi_f2d>
 8002cc4:	4604      	mov	r4, r0
 8002cc6:	460d      	mov	r5, r1
 8002cc8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002ccc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cd0:	ee17 0a90 	vmov	r0, s15
 8002cd4:	f7fd fbdc 	bl	8000490 <__aeabi_f2d>
 8002cd8:	a371      	add	r3, pc, #452	; (adr r3, 8002ea0 <output_handler_outwave_update+0x338>)
 8002cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cde:	f7fd fc2f 	bl	8000540 <__aeabi_dmul>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	4b74      	ldr	r3, [pc, #464]	; (8002ec0 <output_handler_outwave_update+0x358>)
 8002cf0:	f7fd fc26 	bl	8000540 <__aeabi_dmul>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	f7fd fd4a 	bl	8000794 <__aeabi_ddiv>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	f7fd fef2 	bl	8000af0 <__aeabi_d2f>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d10:	e002      	b.n	8002d18 <output_handler_outwave_update+0x1b0>
	}
	else {
		k1 = 0;
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	if (fm2 > 0.01) {
 8002d18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002d1a:	f7fd fbb9 	bl	8000490 <__aeabi_f2d>
 8002d1e:	a35e      	add	r3, pc, #376	; (adr r3, 8002e98 <output_handler_outwave_update+0x330>)
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f7fd fe9c 	bl	8000a60 <__aeabi_dcmpgt>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d030      	beq.n	8002d90 <output_handler_outwave_update+0x228>
		k2 = (df * fs) / (fm2 * 2 * M_PI * REF_CENTER);
 8002d2e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002d32:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d3a:	ee17 0a90 	vmov	r0, s15
 8002d3e:	f7fd fba7 	bl	8000490 <__aeabi_f2d>
 8002d42:	4604      	mov	r4, r0
 8002d44:	460d      	mov	r5, r1
 8002d46:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002d4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d4e:	ee17 0a90 	vmov	r0, s15
 8002d52:	f7fd fb9d 	bl	8000490 <__aeabi_f2d>
 8002d56:	a352      	add	r3, pc, #328	; (adr r3, 8002ea0 <output_handler_outwave_update+0x338>)
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f7fd fbf0 	bl	8000540 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	4b54      	ldr	r3, [pc, #336]	; (8002ec0 <output_handler_outwave_update+0x358>)
 8002d6e:	f7fd fbe7 	bl	8000540 <__aeabi_dmul>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4620      	mov	r0, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f7fd fd0b 	bl	8000794 <__aeabi_ddiv>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	f7fd feb3 	bl	8000af0 <__aeabi_d2f>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d8e:	e002      	b.n	8002d96 <output_handler_outwave_update+0x22e>
	}
	else {
		k2 = 0;
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	67bb      	str	r3, [r7, #120]	; 0x78
	}

	uint16_t* mod_wt1 = wavetable_get_ptr(mixer_get_OSC_ws(1));
 8002d96:	2001      	movs	r0, #1
 8002d98:	f7ff fd68 	bl	800286c <mixer_get_OSC_ws>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f001 f908 	bl	8003fb4 <wavetable_get_ptr>
 8002da4:	6378      	str	r0, [r7, #52]	; 0x34
	uint16_t* mod_wt2 = wavetable_get_ptr(mixer_get_OSC_ws(2));
 8002da6:	2002      	movs	r0, #2
 8002da8:	f7ff fd60 	bl	800286c <mixer_get_OSC_ws>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 f900 	bl	8003fb4 <wavetable_get_ptr>
 8002db4:	6338      	str	r0, [r7, #48]	; 0x30
	uint16_t* mod_wt3 = wavetable_get_ptr(mixer_get_OSC_ws(3));
 8002db6:	2003      	movs	r0, #3
 8002db8:	f7ff fd58 	bl	800286c <mixer_get_OSC_ws>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f001 f8f8 	bl	8003fb4 <wavetable_get_ptr>
 8002dc4:	62f8      	str	r0, [r7, #44]	; 0x2c
	float mp;
	float mp2;

	int idx;

	for (uint16_t i = out_start; i < out_stop - 3; i+=4) {
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002dcc:	e337      	b.n	800343e <output_handler_outwave_update+0x8d6>
		uint8_t active_voices = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
		uint32_t out_sample = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	66fb      	str	r3, [r7, #108]	; 0x6c

		fm_modulator += fm;
 8002dd8:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <output_handler_outwave_update+0x35c>)
 8002dda:	ed93 7a00 	vldr	s14, [r3]
 8002dde:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de6:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <output_handler_outwave_update+0x35c>)
 8002de8:	edc3 7a00 	vstr	s15, [r3]
		if (fm_modulator >= N_WT_SAMPLES) {
 8002dec:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <output_handler_outwave_update+0x35c>)
 8002dee:	edd3 7a00 	vldr	s15, [r3]
 8002df2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002ec8 <output_handler_outwave_update+0x360>
 8002df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfe:	db09      	blt.n	8002e14 <output_handler_outwave_update+0x2ac>
			fm_modulator -= N_WT_SAMPLES;
 8002e00:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <output_handler_outwave_update+0x35c>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002ec8 <output_handler_outwave_update+0x360>
 8002e0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <output_handler_outwave_update+0x35c>)
 8002e10:	edc3 7a00 	vstr	s15, [r3]
		}

		fm_modulator2 += fm2;
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <output_handler_outwave_update+0x364>)
 8002e16:	ed93 7a00 	vldr	s14, [r3]
 8002e1a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <output_handler_outwave_update+0x364>)
 8002e24:	edc3 7a00 	vstr	s15, [r3]
		if (fm_modulator2 >= N_WT_SAMPLES) {
 8002e28:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <output_handler_outwave_update+0x364>)
 8002e2a:	edd3 7a00 	vldr	s15, [r3]
 8002e2e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002ec8 <output_handler_outwave_update+0x360>
 8002e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3a:	db09      	blt.n	8002e50 <output_handler_outwave_update+0x2e8>
			fm_modulator2 -= N_WT_SAMPLES;
 8002e3c:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <output_handler_outwave_update+0x364>)
 8002e3e:	edd3 7a00 	vldr	s15, [r3]
 8002e42:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002ec8 <output_handler_outwave_update+0x360>
 8002e46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <output_handler_outwave_update+0x364>)
 8002e4c:	edc3 7a00 	vstr	s15, [r3]
		}

		for (uint8_t j = 0; j < poly_inputs; ++j) {
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8002e56:	e267      	b.n	8003328 <output_handler_outwave_update+0x7c0>
			if (!steps[j]) {
 8002e58:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <output_handler_outwave_update+0x368>)
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	edd3 7a00 	vldr	s15, [r3]
 8002e66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6e:	d133      	bne.n	8002ed8 <output_handler_outwave_update+0x370>
				trackers[j] = 0;
 8002e70:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002e74:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <output_handler_outwave_update+0x36c>)
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
				continue;
 8002e80:	e24d      	b.n	800331e <output_handler_outwave_update+0x7b6>
 8002e82:	bf00      	nop
 8002e84:	f3af 8000 	nop.w
 8002e88:	00000000 	.word	0x00000000
 8002e8c:	40799800 	.word	0x40799800
 8002e90:	17c1bda5 	.word	0x17c1bda5
 8002e94:	3fb55326 	.word	0x3fb55326
 8002e98:	47ae147b 	.word	0x47ae147b
 8002e9c:	3f847ae1 	.word	0x3f847ae1
 8002ea0:	54442d18 	.word	0x54442d18
 8002ea4:	400921fb 	.word	0x400921fb
 8002ea8:	4182d0e5 	.word	0x4182d0e5
 8002eac:	46abe000 	.word	0x46abe000
 8002eb0:	447a0000 	.word	0x447a0000
 8002eb4:	469c4000 	.word	0x469c4000
 8002eb8:	457ff000 	.word	0x457ff000
 8002ebc:	3f878d50 	.word	0x3f878d50
 8002ec0:	40a00000 	.word	0x40a00000
 8002ec4:	20003aa8 	.word	0x20003aa8
 8002ec8:	45a84000 	.word	0x45a84000
 8002ecc:	20003aac 	.word	0x20003aac
 8002ed0:	20003a68 	.word	0x20003a68
 8002ed4:	20003a28 	.word	0x20003a28
			}

			mf1 = (mod_wt1[(uint16_t)(fm_modulator)] - REF_CENTER) * k1;
 8002ed8:	4b62      	ldr	r3, [pc, #392]	; (8003064 <output_handler_outwave_update+0x4fc>)
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee2:	ee17 3a90 	vmov	r3, s15
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eec:	4413      	add	r3, r2
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002ef4:	ee07 3a90 	vmov	s15, r3
 8002ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002efc:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f04:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			mf2 = (mod_wt2[(uint16_t)fm_modulator2] - REF_CENTER) * k2;
 8002f08:	4b57      	ldr	r3, [pc, #348]	; (8003068 <output_handler_outwave_update+0x500>)
 8002f0a:	edd3 7a00 	vldr	s15, [r3]
 8002f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f12:	ee17 3a90 	vmov	r3, s15
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1c:	4413      	add	r3, r2
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f34:	edc7 7a08 	vstr	s15, [r7, #32]

//			float mult = mixer_get_PM_mult();
			bool sync = mixer_get_sync();
 8002f38:	f7ff fcf6 	bl	8002928 <mixer_get_sync>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	77fb      	strb	r3, [r7, #31]

			if (sync) {
 8002f40:	7ffb      	ldrb	r3, [r7, #31]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01b      	beq.n	8002f7e <output_handler_outwave_update+0x416>
				pm_modulators[j] += steps[j] * pmf;
 8002f46:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002f4a:	4a48      	ldr	r2, [pc, #288]	; (800306c <output_handler_outwave_update+0x504>)
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	ed93 7a00 	vldr	s14, [r3]
 8002f54:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002f58:	4a45      	ldr	r2, [pc, #276]	; (8003070 <output_handler_outwave_update+0x508>)
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	edd3 6a00 	vldr	s13, [r3]
 8002f62:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f6a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f72:	4a3e      	ldr	r2, [pc, #248]	; (800306c <output_handler_outwave_update+0x504>)
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	edc3 7a00 	vstr	s15, [r3]
 8002f7c:	e016      	b.n	8002fac <output_handler_outwave_update+0x444>
			} else {
				pm_modulators[j] += steps[j];
 8002f7e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002f82:	4a3a      	ldr	r2, [pc, #232]	; (800306c <output_handler_outwave_update+0x504>)
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	ed93 7a00 	vldr	s14, [r3]
 8002f8c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002f90:	4a37      	ldr	r2, [pc, #220]	; (8003070 <output_handler_outwave_update+0x508>)
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa2:	4a32      	ldr	r2, [pc, #200]	; (800306c <output_handler_outwave_update+0x504>)
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	edc3 7a00 	vstr	s15, [r3]
			}

			if (pm_modulators[j] >= N_WT_SAMPLES) {
 8002fac:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002fb0:	4a2e      	ldr	r2, [pc, #184]	; (800306c <output_handler_outwave_update+0x504>)
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	edd3 7a00 	vldr	s15, [r3]
 8002fba:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003074 <output_handler_outwave_update+0x50c>
 8002fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc6:	db11      	blt.n	8002fec <output_handler_outwave_update+0x484>
				pm_modulators[j] -= N_WT_SAMPLES;
 8002fc8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002fcc:	4a27      	ldr	r2, [pc, #156]	; (800306c <output_handler_outwave_update+0x504>)
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	edd3 7a00 	vldr	s15, [r3]
 8002fd6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002fda:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003074 <output_handler_outwave_update+0x50c>
 8002fde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fe2:	4a22      	ldr	r2, [pc, #136]	; (800306c <output_handler_outwave_update+0x504>)
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	edc3 7a00 	vstr	s15, [r3]
			}
			mp = (mod_wt2[(uint16_t)pm_modulators[j]] - REF_CENTER) * beta;
 8002fec:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002ff0:	4a1e      	ldr	r2, [pc, #120]	; (800306c <output_handler_outwave_update+0x504>)
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ffe:	ee17 3a90 	vmov	r3, s15
 8003002:	b29b      	uxth	r3, r3
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003008:	4413      	add	r3, r2
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003018:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800301c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003020:	edc7 7a06 	vstr	s15, [r7, #24]



			if (sync) {
 8003024:	7ffb      	ldrb	r3, [r7, #31]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d028      	beq.n	800307c <output_handler_outwave_update+0x514>
				pm_modulators2[j] += steps[j] * pmf;
 800302a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800302e:	4a12      	ldr	r2, [pc, #72]	; (8003078 <output_handler_outwave_update+0x510>)
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	ed93 7a00 	vldr	s14, [r3]
 8003038:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800303c:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <output_handler_outwave_update+0x508>)
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	edd3 6a00 	vldr	s13, [r3]
 8003046:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800304a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800304e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003056:	4a08      	ldr	r2, [pc, #32]	; (8003078 <output_handler_outwave_update+0x510>)
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	edc3 7a00 	vstr	s15, [r3]
 8003060:	e023      	b.n	80030aa <output_handler_outwave_update+0x542>
 8003062:	bf00      	nop
 8003064:	20003aa8 	.word	0x20003aa8
 8003068:	20003aac 	.word	0x20003aac
 800306c:	20003ab0 	.word	0x20003ab0
 8003070:	20003a68 	.word	0x20003a68
 8003074:	45a84000 	.word	0x45a84000
 8003078:	20003ad8 	.word	0x20003ad8
			} else {
				pm_modulators2[j] += steps[j];
 800307c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003080:	4ad7      	ldr	r2, [pc, #860]	; (80033e0 <output_handler_outwave_update+0x878>)
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	ed93 7a00 	vldr	s14, [r3]
 800308a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800308e:	4ad5      	ldr	r2, [pc, #852]	; (80033e4 <output_handler_outwave_update+0x87c>)
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800309c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a0:	4acf      	ldr	r2, [pc, #828]	; (80033e0 <output_handler_outwave_update+0x878>)
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	edc3 7a00 	vstr	s15, [r3]
			}

			if (pm_modulators2[j] >= N_WT_SAMPLES) {
 80030aa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80030ae:	4acc      	ldr	r2, [pc, #816]	; (80033e0 <output_handler_outwave_update+0x878>)
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	edd3 7a00 	vldr	s15, [r3]
 80030b8:	ed9f 7acb 	vldr	s14, [pc, #812]	; 80033e8 <output_handler_outwave_update+0x880>
 80030bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c4:	db11      	blt.n	80030ea <output_handler_outwave_update+0x582>
				pm_modulators2[j] -= N_WT_SAMPLES;
 80030c6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80030ca:	4ac5      	ldr	r2, [pc, #788]	; (80033e0 <output_handler_outwave_update+0x878>)
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	edd3 7a00 	vldr	s15, [r3]
 80030d4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80030d8:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 80033e8 <output_handler_outwave_update+0x880>
 80030dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030e0:	4abf      	ldr	r2, [pc, #764]	; (80033e0 <output_handler_outwave_update+0x878>)
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	edc3 7a00 	vstr	s15, [r3]
			}
			mp2 = (mod_wt3[(uint16_t)pm_modulators2[j]] - REF_CENTER) * beta2;
 80030ea:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80030ee:	4abc      	ldr	r2, [pc, #752]	; (80033e0 <output_handler_outwave_update+0x878>)
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	edd3 7a00 	vldr	s15, [r3]
 80030f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030fc:	ee17 3a90 	vmov	r3, s15
 8003100:	b29b      	uxth	r3, r3
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003106:	4413      	add	r3, r2
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003116:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311e:	edc7 7a05 	vstr	s15, [r7, #20]

			global_tracker += mp + mp2 + mf1 + mf2;
 8003122:	ed97 7a06 	vldr	s14, [r7, #24]
 8003126:	edd7 7a05 	vldr	s15, [r7, #20]
 800312a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800312e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003136:	edd7 7a08 	vldr	s15, [r7, #32]
 800313a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800313e:	4bab      	ldr	r3, [pc, #684]	; (80033ec <output_handler_outwave_update+0x884>)
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003148:	4ba8      	ldr	r3, [pc, #672]	; (80033ec <output_handler_outwave_update+0x884>)
 800314a:	edc3 7a00 	vstr	s15, [r3]

			global_tracker = (int)global_tracker % N_WT_SAMPLES;
 800314e:	4ba7      	ldr	r3, [pc, #668]	; (80033ec <output_handler_outwave_update+0x884>)
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003158:	ee17 2a90 	vmov	r2, s15
 800315c:	4ba4      	ldr	r3, [pc, #656]	; (80033f0 <output_handler_outwave_update+0x888>)
 800315e:	fb83 1302 	smull	r1, r3, r3, r2
 8003162:	12d9      	asrs	r1, r3, #11
 8003164:	17d3      	asrs	r3, r2, #31
 8003166:	1acb      	subs	r3, r1, r3
 8003168:	f241 5108 	movw	r1, #5384	; 0x1508
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800317a:	4b9c      	ldr	r3, [pc, #624]	; (80033ec <output_handler_outwave_update+0x884>)
 800317c:	edc3 7a00 	vstr	s15, [r3]
			

			idx = ((int)(trackers[j] + mp + mp2 + mf1 + mf2)) % N_WT_SAMPLES;
 8003180:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003184:	4a9b      	ldr	r2, [pc, #620]	; (80033f4 <output_handler_outwave_update+0x88c>)
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	ed93 7a00 	vldr	s14, [r3]
 800318e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003192:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003196:	edd7 7a05 	vldr	s15, [r7, #20]
 800319a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800319e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80031aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031b2:	ee17 3a90 	vmov	r3, s15
 80031b6:	4a8e      	ldr	r2, [pc, #568]	; (80033f0 <output_handler_outwave_update+0x888>)
 80031b8:	fb82 1203 	smull	r1, r2, r2, r3
 80031bc:	12d1      	asrs	r1, r2, #11
 80031be:	17da      	asrs	r2, r3, #31
 80031c0:	1a8a      	subs	r2, r1, r2
 80031c2:	f241 5108 	movw	r1, #5384	; 0x1508
 80031c6:	fb01 f202 	mul.w	r2, r1, r2
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	677b      	str	r3, [r7, #116]	; 0x74
			// idx = global_tracker + trackers[j];

			if (idx < 0) {
 80031ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da04      	bge.n	80031de <output_handler_outwave_update+0x676>
				idx += N_WT_SAMPLES;
 80031d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d6:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 80031da:	3308      	adds	r3, #8
 80031dc:	677b      	str	r3, [r7, #116]	; 0x74
			}


			if (trackers[j] > N_WT_SAMPLES*((float)mixer_get_PWM()/MIXER_DREF)) {
 80031de:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80031e2:	4a84      	ldr	r2, [pc, #528]	; (80033f4 <output_handler_outwave_update+0x88c>)
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	ed93 8a00 	vldr	s16, [r3]
 80031ec:	f7ff fab2 	bl	8002754 <mixer_get_PWM>
 80031f0:	4603      	mov	r3, r0
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031fa:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80033f8 <output_handler_outwave_update+0x890>
 80031fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003202:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80033e8 <output_handler_outwave_update+0x880>
 8003206:	ee67 7a87 	vmul.f32	s15, s15, s14
 800320a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	dd48      	ble.n	80032a6 <output_handler_outwave_update+0x73e>
				env_process(j);
 8003214:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe fba1 	bl	8001960 <env_process>
				float scaler = env_map_get(j)->scaler;
 800321e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe fb64 	bl	80018f0 <env_map_get>
 8003228:	4603      	mov	r3, r0
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]

				int tmp = idx;
 800322e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003230:	667b      	str	r3, [r7, #100]	; 0x64
				if (tmp >= N_WT_SAMPLES) {
 8003232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003234:	f241 5207 	movw	r2, #5383	; 0x1507
 8003238:	4293      	cmp	r3, r2
 800323a:	dd04      	ble.n	8003246 <output_handler_outwave_update+0x6de>
					tmp -= N_WT_SAMPLES;
 800323c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800323e:	f5a3 53a8 	sub.w	r3, r3, #5376	; 0x1500
 8003242:	3b08      	subs	r3, #8
 8003244:	667b      	str	r3, [r7, #100]	; 0x64
				}
				uint16_t next_sample = (float)wavetable[tmp];
 8003246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	ee07 3a90 	vmov	s15, r3
 8003254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800325c:	ee17 3a90 	vmov	r3, s15
 8003260:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				if (next_sample > 0xFFF) {
 8003264:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326c:	d305      	bcc.n	800327a <output_handler_outwave_update+0x712>
					next_sample -= 0xFFF;
 800326e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003272:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 8003276:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				}
				out_sample += next_sample * scaler;
 800327a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327c:	ee07 3a90 	vmov	s15, r3
 8003280:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003284:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003290:	edd7 7a04 	vldr	s15, [r7, #16]
 8003294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800329c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032a0:	ee17 3a90 	vmov	r3, s15
 80032a4:	66fb      	str	r3, [r7, #108]	; 0x6c
			}

			trackers[j] += steps[j];
 80032a6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80032aa:	4a52      	ldr	r2, [pc, #328]	; (80033f4 <output_handler_outwave_update+0x88c>)
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	ed93 7a00 	vldr	s14, [r3]
 80032b4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80032b8:	4a4a      	ldr	r2, [pc, #296]	; (80033e4 <output_handler_outwave_update+0x87c>)
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	edd3 7a00 	vldr	s15, [r3]
 80032c2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80032c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ca:	4a4a      	ldr	r2, [pc, #296]	; (80033f4 <output_handler_outwave_update+0x88c>)
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	edc3 7a00 	vstr	s15, [r3]

			if(trackers[j] >= N_WT_SAMPLES) {
 80032d4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80032d8:	4a46      	ldr	r2, [pc, #280]	; (80033f4 <output_handler_outwave_update+0x88c>)
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	edd3 7a00 	vldr	s15, [r3]
 80032e2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80033e8 <output_handler_outwave_update+0x880>
 80032e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ee:	db11      	blt.n	8003314 <output_handler_outwave_update+0x7ac>
				trackers[j] = trackers[j] - N_WT_SAMPLES;
 80032f0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80032f4:	4a3f      	ldr	r2, [pc, #252]	; (80033f4 <output_handler_outwave_update+0x88c>)
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	edd3 7a00 	vldr	s15, [r3]
 80032fe:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003302:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80033e8 <output_handler_outwave_update+0x880>
 8003306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800330a:	4a3a      	ldr	r2, [pc, #232]	; (80033f4 <output_handler_outwave_update+0x88c>)
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	edc3 7a00 	vstr	s15, [r3]
			}

			active_voices++;
 8003314:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8003318:	3301      	adds	r3, #1
 800331a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
		for (uint8_t j = 0; j < poly_inputs; ++j) {
 800331e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003322:	3301      	adds	r3, #1
 8003324:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003328:	4b34      	ldr	r3, [pc, #208]	; (80033fc <output_handler_outwave_update+0x894>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8003330:	429a      	cmp	r2, r3
 8003332:	f4ff ad91 	bcc.w	8002e58 <output_handler_outwave_update+0x2f0>

		}


		if (active_voices) {
 8003336:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01c      	beq.n	8003378 <output_handler_outwave_update+0x810>
			// out_sample = apply_effects(out_sample);
			// out_sample = apply_filters(out_sample);

			//Add DC correction here, maybe

			out_val = (out_sample)/squares[active_voices - 1];
 800333e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003340:	ee07 3a90 	vmov	s15, r3
 8003344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003348:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800334c:	3b01      	subs	r3, #1
 800334e:	4a2c      	ldr	r2, [pc, #176]	; (8003400 <output_handler_outwave_update+0x898>)
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	ed93 7a00 	vldr	s14, [r3]
 8003358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800335c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003360:	ee17 2a90 	vmov	r2, s15
 8003364:	4b27      	ldr	r3, [pc, #156]	; (8003404 <output_handler_outwave_update+0x89c>)
 8003366:	601a      	str	r2, [r3, #0]
			out_val = apply_filters(out_val);
 8003368:	4b26      	ldr	r3, [pc, #152]	; (8003404 <output_handler_outwave_update+0x89c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 f875 	bl	800345c <apply_filters>
 8003372:	4603      	mov	r3, r0
 8003374:	4a23      	ldr	r2, [pc, #140]	; (8003404 <output_handler_outwave_update+0x89c>)
 8003376:	6013      	str	r3, [r2, #0]


		}
		float vol = (float)mixer_get_volume()/MIXER_DREF;
 8003378:	f7ff f9b0 	bl	80026dc <mixer_get_volume>
 800337c:	4603      	mov	r3, r0
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003386:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80033f8 <output_handler_outwave_update+0x890>
 800338a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800338e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
//		out_val *= (vol*out_val + active_voices * sqrt(2)); //super loud but fun (TURN DOWN VOLUME!)

		out[i] = out_val * vol;
 8003392:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <output_handler_outwave_update+0x89c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800339e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80033a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b4:	ee17 2a90 	vmov	r2, s15
 80033b8:	b292      	uxth	r2, r2
 80033ba:	801a      	strh	r2, [r3, #0]
		out[i+1] = out[i];
 80033bc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	441a      	add	r2, r3
 80033c6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80033ca:	3301      	adds	r3, #1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	68f9      	ldr	r1, [r7, #12]
 80033d0:	440b      	add	r3, r1
 80033d2:	8812      	ldrh	r2, [r2, #0]
 80033d4:	801a      	strh	r2, [r3, #0]
		out[i+2] = out[i];
 80033d6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	e013      	b.n	8003408 <output_handler_outwave_update+0x8a0>
 80033e0:	20003ad8 	.word	0x20003ad8
 80033e4:	20003a68 	.word	0x20003a68
 80033e8:	45a84000 	.word	0x45a84000
 80033ec:	20003b00 	.word	0x20003b00
 80033f0:	6160ff9f 	.word	0x6160ff9f
 80033f4:	20003a28 	.word	0x20003a28
 80033f8:	457ff000 	.word	0x457ff000
 80033fc:	200039e4 	.word	0x200039e4
 8003400:	200039e8 	.word	0x200039e8
 8003404:	20003b04 	.word	0x20003b04
 8003408:	441a      	add	r2, r3
 800340a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800340e:	3302      	adds	r3, #2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	68f9      	ldr	r1, [r7, #12]
 8003414:	440b      	add	r3, r1
 8003416:	8812      	ldrh	r2, [r2, #0]
 8003418:	801a      	strh	r2, [r3, #0]
		out[i+3] = out[i];
 800341a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	441a      	add	r2, r3
 8003424:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8003428:	3303      	adds	r3, #3
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	440b      	add	r3, r1
 8003430:	8812      	ldrh	r2, [r2, #0]
 8003432:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = out_start; i < out_stop - 3; i+=4) {
 8003434:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8003438:	3304      	adds	r3, #4
 800343a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800343e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8003442:	893b      	ldrh	r3, [r7, #8]
 8003444:	3b03      	subs	r3, #3
 8003446:	429a      	cmp	r2, r3
 8003448:	f6ff acc1 	blt.w	8002dce <output_handler_outwave_update+0x266>
	}
}
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	3780      	adds	r7, #128	; 0x80
 8003452:	46bd      	mov	sp, r7
 8003454:	ecbd 8b02 	vpop	{d8}
 8003458:	bdb0      	pop	{r4, r5, r7, pc}
 800345a:	bf00      	nop

0800345c <apply_filters>:
	}

	return sample_in;
}

uint32_t apply_filters(uint32_t sample) {
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	//sample = filter_res_update(sample);
	// sample = filter_lp_RC_get_next(sample);


	return sample;
 8003464:	687b      	ldr	r3, [r7, #4]
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <output_handler_get_steps>:


float* output_handler_get_steps() {
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
	return steps;
 8003478:	4b02      	ldr	r3, [pc, #8]	; (8003484 <output_handler_get_steps+0x10>)
}
 800347a:	4618      	mov	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	20003a68 	.word	0x20003a68

08003488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <HAL_MspInit+0x4c>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <HAL_MspInit+0x4c>)
 8003498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800349c:	6453      	str	r3, [r2, #68]	; 0x44
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_MspInit+0x4c>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_MspInit+0x4c>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <HAL_MspInit+0x4c>)
 80034b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_MspInit+0x4c>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80034c6:	2007      	movs	r0, #7
 80034c8:	f002 f998 	bl	80057fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800

080034d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08c      	sub	sp, #48	; 0x30
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 031c 	add.w	r3, r7, #28
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a4d      	ldr	r2, [pc, #308]	; (800362c <HAL_ADC_MspInit+0x154>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	f040 8094 	bne.w	8003624 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	4b4b      	ldr	r3, [pc, #300]	; (8003630 <HAL_ADC_MspInit+0x158>)
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	4a4a      	ldr	r2, [pc, #296]	; (8003630 <HAL_ADC_MspInit+0x158>)
 8003506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350a:	6453      	str	r3, [r2, #68]	; 0x44
 800350c:	4b48      	ldr	r3, [pc, #288]	; (8003630 <HAL_ADC_MspInit+0x158>)
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	4b44      	ldr	r3, [pc, #272]	; (8003630 <HAL_ADC_MspInit+0x158>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	4a43      	ldr	r2, [pc, #268]	; (8003630 <HAL_ADC_MspInit+0x158>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6313      	str	r3, [r2, #48]	; 0x30
 8003528:	4b41      	ldr	r3, [pc, #260]	; (8003630 <HAL_ADC_MspInit+0x158>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	4b3d      	ldr	r3, [pc, #244]	; (8003630 <HAL_ADC_MspInit+0x158>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	4a3c      	ldr	r2, [pc, #240]	; (8003630 <HAL_ADC_MspInit+0x158>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6313      	str	r3, [r2, #48]	; 0x30
 8003544:	4b3a      	ldr	r3, [pc, #232]	; (8003630 <HAL_ADC_MspInit+0x158>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	4b36      	ldr	r3, [pc, #216]	; (8003630 <HAL_ADC_MspInit+0x158>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	4a35      	ldr	r2, [pc, #212]	; (8003630 <HAL_ADC_MspInit+0x158>)
 800355a:	f043 0302 	orr.w	r3, r3, #2
 800355e:	6313      	str	r3, [r2, #48]	; 0x30
 8003560:	4b33      	ldr	r3, [pc, #204]	; (8003630 <HAL_ADC_MspInit+0x158>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = MIXER_FM_DF_Pin|MIXER_PWM_Pin|MIXER_OSC1_FM_Pin|MIXER_OSC1_PM_BETA_Pin
 800356c:	233e      	movs	r3, #62	; 0x3e
 800356e:	61fb      	str	r3, [r7, #28]
                          |MIXER_OSC2_PM_BETA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003570:	2303      	movs	r3, #3
 8003572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003578:	f107 031c 	add.w	r3, r7, #28
 800357c:	4619      	mov	r1, r3
 800357e:	482d      	ldr	r0, [pc, #180]	; (8003634 <HAL_ADC_MspInit+0x15c>)
 8003580:	f002 fcee 	bl	8005f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIXER_OSC_PMF_Pin|MIXER_FILTER_LOW_Pin|MIXER_FILTER_HIGH_Pin|MIXER_GAIN_Pin
 8003584:	23ef      	movs	r3, #239	; 0xef
 8003586:	61fb      	str	r3, [r7, #28]
                          |MIXER_OSC2_FM_Pin|MIXER_ATTACK_Pin|MIXER_DECAY_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003588:	2303      	movs	r3, #3
 800358a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003590:	f107 031c 	add.w	r3, r7, #28
 8003594:	4619      	mov	r1, r3
 8003596:	4828      	ldr	r0, [pc, #160]	; (8003638 <HAL_ADC_MspInit+0x160>)
 8003598:	f002 fce2 	bl	8005f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIXER_SUSTAIN_Pin|MIXER_RELEASE_Pin;
 800359c:	2303      	movs	r3, #3
 800359e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035a0:	2303      	movs	r3, #3
 80035a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a8:	f107 031c 	add.w	r3, r7, #28
 80035ac:	4619      	mov	r1, r3
 80035ae:	4823      	ldr	r0, [pc, #140]	; (800363c <HAL_ADC_MspInit+0x164>)
 80035b0:	f002 fcd6 	bl	8005f60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80035b4:	4b22      	ldr	r3, [pc, #136]	; (8003640 <HAL_ADC_MspInit+0x168>)
 80035b6:	4a23      	ldr	r2, [pc, #140]	; (8003644 <HAL_ADC_MspInit+0x16c>)
 80035b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80035ba:	4b21      	ldr	r3, [pc, #132]	; (8003640 <HAL_ADC_MspInit+0x168>)
 80035bc:	2200      	movs	r2, #0
 80035be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035c0:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <HAL_ADC_MspInit+0x168>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c6:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <HAL_ADC_MspInit+0x168>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035cc:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <HAL_ADC_MspInit+0x168>)
 80035ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035d4:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <HAL_ADC_MspInit+0x168>)
 80035d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035dc:	4b18      	ldr	r3, [pc, #96]	; (8003640 <HAL_ADC_MspInit+0x168>)
 80035de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80035e4:	4b16      	ldr	r3, [pc, #88]	; (8003640 <HAL_ADC_MspInit+0x168>)
 80035e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HAL_ADC_MspInit+0x168>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <HAL_ADC_MspInit+0x168>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80035f8:	4811      	ldr	r0, [pc, #68]	; (8003640 <HAL_ADC_MspInit+0x168>)
 80035fa:	f002 f941 	bl	8005880 <HAL_DMA_Init>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003604:	f7fe ff5e 	bl	80024c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <HAL_ADC_MspInit+0x168>)
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
 800360e:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <HAL_ADC_MspInit+0x168>)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003614:	2200      	movs	r2, #0
 8003616:	2100      	movs	r1, #0
 8003618:	2012      	movs	r0, #18
 800361a:	f002 f8fa 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800361e:	2012      	movs	r0, #18
 8003620:	f002 f913 	bl	800584a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003624:	bf00      	nop
 8003626:	3730      	adds	r7, #48	; 0x30
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40012000 	.word	0x40012000
 8003630:	40023800 	.word	0x40023800
 8003634:	40020800 	.word	0x40020800
 8003638:	40020000 	.word	0x40020000
 800363c:	40020400 	.word	0x40020400
 8003640:	20000854 	.word	0x20000854
 8003644:	40026410 	.word	0x40026410

08003648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	f107 0314 	add.w	r3, r7, #20
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a19      	ldr	r2, [pc, #100]	; (80036cc <HAL_I2C_MspInit+0x84>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d12c      	bne.n	80036c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	4b18      	ldr	r3, [pc, #96]	; (80036d0 <HAL_I2C_MspInit+0x88>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a17      	ldr	r2, [pc, #92]	; (80036d0 <HAL_I2C_MspInit+0x88>)
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <HAL_I2C_MspInit+0x88>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003686:	f44f 7310 	mov.w	r3, #576	; 0x240
 800368a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800368c:	2312      	movs	r3, #18
 800368e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003690:	2301      	movs	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003694:	2300      	movs	r3, #0
 8003696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003698:	2304      	movs	r3, #4
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	4619      	mov	r1, r3
 80036a2:	480c      	ldr	r0, [pc, #48]	; (80036d4 <HAL_I2C_MspInit+0x8c>)
 80036a4:	f002 fc5c 	bl	8005f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <HAL_I2C_MspInit+0x88>)
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	4a07      	ldr	r2, [pc, #28]	; (80036d0 <HAL_I2C_MspInit+0x88>)
 80036b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036b6:	6413      	str	r3, [r2, #64]	; 0x40
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_I2C_MspInit+0x88>)
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036c4:	bf00      	nop
 80036c6:	3728      	adds	r7, #40	; 0x28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40005400 	.word	0x40005400
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40020400 	.word	0x40020400

080036d8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a4d      	ldr	r2, [pc, #308]	; (8003838 <HAL_I2S_MspInit+0x160>)
 8003704:	4293      	cmp	r3, r2
 8003706:	f040 8093 	bne.w	8003830 <HAL_I2S_MspInit+0x158>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800370a:	2301      	movs	r3, #1
 800370c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 203;
 800370e:	23cb      	movs	r3, #203	; 0xcb
 8003710:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003712:	2302      	movs	r3, #2
 8003714:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003716:	f107 0314 	add.w	r3, r7, #20
 800371a:	4618      	mov	r0, r3
 800371c:	f006 fbca 	bl	8009eb4 <HAL_RCCEx_PeriphCLKConfig>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8003726:	f7fe fecd 	bl	80024c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	4b43      	ldr	r3, [pc, #268]	; (800383c <HAL_I2S_MspInit+0x164>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	4a42      	ldr	r2, [pc, #264]	; (800383c <HAL_I2S_MspInit+0x164>)
 8003734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003738:	6413      	str	r3, [r2, #64]	; 0x40
 800373a:	4b40      	ldr	r3, [pc, #256]	; (800383c <HAL_I2S_MspInit+0x164>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	4b3c      	ldr	r3, [pc, #240]	; (800383c <HAL_I2S_MspInit+0x164>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a3b      	ldr	r2, [pc, #236]	; (800383c <HAL_I2S_MspInit+0x164>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6313      	str	r3, [r2, #48]	; 0x30
 8003756:	4b39      	ldr	r3, [pc, #228]	; (800383c <HAL_I2S_MspInit+0x164>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	4b35      	ldr	r3, [pc, #212]	; (800383c <HAL_I2S_MspInit+0x164>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4a34      	ldr	r2, [pc, #208]	; (800383c <HAL_I2S_MspInit+0x164>)
 800376c:	f043 0304 	orr.w	r3, r3, #4
 8003770:	6313      	str	r3, [r2, #48]	; 0x30
 8003772:	4b32      	ldr	r3, [pc, #200]	; (800383c <HAL_I2S_MspInit+0x164>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800377e:	2310      	movs	r3, #16
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003782:	2302      	movs	r3, #2
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378a:	2300      	movs	r3, #0
 800378c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800378e:	2306      	movs	r3, #6
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003796:	4619      	mov	r1, r3
 8003798:	4829      	ldr	r0, [pc, #164]	; (8003840 <HAL_I2S_MspInit+0x168>)
 800379a:	f002 fbe1 	bl	8005f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800379e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a4:	2302      	movs	r3, #2
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ac:	2300      	movs	r3, #0
 80037ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80037b0:	2306      	movs	r3, #6
 80037b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037b8:	4619      	mov	r1, r3
 80037ba:	4822      	ldr	r0, [pc, #136]	; (8003844 <HAL_I2S_MspInit+0x16c>)
 80037bc:	f002 fbd0 	bl	8005f60 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_I2S_MspInit+0x170>)
 80037c2:	4a22      	ldr	r2, [pc, #136]	; (800384c <HAL_I2S_MspInit+0x174>)
 80037c4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80037c6:	4b20      	ldr	r3, [pc, #128]	; (8003848 <HAL_I2S_MspInit+0x170>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037cc:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <HAL_I2S_MspInit+0x170>)
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d2:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_I2S_MspInit+0x170>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037d8:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_I2S_MspInit+0x170>)
 80037da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037de:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037e0:	4b19      	ldr	r3, [pc, #100]	; (8003848 <HAL_I2S_MspInit+0x170>)
 80037e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037e6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037e8:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_I2S_MspInit+0x170>)
 80037ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037ee:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80037f0:	4b15      	ldr	r3, [pc, #84]	; (8003848 <HAL_I2S_MspInit+0x170>)
 80037f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037f6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037f8:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_I2S_MspInit+0x170>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_I2S_MspInit+0x170>)
 8003800:	2200      	movs	r2, #0
 8003802:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003804:	4810      	ldr	r0, [pc, #64]	; (8003848 <HAL_I2S_MspInit+0x170>)
 8003806:	f002 f83b 	bl	8005880 <HAL_DMA_Init>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8003810:	f7fe fe58 	bl	80024c4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <HAL_I2S_MspInit+0x170>)
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
 800381a:	4a0b      	ldr	r2, [pc, #44]	; (8003848 <HAL_I2S_MspInit+0x170>)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003820:	2200      	movs	r2, #0
 8003822:	2100      	movs	r1, #0
 8003824:	2033      	movs	r0, #51	; 0x33
 8003826:	f001 fff4 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800382a:	2033      	movs	r0, #51	; 0x33
 800382c:	f002 f80d 	bl	800584a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003830:	bf00      	nop
 8003832:	3738      	adds	r7, #56	; 0x38
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40003c00 	.word	0x40003c00
 800383c:	40023800 	.word	0x40023800
 8003840:	40020000 	.word	0x40020000
 8003844:	40020800 	.word	0x40020800
 8003848:	20000950 	.word	0x20000950
 800384c:	40026088 	.word	0x40026088

08003850 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <HAL_TIM_OC_MspInit+0x48>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d115      	bne.n	800388e <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <HAL_TIM_OC_MspInit+0x4c>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	4a0c      	ldr	r2, [pc, #48]	; (800389c <HAL_TIM_OC_MspInit+0x4c>)
 800386c:	f043 0302 	orr.w	r3, r3, #2
 8003870:	6413      	str	r3, [r2, #64]	; 0x40
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_TIM_OC_MspInit+0x4c>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800387e:	2200      	movs	r2, #0
 8003880:	2100      	movs	r1, #0
 8003882:	201d      	movs	r0, #29
 8003884:	f001 ffc5 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003888:	201d      	movs	r0, #29
 800388a:	f001 ffde 	bl	800584a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40000400 	.word	0x40000400
 800389c:	40023800 	.word	0x40023800

080038a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <HAL_TIM_Base_MspInit+0x48>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d115      	bne.n	80038de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <HAL_TIM_Base_MspInit+0x4c>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4a0c      	ldr	r2, [pc, #48]	; (80038ec <HAL_TIM_Base_MspInit+0x4c>)
 80038bc:	f043 0320 	orr.w	r3, r3, #32
 80038c0:	6413      	str	r3, [r2, #64]	; 0x40
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <HAL_TIM_Base_MspInit+0x4c>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80038ce:	2200      	movs	r2, #0
 80038d0:	2100      	movs	r1, #0
 80038d2:	2037      	movs	r0, #55	; 0x37
 80038d4:	f001 ff9d 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80038d8:	2037      	movs	r0, #55	; 0x37
 80038da:	f001 ffb6 	bl	800584a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40001400 	.word	0x40001400
 80038ec:	40023800 	.word	0x40023800

080038f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038f4:	e7fe      	b.n	80038f4 <NMI_Handler+0x4>

080038f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038fa:	e7fe      	b.n	80038fa <HardFault_Handler+0x4>

080038fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003900:	e7fe      	b.n	8003900 <MemManage_Handler+0x4>

08003902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003906:	e7fe      	b.n	8003906 <BusFault_Handler+0x4>

08003908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800390c:	e7fe      	b.n	800390c <UsageFault_Handler+0x4>

0800390e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800392a:	b480      	push	{r7}
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800392e:	bf00      	nop
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800393c:	f001 f928 	bl	8004b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003940:	bf00      	nop
 8003942:	bd80      	pop	{r7, pc}

08003944 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <DMA1_Stream5_IRQHandler+0x10>)
 800394a:	f002 f89f 	bl	8005a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000950 	.word	0x20000950

08003958 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <ADC_IRQHandler+0x10>)
 800395e:	f001 f99e 	bl	8004c9e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	2000080c 	.word	0x2000080c

0800396c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <TIM3_IRQHandler+0x10>)
 8003972:	f006 fcee 	bl	800a352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200009b0 	.word	0x200009b0

08003980 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PHASE_MULT_Pin);
 8003984:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003988:	f002 fcba 	bl	8006300 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_OSC3_CYCLE_Pin);
 800398c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003990:	f002 fcb6 	bl	8006300 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_OSC2_CYCLE_Pin);
 8003994:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003998:	f002 fcb2 	bl	8006300 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_OSC1_CYCLE_Pin);
 800399c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039a0:	f002 fcae 	bl	8006300 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_OUT_WAVE_CYCLE_Pin);
 80039a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039a8:	f002 fcaa 	bl	8006300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80039b4:	4802      	ldr	r0, [pc, #8]	; (80039c0 <SPI3_IRQHandler+0x10>)
 80039b6:	f005 fa43 	bl	8008e40 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000908 	.word	0x20000908

080039c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80039c8:	4802      	ldr	r0, [pc, #8]	; (80039d4 <TIM7_IRQHandler+0x10>)
 80039ca:	f006 fcc2 	bl	800a352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200009f8 	.word	0x200009f8

080039d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039dc:	4802      	ldr	r0, [pc, #8]	; (80039e8 <DMA2_Stream0_IRQHandler+0x10>)
 80039de:	f002 f855 	bl	8005a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000854 	.word	0x20000854

080039ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <OTG_FS_IRQHandler+0x10>)
 80039f2:	f002 ff07 	bl	8006804 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20011278 	.word	0x20011278

08003a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a08:	4a14      	ldr	r2, [pc, #80]	; (8003a5c <_sbrk+0x5c>)
 8003a0a:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <_sbrk+0x60>)
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <_sbrk+0x64>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <_sbrk+0x64>)
 8003a1e:	4a12      	ldr	r2, [pc, #72]	; (8003a68 <_sbrk+0x68>)
 8003a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <_sbrk+0x64>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d207      	bcs.n	8003a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a30:	f00a f820 	bl	800da74 <__errno>
 8003a34:	4603      	mov	r3, r0
 8003a36:	220c      	movs	r2, #12
 8003a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a3e:	e009      	b.n	8003a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a40:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <_sbrk+0x64>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <_sbrk+0x64>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	4a05      	ldr	r2, [pc, #20]	; (8003a64 <_sbrk+0x64>)
 8003a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a52:	68fb      	ldr	r3, [r7, #12]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20020000 	.word	0x20020000
 8003a60:	00000400 	.word	0x00000400
 8003a64:	20003b08 	.word	0x20003b08
 8003a68:	20011590 	.word	0x20011590

08003a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <SystemInit+0x20>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <SystemInit+0x20>)
 8003a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b089      	sub	sp, #36	; 0x24
 8003a94:	af04      	add	r7, sp, #16
 8003a96:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 8003aa0:	23ff      	movs	r3, #255	; 0xff
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f008 f986 	bl	800bdb8 <USBH_FindInterface>
 8003aac:	4603      	mov	r3, r0
 8003aae:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 8003ab0:	7bbb      	ldrb	r3, [r7, #14]
 8003ab2:	2bff      	cmp	r3, #255	; 0xff
 8003ab4:	d102      	bne.n	8003abc <USBH_MIDI_InterfaceInit+0x2c>
	{
		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
		status = USBH_FAIL;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	73fb      	strb	r3, [r7, #15]
 8003aba:	e0fc      	b.n	8003cb6 <USBH_MIDI_InterfaceInit+0x226>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 8003abc:	7bbb      	ldrb	r3, [r7, #14]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f008 f95d 	bl	800bd80 <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 8003acc:	201c      	movs	r0, #28
 8003ace:	f009 fffb 	bl	800dac8 <malloc>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  (MIDI_HandleTypeDef *)phost->pActiveClass->pData;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	60bb      	str	r3, [r7, #8]

		if (MIDI_Handle == NULL)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <USBH_MIDI_InterfaceInit+0x5a>
		{
			USBH_DbgLog("Cannot allocate memory for MIDI Handle");
			return USBH_FAIL;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e0e6      	b.n	8003cb8 <USBH_MIDI_InterfaceInit+0x228>
		}

		USBH_memset(MIDI_Handle, 0, sizeof(MIDI_HandleTypeDef)); // clear memory for MIDI_Handle
 8003aea:	221c      	movs	r2, #28
 8003aec:	2100      	movs	r1, #0
 8003aee:	68b8      	ldr	r0, [r7, #8]
 8003af0:	f00a f808 	bl	800db04 <memset>

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003afa:	4619      	mov	r1, r3
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	231a      	movs	r3, #26
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b25b      	sxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	da1c      	bge.n	8003b4c <USBH_MIDI_InterfaceInit+0xbc>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003b18:	4619      	mov	r1, r3
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	231a      	movs	r3, #26
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003b34:	4619      	mov	r1, r3
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	231a      	movs	r3, #26
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003b44:	881a      	ldrh	r2, [r3, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	811a      	strh	r2, [r3, #8]
 8003b4a:	e01b      	b.n	8003b84 <USBH_MIDI_InterfaceInit+0xf4>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003b52:	4619      	mov	r1, r3
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	231a      	movs	r3, #26
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8003b62:	781a      	ldrb	r2, [r3, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003b6e:	4619      	mov	r1, r3
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	231a      	movs	r3, #26
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003b7e:	881a      	ldrh	r2, [r3, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	231a      	movs	r3, #26
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	f203 3356 	addw	r3, r3, #854	; 0x356
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	b25b      	sxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	da1c      	bge.n	8003bdc <USBH_MIDI_InterfaceInit+0x14c>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003ba8:	4619      	mov	r1, r3
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	231a      	movs	r3, #26
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8003bb8:	781a      	ldrb	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	231a      	movs	r3, #26
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003bd4:	881a      	ldrh	r2, [r3, #0]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	811a      	strh	r2, [r3, #8]
 8003bda:	e01b      	b.n	8003c14 <USBH_MIDI_InterfaceInit+0x184>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003be2:	4619      	mov	r1, r3
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	231a      	movs	r3, #26
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	f203 3356 	addw	r3, r3, #854	; 0x356
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003bfe:	4619      	mov	r1, r3
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	231a      	movs	r3, #26
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003c0e:	881a      	ldrh	r2, [r3, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	78db      	ldrb	r3, [r3, #3]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f009 fbba 	bl	800d394 <USBH_AllocPipe>
 8003c20:	4603      	mov	r3, r0
 8003c22:	461a      	mov	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	791b      	ldrb	r3, [r3, #4]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f009 fbb0 	bl	800d394 <USBH_AllocPipe>
 8003c34:	4603      	mov	r3, r0
 8003c36:	461a      	mov	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	7899      	ldrb	r1, [r3, #2]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	78d8      	ldrb	r0, [r3, #3]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	88d2      	ldrh	r2, [r2, #6]
 8003c54:	9202      	str	r2, [sp, #8]
 8003c56:	2202      	movs	r2, #2
 8003c58:	9201      	str	r2, [sp, #4]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	4623      	mov	r3, r4
 8003c5e:	4602      	mov	r2, r0
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f009 fb68 	bl	800d336 <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	7859      	ldrb	r1, [r3, #1]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	7918      	ldrb	r0, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	8912      	ldrh	r2, [r2, #8]
 8003c7e:	9202      	str	r2, [sp, #8]
 8003c80:	2202      	movs	r2, #2
 8003c82:	9201      	str	r2, [sp, #4]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	4623      	mov	r3, r4
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f009 fb53 	bl	800d336 <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	785b      	ldrb	r3, [r3, #1]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f009 fe64 	bl	800d96c <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	789b      	ldrb	r3, [r3, #2]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	4619      	mov	r1, r3
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f009 fe5d 	bl	800d96c <USBH_LL_SetToggle>
		status = USBH_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd90      	pop	{r4, r7, pc}

08003cc0 <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	789b      	ldrb	r3, [r3, #2]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00e      	beq.n	8003cf8 <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	789b      	ldrb	r3, [r3, #2]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f009 fb47 	bl	800d374 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	789b      	ldrb	r3, [r3, #2]
 8003cea:	4619      	mov	r1, r3
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f009 fb73 	bl	800d3d8 <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	785b      	ldrb	r3, [r3, #1]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00e      	beq.n	8003d1e <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	785b      	ldrb	r3, [r3, #1]
 8003d04:	4619      	mov	r1, r3
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f009 fb34 	bl	800d374 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	785b      	ldrb	r3, [r3, #1]
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f009 fb60 	bl	800d3d8 <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00b      	beq.n	8003d42 <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f009 fed0 	bl	800dad8 <free>
		phost->pActiveClass->pData = 0;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8003d3e:	2200      	movs	r2, #0
 8003d40:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4798      	blx	r3

	return USBH_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <USBH_MIDI_Stop>:
  *         Stop current MIDI Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	60fb      	str	r3, [r7, #12]

  if(phost->gState == HOST_CLASS)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b0b      	cmp	r3, #11
 8003d84:	d10e      	bne.n	8003da4 <USBH_MIDI_Stop+0x3a>
  {
    MIDI_Handle->state = MIDI_IDLE_STATE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	701a      	strb	r2, [r3, #0]

    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	785b      	ldrb	r3, [r3, #1]
 8003d90:	4619      	mov	r1, r3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f009 faee 	bl	800d374 <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	789b      	ldrb	r3, [r3, #2]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f009 fae8 	bl	800d374 <USBH_ClosePipe>
  }
  return USBH_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <USBH_MIDI_Process>:
 *         (background process)
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8003db6:	2301      	movs	r3, #1
 8003db8:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d00d      	beq.n	8003dec <USBH_MIDI_Process+0x3e>
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	dc18      	bgt.n	8003e06 <USBH_MIDI_Process+0x58>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <USBH_MIDI_Process+0x30>
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d003      	beq.n	8003de4 <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 8003ddc:	e013      	b.n	8003e06 <USBH_MIDI_Process+0x58>
		status = USBH_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]
		break;
 8003de2:	e013      	b.n	8003e0c <USBH_MIDI_Process+0x5e>
		MIDI_ProcessReception(phost);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f84c 	bl	8003e82 <MIDI_ProcessReception>
		break;
 8003dea:	e00f      	b.n	8003e0c <USBH_MIDI_Process+0x5e>
		req_status = USBH_ClrFeature(phost, 0x00);
 8003dec:	2100      	movs	r1, #0
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f008 fdb1 	bl	800c956 <USBH_ClrFeature>
 8003df4:	4603      	mov	r3, r0
 8003df6:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 8003df8:	7bbb      	ldrb	r3, [r7, #14]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <USBH_MIDI_Process+0x5c>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
		break;
 8003e04:	e001      	b.n	8003e0a <USBH_MIDI_Process+0x5c>
		break;
 8003e06:	bf00      	nop
 8003e08:	e000      	b.n	8003e0c <USBH_MIDI_Process+0x5e>
		break;
 8003e0a:	bf00      	nop

	}

	return status;
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <USBH_MIDI_Receive>:
 * @brief  This function prepares the state before issuing the class specific commands
 * @param  None
 * @retval None
 */
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <USBH_MIDI_Receive+0x2c>
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d10d      	bne.n	8003e74 <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	88fa      	ldrh	r2, [r7, #6]
 8003e62:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <MIDI_ProcessReception>:
 *  @param  pdev: Selected device
 * @retval None
 */

static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	72fb      	strb	r3, [r7, #11]
	uint16_t length;

	switch(MIDI_Handle->data_rx_state)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	7e5b      	ldrb	r3, [r3, #25]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d002      	beq.n	8003ea6 <MIDI_ProcessReception+0x24>
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d00d      	beq.n	8003ec0 <MIDI_ProcessReception+0x3e>
		}

		break;

	default:
		break;
 8003ea4:	e043      	b.n	8003f2e <MIDI_ProcessReception+0xac>
		USBH_BulkReceiveData (phost,
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6919      	ldr	r1, [r3, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	891a      	ldrh	r2, [r3, #8]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f009 fa21 	bl	800d2fa <USBH_BulkReceiveData>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	765a      	strb	r2, [r3, #25]
		break;
 8003ebe:	e036      	b.n	8003f2e <MIDI_ProcessReception+0xac>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	785b      	ldrb	r3, [r3, #1]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f009 fd26 	bl	800d918 <USBH_LL_GetURBState>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8003ed0:	7afb      	ldrb	r3, [r7, #11]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d12a      	bne.n	8003f2c <MIDI_ProcessReception+0xaa>
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	785b      	ldrb	r3, [r3, #1]
 8003eda:	4619      	mov	r1, r3
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f009 fc89 	bl	800d7f4 <USBH_LL_GetLastXferSize>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	813b      	strh	r3, [r7, #8]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8adb      	ldrh	r3, [r3, #22]
 8003eea:	461a      	mov	r2, r3
 8003eec:	893b      	ldrh	r3, [r7, #8]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	dd15      	ble.n	8003f20 <MIDI_ProcessReception+0x9e>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	891b      	ldrh	r3, [r3, #8]
 8003ef8:	893a      	ldrh	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d910      	bls.n	8003f20 <MIDI_ProcessReception+0x9e>
				MIDI_Handle->RxDataLength -= length ;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8ada      	ldrh	r2, [r3, #22]
 8003f02:	893b      	ldrh	r3, [r7, #8]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	893b      	ldrh	r3, [r7, #8]
 8003f12:	441a      	add	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	765a      	strb	r2, [r3, #25]
		break;
 8003f1e:	e005      	b.n	8003f2c <MIDI_ProcessReception+0xaa>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fc ffd4 	bl	8000ed4 <USBH_MIDI_ReceiveCallback>
		break;
 8003f2c:	bf00      	nop
	}
}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <wavetable_init_all>:
static uint16_t square[N_WT_SAMPLES];
static uint16_t triangle[N_WT_SAMPLES];
static uint16_t sawtooth[N_WT_SAMPLES];
static uint16_t bowsaw[N_WT_SAMPLES];

void wavetable_init_all() {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
	wavetable_create_sine(sine, 0xFFF, N_WT_SAMPLES, 1);
 8003f3c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003f40:	f241 5208 	movw	r2, #5384	; 0x1508
 8003f44:	f640 71ff 	movw	r1, #4095	; 0xfff
 8003f48:	4815      	ldr	r0, [pc, #84]	; (8003fa0 <wavetable_init_all+0x68>)
 8003f4a:	f000 f865 	bl	8004018 <wavetable_create_sine>
	wavetable_create_square(square, 0xFFF, N_WT_SAMPLES, 1);
 8003f4e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003f52:	f241 5208 	movw	r2, #5384	; 0x1508
 8003f56:	f640 71ff 	movw	r1, #4095	; 0xfff
 8003f5a:	4812      	ldr	r0, [pc, #72]	; (8003fa4 <wavetable_init_all+0x6c>)
 8003f5c:	f000 f8d4 	bl	8004108 <wavetable_create_square>
	wavetable_create_triangle(triangle, 0xFFF, N_WT_SAMPLES, 1);
 8003f60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003f64:	f241 5208 	movw	r2, #5384	; 0x1508
 8003f68:	f640 71ff 	movw	r1, #4095	; 0xfff
 8003f6c:	480e      	ldr	r0, [pc, #56]	; (8003fa8 <wavetable_init_all+0x70>)
 8003f6e:	f000 f90f 	bl	8004190 <wavetable_create_triangle>
	wavetable_create_sawtooth(sawtooth, 0xFFF, N_WT_SAMPLES, 1);
 8003f72:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003f76:	f241 5208 	movw	r2, #5384	; 0x1508
 8003f7a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8003f7e:	480b      	ldr	r0, [pc, #44]	; (8003fac <wavetable_init_all+0x74>)
 8003f80:	f000 f992 	bl	80042a8 <wavetable_create_sawtooth>
	wavetable_create_bowsaw(bowsaw, 0xFFF, N_WT_SAMPLES, 1, 1000);
 8003f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003f8c:	f241 5208 	movw	r2, #5384	; 0x1508
 8003f90:	f640 71ff 	movw	r1, #4095	; 0xfff
 8003f94:	4806      	ldr	r0, [pc, #24]	; (8003fb0 <wavetable_init_all+0x78>)
 8003f96:	f000 fa1d 	bl	80043d4 <wavetable_create_bowsaw>
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20003b0c 	.word	0x20003b0c
 8003fa4:	2000651c 	.word	0x2000651c
 8003fa8:	20008f2c 	.word	0x20008f2c
 8003fac:	2000b93c 	.word	0x2000b93c
 8003fb0:	2000e34c 	.word	0x2000e34c

08003fb4 <wavetable_get_ptr>:

uint16_t* wavetable_get_ptr(ws_enum wave) {
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	71fb      	strb	r3, [r7, #7]
	switch(wave) {
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d817      	bhi.n	8003ff4 <wavetable_get_ptr+0x40>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <wavetable_get_ptr+0x18>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08003fe1 	.word	0x08003fe1
 8003fd0:	08003fe5 	.word	0x08003fe5
 8003fd4:	08003fe9 	.word	0x08003fe9
 8003fd8:	08003fed 	.word	0x08003fed
 8003fdc:	08003ff1 	.word	0x08003ff1
	case SINE:
		return sine;
 8003fe0:	4b08      	ldr	r3, [pc, #32]	; (8004004 <wavetable_get_ptr+0x50>)
 8003fe2:	e008      	b.n	8003ff6 <wavetable_get_ptr+0x42>
	case SQUARE:
		return square;
 8003fe4:	4b08      	ldr	r3, [pc, #32]	; (8004008 <wavetable_get_ptr+0x54>)
 8003fe6:	e006      	b.n	8003ff6 <wavetable_get_ptr+0x42>
	case TRIANGLE:
		return triangle;
 8003fe8:	4b08      	ldr	r3, [pc, #32]	; (800400c <wavetable_get_ptr+0x58>)
 8003fea:	e004      	b.n	8003ff6 <wavetable_get_ptr+0x42>
	case SAWTOOTH:
		return sawtooth;
 8003fec:	4b08      	ldr	r3, [pc, #32]	; (8004010 <wavetable_get_ptr+0x5c>)
 8003fee:	e002      	b.n	8003ff6 <wavetable_get_ptr+0x42>
	case BOWSAW:
		return bowsaw;
 8003ff0:	4b08      	ldr	r3, [pc, #32]	; (8004014 <wavetable_get_ptr+0x60>)
 8003ff2:	e000      	b.n	8003ff6 <wavetable_get_ptr+0x42>
	default:
		break;
 8003ff4:	bf00      	nop
	}
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	20003b0c 	.word	0x20003b0c
 8004008:	2000651c 	.word	0x2000651c
 800400c:	20008f2c 	.word	0x20008f2c
 8004010:	2000b93c 	.word	0x2000b93c
 8004014:	2000e34c 	.word	0x2000e34c

08004018 <wavetable_create_sine>:

void wavetable_create_sine(uint16_t* out, uint16_t ref_v, uint16_t ns, float amp) {
 8004018:	b5b0      	push	{r4, r5, r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	460b      	mov	r3, r1
 8004022:	ed87 0a01 	vstr	s0, [r7, #4]
 8004026:	817b      	strh	r3, [r7, #10]
 8004028:	4613      	mov	r3, r2
 800402a:	813b      	strh	r3, [r7, #8]

	for (int i = 0; i < ns; i++) {
 800402c:	2300      	movs	r3, #0
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	e05a      	b.n	80040e8 <wavetable_create_sine+0xd0>
        float sine = sin((i * (2*M_PI)/ns));
 8004032:	69f8      	ldr	r0, [r7, #28]
 8004034:	f7fc fa1a 	bl	800046c <__aeabi_i2d>
 8004038:	a331      	add	r3, pc, #196	; (adr r3, 8004100 <wavetable_create_sine+0xe8>)
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	f7fc fa7f 	bl	8000540 <__aeabi_dmul>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4614      	mov	r4, r2
 8004048:	461d      	mov	r5, r3
 800404a:	893b      	ldrh	r3, [r7, #8]
 800404c:	4618      	mov	r0, r3
 800404e:	f7fc fa0d 	bl	800046c <__aeabi_i2d>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4620      	mov	r0, r4
 8004058:	4629      	mov	r1, r5
 800405a:	f7fc fb9b 	bl	8000794 <__aeabi_ddiv>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	ec43 2b17 	vmov	d7, r2, r3
 8004066:	eeb0 0a47 	vmov.f32	s0, s14
 800406a:	eef0 0a67 	vmov.f32	s1, s15
 800406e:	f009 fecf 	bl	800de10 <sin>
 8004072:	ec53 2b10 	vmov	r2, r3, d0
 8004076:	4610      	mov	r0, r2
 8004078:	4619      	mov	r1, r3
 800407a:	f7fc fd39 	bl	8000af0 <__aeabi_d2f>
 800407e:	4603      	mov	r3, r0
 8004080:	61bb      	str	r3, [r7, #24]
        float scaled = sine * ((ref_v)/2); //divide by 2 to dampen SPL
 8004082:	897b      	ldrh	r3, [r7, #10]
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	b29b      	uxth	r3, r3
 8004088:	ee07 3a90 	vmov	s15, r3
 800408c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004090:	ed97 7a06 	vldr	s14, [r7, #24]
 8004094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004098:	edc7 7a05 	vstr	s15, [r7, #20]

        uint16_t s = (uint16_t)(scaled + ref_v/2) * amp;
 800409c:	897b      	ldrh	r3, [r7, #10]
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80040ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b6:	ee17 3a90 	vmov	r3, s15
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80040c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040d0:	ee17 3a90 	vmov	r3, s15
 80040d4:	827b      	strh	r3, [r7, #18]

		out[i] = s;
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	8a7a      	ldrh	r2, [r7, #18]
 80040e0:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < ns; i++) {
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	893b      	ldrh	r3, [r7, #8]
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	dba0      	blt.n	8004032 <wavetable_create_sine+0x1a>
	}
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bdb0      	pop	{r4, r5, r7, pc}
 80040fa:	bf00      	nop
 80040fc:	f3af 8000 	nop.w
 8004100:	54442d18 	.word	0x54442d18
 8004104:	401921fb 	.word	0x401921fb

08004108 <wavetable_create_square>:

void wavetable_create_square(uint16_t* out, uint16_t ref_v, uint16_t ns, float amp) {
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	460b      	mov	r3, r1
 8004112:	ed87 0a01 	vstr	s0, [r7, #4]
 8004116:	817b      	strh	r3, [r7, #10]
 8004118:	4613      	mov	r3, r2
 800411a:	813b      	strh	r3, [r7, #8]
	uint16_t high_val = ref_v * amp;
 800411c:	897b      	ldrh	r3, [r7, #10]
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004126:	edd7 7a01 	vldr	s15, [r7, #4]
 800412a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004132:	ee17 3a90 	vmov	r3, s15
 8004136:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < ns/2; i++) {
 8004138:	2300      	movs	r3, #0
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	e008      	b.n	8004150 <wavetable_create_square+0x48>
		out[i] = high_val;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4413      	add	r3, r2
 8004146:	8afa      	ldrh	r2, [r7, #22]
 8004148:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < ns/2; i++) {
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	3301      	adds	r3, #1
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	893b      	ldrh	r3, [r7, #8]
 8004152:	085b      	lsrs	r3, r3, #1
 8004154:	b29b      	uxth	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4293      	cmp	r3, r2
 800415c:	dbef      	blt.n	800413e <wavetable_create_square+0x36>
	}

	for (int i = ns/2; i < ns; i++) {
 800415e:	893b      	ldrh	r3, [r7, #8]
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	b29b      	uxth	r3, r3
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e008      	b.n	800417a <wavetable_create_square+0x72>
		out[i] = 0;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	2200      	movs	r2, #0
 8004172:	801a      	strh	r2, [r3, #0]
	for (int i = ns/2; i < ns; i++) {
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	3301      	adds	r3, #1
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	893b      	ldrh	r3, [r7, #8]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	429a      	cmp	r2, r3
 8004180:	dbf2      	blt.n	8004168 <wavetable_create_square+0x60>
	}
}
 8004182:	bf00      	nop
 8004184:	bf00      	nop
 8004186:	3724      	adds	r7, #36	; 0x24
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <wavetable_create_triangle>:

void wavetable_create_triangle(uint16_t* out, uint16_t ref_v, uint16_t ns, float amp) {
 8004190:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004194:	b088      	sub	sp, #32
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	460b      	mov	r3, r1
 800419c:	ed87 0a01 	vstr	s0, [r7, #4]
 80041a0:	817b      	strh	r3, [r7, #10]
 80041a2:	4613      	mov	r3, r2
 80041a4:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < ns; i++) {
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	e071      	b.n	8004290 <wavetable_create_triangle+0x100>
		float tri = 2.0f * fabs((float)i/ns - floor((float)i/ns + 0.5));
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041b6:	893b      	ldrh	r3, [r7, #8]
 80041b8:	ee07 3a90 	vmov	s15, r3
 80041bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80041c4:	ee16 0a90 	vmov	r0, s13
 80041c8:	f7fc f962 	bl	8000490 <__aeabi_f2d>
 80041cc:	4680      	mov	r8, r0
 80041ce:	4689      	mov	r9, r1
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041da:	893b      	ldrh	r3, [r7, #8]
 80041dc:	ee07 3a90 	vmov	s15, r3
 80041e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80041e8:	ee16 0a90 	vmov	r0, s13
 80041ec:	f7fc f950 	bl	8000490 <__aeabi_f2d>
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <wavetable_create_triangle+0x114>)
 80041f6:	f7fb ffed 	bl	80001d4 <__adddf3>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	ec43 2b17 	vmov	d7, r2, r3
 8004202:	eeb0 0a47 	vmov.f32	s0, s14
 8004206:	eef0 0a67 	vmov.f32	s1, s15
 800420a:	f009 fd81 	bl	800dd10 <floor>
 800420e:	ec53 2b10 	vmov	r2, r3, d0
 8004212:	4640      	mov	r0, r8
 8004214:	4649      	mov	r1, r9
 8004216:	f7fb ffdb 	bl	80001d0 <__aeabi_dsub>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4614      	mov	r4, r2
 8004220:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004224:	4622      	mov	r2, r4
 8004226:	462b      	mov	r3, r5
 8004228:	4620      	mov	r0, r4
 800422a:	4629      	mov	r1, r5
 800422c:	f7fb ffd2 	bl	80001d4 <__adddf3>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	f7fc fc5a 	bl	8000af0 <__aeabi_d2f>
 800423c:	4603      	mov	r3, r0
 800423e:	61bb      	str	r3, [r7, #24]
		float scaled = tri * (ref_v);
 8004240:	897b      	ldrh	r3, [r7, #10]
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800424a:	ed97 7a06 	vldr	s14, [r7, #24]
 800424e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004252:	edc7 7a05 	vstr	s15, [r7, #20]

		uint16_t s = (uint16_t)(scaled) * amp;
 8004256:	edd7 7a05 	vldr	s15, [r7, #20]
 800425a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800425e:	ee17 3a90 	vmov	r3, s15
 8004262:	b29b      	uxth	r3, r3
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800426c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004278:	ee17 3a90 	vmov	r3, s15
 800427c:	827b      	strh	r3, [r7, #18]
		out[i] = s;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	8a7a      	ldrh	r2, [r7, #18]
 8004288:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < ns; i++) {
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3301      	adds	r3, #1
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	893b      	ldrh	r3, [r7, #8]
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	429a      	cmp	r2, r3
 8004296:	db89      	blt.n	80041ac <wavetable_create_triangle+0x1c>
	}
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042a4:	3fe00000 	.word	0x3fe00000

080042a8 <wavetable_create_sawtooth>:

void wavetable_create_sawtooth(uint16_t* out, uint16_t ref_v, uint16_t ns, float amp) {
 80042a8:	b5b0      	push	{r4, r5, r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	460b      	mov	r3, r1
 80042b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80042b6:	817b      	strh	r3, [r7, #10]
 80042b8:	4613      	mov	r3, r2
 80042ba:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < ns; i++) {
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
 80042c0:	e07b      	b.n	80043ba <wavetable_create_sawtooth+0x112>
		float saw = 2 * ((float)i/ns - floor(0.5 + (float)i/ns));
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042cc:	893b      	ldrh	r3, [r7, #8]
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80042da:	ee16 0a90 	vmov	r0, s13
 80042de:	f7fc f8d7 	bl	8000490 <__aeabi_f2d>
 80042e2:	4604      	mov	r4, r0
 80042e4:	460d      	mov	r5, r1
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	ee07 3a90 	vmov	s15, r3
 80042ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042f0:	893b      	ldrh	r3, [r7, #8]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80042fe:	ee16 0a90 	vmov	r0, s13
 8004302:	f7fc f8c5 	bl	8000490 <__aeabi_f2d>
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	4b31      	ldr	r3, [pc, #196]	; (80043d0 <wavetable_create_sawtooth+0x128>)
 800430c:	f7fb ff62 	bl	80001d4 <__adddf3>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	ec43 2b17 	vmov	d7, r2, r3
 8004318:	eeb0 0a47 	vmov.f32	s0, s14
 800431c:	eef0 0a67 	vmov.f32	s1, s15
 8004320:	f009 fcf6 	bl	800dd10 <floor>
 8004324:	ec53 2b10 	vmov	r2, r3, d0
 8004328:	4620      	mov	r0, r4
 800432a:	4629      	mov	r1, r5
 800432c:	f7fb ff50 	bl	80001d0 <__aeabi_dsub>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4610      	mov	r0, r2
 8004336:	4619      	mov	r1, r3
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	f7fb ff4a 	bl	80001d4 <__adddf3>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	f7fc fbd2 	bl	8000af0 <__aeabi_d2f>
 800434c:	4603      	mov	r3, r0
 800434e:	61bb      	str	r3, [r7, #24]
		float scaled = saw * ((ref_v + 1)/2);
 8004350:	897b      	ldrh	r3, [r7, #10]
 8004352:	3301      	adds	r3, #1
 8004354:	0fda      	lsrs	r2, r3, #31
 8004356:	4413      	add	r3, r2
 8004358:	105b      	asrs	r3, r3, #1
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004362:	ed97 7a06 	vldr	s14, [r7, #24]
 8004366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436a:	edc7 7a05 	vstr	s15, [r7, #20]
		uint16_t s = (uint16_t)(scaled + ref_v/2) * amp;
 800436e:	897b      	ldrh	r3, [r7, #10]
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	b29b      	uxth	r3, r3
 8004374:	ee07 3a90 	vmov	s15, r3
 8004378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800437c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004388:	ee17 3a90 	vmov	r3, s15
 800438c:	b29b      	uxth	r3, r3
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004396:	edd7 7a01 	vldr	s15, [r7, #4]
 800439a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043a2:	ee17 3a90 	vmov	r3, s15
 80043a6:	827b      	strh	r3, [r7, #18]
		out[i] = s;
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	8a7a      	ldrh	r2, [r7, #18]
 80043b2:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < ns; i++) {
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	3301      	adds	r3, #1
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	893b      	ldrh	r3, [r7, #8]
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	429a      	cmp	r2, r3
 80043c0:	f6ff af7f 	blt.w	80042c2 <wavetable_create_sawtooth+0x1a>
	}
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bdb0      	pop	{r4, r5, r7, pc}
 80043ce:	bf00      	nop
 80043d0:	3fe00000 	.word	0x3fe00000

080043d4 <wavetable_create_bowsaw>:

void wavetable_create_bowsaw(uint16_t* out, uint16_t ref_v, uint16_t ns, float amp, uint16_t split_i) {
 80043d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d8:	b09f      	sub	sp, #124	; 0x7c
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6478      	str	r0, [r7, #68]	; 0x44
 80043de:	4610      	mov	r0, r2
 80043e0:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
 80043e4:	461a      	mov	r2, r3
 80043e6:	460b      	mov	r3, r1
 80043e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80043ec:	4603      	mov	r3, r0
 80043ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80043f2:	4613      	mov	r3, r2
 80043f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80043f6:	466b      	mov	r3, sp
 80043f8:	461e      	mov	r6, r3
	uint16_t tmp_sin[ns - split_i];
 80043fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80043fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004400:	1ad1      	subs	r1, r2, r3
 8004402:	1e4b      	subs	r3, r1, #1
 8004404:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004406:	460a      	mov	r2, r1
 8004408:	2300      	movs	r3, #0
 800440a:	4614      	mov	r4, r2
 800440c:	461d      	mov	r5, r3
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	012b      	lsls	r3, r5, #4
 8004418:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800441c:	0122      	lsls	r2, r4, #4
 800441e:	460a      	mov	r2, r1
 8004420:	2300      	movs	r3, #0
 8004422:	4690      	mov	r8, r2
 8004424:	4699      	mov	r9, r3
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8004432:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8004436:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800443a:	460b      	mov	r3, r1
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	3307      	adds	r3, #7
 8004440:	08db      	lsrs	r3, r3, #3
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	ebad 0d03 	sub.w	sp, sp, r3
 8004448:	466b      	mov	r3, sp
 800444a:	3301      	adds	r3, #1
 800444c:	085b      	lsrs	r3, r3, #1
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	673b      	str	r3, [r7, #112]	; 0x70
	wavetable_create_sine(tmp_sin, ref_v, ns - split_i, amp);
 8004452:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004456:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	b29a      	uxth	r2, r3
 800445c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004460:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004464:	4619      	mov	r1, r3
 8004466:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004468:	f7ff fdd6 	bl	8004018 <wavetable_create_sine>

	uint16_t tmp_square[ns];
 800446c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004470:	460b      	mov	r3, r1
 8004472:	3b01      	subs	r3, #1
 8004474:	677b      	str	r3, [r7, #116]	; 0x74
 8004476:	b28b      	uxth	r3, r1
 8004478:	2200      	movs	r2, #0
 800447a:	469a      	mov	sl, r3
 800447c:	4693      	mov	fp, r2
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800448a:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800448e:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8004492:	b28b      	uxth	r3, r1
 8004494:	2200      	movs	r2, #0
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
 8004498:	637a      	str	r2, [r7, #52]	; 0x34
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044a6:	4628      	mov	r0, r5
 80044a8:	0103      	lsls	r3, r0, #4
 80044aa:	4620      	mov	r0, r4
 80044ac:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80044b0:	4620      	mov	r0, r4
 80044b2:	0102      	lsls	r2, r0, #4
 80044b4:	460b      	mov	r3, r1
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	3307      	adds	r3, #7
 80044ba:	08db      	lsrs	r3, r3, #3
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	ebad 0d03 	sub.w	sp, sp, r3
 80044c2:	466b      	mov	r3, sp
 80044c4:	3301      	adds	r3, #1
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	667b      	str	r3, [r7, #100]	; 0x64
	wavetable_create_square(tmp_square, ref_v, ns, amp);
 80044cc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80044d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80044d4:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80044d8:	4619      	mov	r1, r3
 80044da:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80044dc:	f7ff fe14 	bl	8004108 <wavetable_create_square>

	uint16_t tmp_tri[ns];
 80044e0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80044e4:	460b      	mov	r3, r1
 80044e6:	3b01      	subs	r3, #1
 80044e8:	663b      	str	r3, [r7, #96]	; 0x60
 80044ea:	b28b      	uxth	r3, r1
 80044ec:	2200      	movs	r2, #0
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80044fe:	4628      	mov	r0, r5
 8004500:	0103      	lsls	r3, r0, #4
 8004502:	4620      	mov	r0, r4
 8004504:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8004508:	4620      	mov	r0, r4
 800450a:	0102      	lsls	r2, r0, #4
 800450c:	b28b      	uxth	r3, r1
 800450e:	2200      	movs	r2, #0
 8004510:	623b      	str	r3, [r7, #32]
 8004512:	627a      	str	r2, [r7, #36]	; 0x24
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004520:	4628      	mov	r0, r5
 8004522:	0103      	lsls	r3, r0, #4
 8004524:	4620      	mov	r0, r4
 8004526:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800452a:	4620      	mov	r0, r4
 800452c:	0102      	lsls	r2, r0, #4
 800452e:	460b      	mov	r3, r1
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	3307      	adds	r3, #7
 8004534:	08db      	lsrs	r3, r3, #3
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	ebad 0d03 	sub.w	sp, sp, r3
 800453c:	466b      	mov	r3, sp
 800453e:	3301      	adds	r3, #1
 8004540:	085b      	lsrs	r3, r3, #1
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	65fb      	str	r3, [r7, #92]	; 0x5c
	wavetable_create_triangle(tmp_tri, ref_v, ns, amp);
 8004546:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800454a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800454e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004552:	4619      	mov	r1, r3
 8004554:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004556:	f7ff fe1b 	bl	8004190 <wavetable_create_triangle>

	uint16_t tmp_saw[split_i];
 800455a:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 800455c:	460b      	mov	r3, r1
 800455e:	3b01      	subs	r3, #1
 8004560:	65bb      	str	r3, [r7, #88]	; 0x58
 8004562:	b28b      	uxth	r3, r1
 8004564:	2200      	movs	r2, #0
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	61fa      	str	r2, [r7, #28]
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004576:	4628      	mov	r0, r5
 8004578:	0103      	lsls	r3, r0, #4
 800457a:	4620      	mov	r0, r4
 800457c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8004580:	4620      	mov	r0, r4
 8004582:	0102      	lsls	r2, r0, #4
 8004584:	b28b      	uxth	r3, r1
 8004586:	2200      	movs	r2, #0
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	617a      	str	r2, [r7, #20]
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004598:	4628      	mov	r0, r5
 800459a:	0103      	lsls	r3, r0, #4
 800459c:	4620      	mov	r0, r4
 800459e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80045a2:	4620      	mov	r0, r4
 80045a4:	0102      	lsls	r2, r0, #4
 80045a6:	460b      	mov	r3, r1
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	3307      	adds	r3, #7
 80045ac:	08db      	lsrs	r3, r3, #3
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	ebad 0d03 	sub.w	sp, sp, r3
 80045b4:	466b      	mov	r3, sp
 80045b6:	3301      	adds	r3, #1
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	657b      	str	r3, [r7, #84]	; 0x54
	wavetable_create_sawtooth(tmp_saw, ref_v, split_i, amp);
 80045be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80045c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80045c4:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80045c8:	4619      	mov	r1, r3
 80045ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80045cc:	f7ff fe6c 	bl	80042a8 <wavetable_create_sawtooth>

	uint16_t tmp_saw2[split_i/2];
 80045d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4619      	mov	r1, r3
 80045d8:	1e4b      	subs	r3, r1, #1
 80045da:	653b      	str	r3, [r7, #80]	; 0x50
 80045dc:	460a      	mov	r2, r1
 80045de:	2300      	movs	r3, #0
 80045e0:	60ba      	str	r2, [r7, #8]
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045f0:	4628      	mov	r0, r5
 80045f2:	0103      	lsls	r3, r0, #4
 80045f4:	4620      	mov	r0, r4
 80045f6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80045fa:	4620      	mov	r0, r4
 80045fc:	0102      	lsls	r2, r0, #4
 80045fe:	460a      	mov	r2, r1
 8004600:	2300      	movs	r3, #0
 8004602:	603a      	str	r2, [r7, #0]
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004612:	4628      	mov	r0, r5
 8004614:	0103      	lsls	r3, r0, #4
 8004616:	4620      	mov	r0, r4
 8004618:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800461c:	4620      	mov	r0, r4
 800461e:	0102      	lsls	r2, r0, #4
 8004620:	460b      	mov	r3, r1
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	3307      	adds	r3, #7
 8004626:	08db      	lsrs	r3, r3, #3
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	ebad 0d03 	sub.w	sp, sp, r3
 800462e:	466b      	mov	r3, sp
 8004630:	3301      	adds	r3, #1
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	64fb      	str	r3, [r7, #76]	; 0x4c
	wavetable_create_sawtooth(tmp_saw2, ref_v, split_i/2, amp);
 8004638:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004642:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004646:	4619      	mov	r1, r3
 8004648:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800464a:	f7ff fe2d 	bl	80042a8 <wavetable_create_sawtooth>

	for (uint16_t i = 0; i < split_i; ++i) {
 800464e:	2300      	movs	r3, #0
 8004650:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004654:	e00f      	b.n	8004676 <wavetable_create_bowsaw+0x2a2>
		out[i] = tmp_saw[i];
 8004656:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 800465a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004662:	4413      	add	r3, r2
 8004664:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004666:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800466a:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < split_i; ++i) {
 800466c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004670:	3301      	adds	r3, #1
 8004672:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004676:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 800467a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800467c:	429a      	cmp	r2, r3
 800467e:	d3ea      	bcc.n	8004656 <wavetable_create_bowsaw+0x282>

//	for (uint16_t i = split_i/2; i < split_i; ++i) {
//		out[i] = tmp_saw2[i];
//	}

	for (uint16_t i = split_i; i < ns-split_i; ++i) {
 8004680:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004682:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004686:	e00f      	b.n	80046a8 <wavetable_create_bowsaw+0x2d4>
		out[i] = tmp_sin[i];
 8004688:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 800468c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004694:	4413      	add	r3, r2
 8004696:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004698:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800469c:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = split_i; i < ns-split_i; ++i) {
 800469e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80046a2:	3301      	adds	r3, #1
 80046a4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80046a8:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80046ac:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80046b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80046b2:	1acb      	subs	r3, r1, r3
 80046b4:	429a      	cmp	r2, r3
 80046b6:	dbe7      	blt.n	8004688 <wavetable_create_bowsaw+0x2b4>
 80046b8:	46b5      	mov	sp, r6
	}
}
 80046ba:	bf00      	nop
 80046bc:	377c      	adds	r7, #124	; 0x7c
 80046be:	46bd      	mov	sp, r7
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080046c4 <filter_hp_RC_init>:

uint16_t filter_hp_compute_fc(float R, float C);
float filter_hp_compute_R(float fc, float C);
float filter_hp_compute_C(float fc, float R);

void filter_hp_RC_init(float gain, float delta_t) {
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80046ce:	edc7 0a00 	vstr	s1, [r7]
	if (delta_t >= 1 || delta_t <= 0)
 80046d2:	edd7 7a00 	vldr	s15, [r7]
 80046d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e2:	da06      	bge.n	80046f2 <filter_hp_RC_init+0x2e>
 80046e4:	edd7 7a00 	vldr	s15, [r7]
 80046e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f0:	d803      	bhi.n	80046fa <filter_hp_RC_init+0x36>
		hp_filter.delta_t = DELTA_T_DEFAULT;
 80046f2:	4a0b      	ldr	r2, [pc, #44]	; (8004720 <filter_hp_RC_init+0x5c>)
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <filter_hp_RC_init+0x60>)
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	e002      	b.n	8004700 <filter_hp_RC_init+0x3c>
	else
		hp_filter.delta_t = delta_t;
 80046fa:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <filter_hp_RC_init+0x60>)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6093      	str	r3, [r2, #8]

	hp_filter.prev_y = 0;
 8004700:	4b08      	ldr	r3, [pc, #32]	; (8004724 <filter_hp_RC_init+0x60>)
 8004702:	2200      	movs	r2, #0
 8004704:	801a      	strh	r2, [r3, #0]
	hp_filter.gain = gain;
 8004706:	4a07      	ldr	r2, [pc, #28]	; (8004724 <filter_hp_RC_init+0x60>)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6153      	str	r3, [r2, #20]
	hp_active = true;
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <filter_hp_RC_init+0x64>)
 800470e:	2201      	movs	r2, #1
 8004710:	701a      	strb	r2, [r3, #0]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	37aec33e 	.word	0x37aec33e
 8004724:	20010d5c 	.word	0x20010d5c
 8004728:	20010d78 	.word	0x20010d78

0800472c <filter_lp_RC_init>:

static filter_lp_RC1_t lp_filter;
static bool lp_active;


void filter_lp_RC_init(float gain, float delta_t) {
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	ed87 0a01 	vstr	s0, [r7, #4]
 8004736:	edc7 0a00 	vstr	s1, [r7]
	if (delta_t >= 1 || delta_t <= 0)
 800473a:	edd7 7a00 	vldr	s15, [r7]
 800473e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004742:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474a:	da06      	bge.n	800475a <filter_lp_RC_init+0x2e>
 800474c:	edd7 7a00 	vldr	s15, [r7]
 8004750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004758:	d803      	bhi.n	8004762 <filter_lp_RC_init+0x36>
		lp_filter.delta_t = delta_t;
 800475a:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <filter_lp_RC_init+0x5c>)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	6053      	str	r3, [r2, #4]
 8004760:	e002      	b.n	8004768 <filter_lp_RC_init+0x3c>
	else
		lp_filter.delta_t = DELTA_T_DEFAULT;
 8004762:	4a0a      	ldr	r2, [pc, #40]	; (800478c <filter_lp_RC_init+0x60>)
 8004764:	4b08      	ldr	r3, [pc, #32]	; (8004788 <filter_lp_RC_init+0x5c>)
 8004766:	605a      	str	r2, [r3, #4]

	lp_filter.prev_y = 0;
 8004768:	4b07      	ldr	r3, [pc, #28]	; (8004788 <filter_lp_RC_init+0x5c>)
 800476a:	2200      	movs	r2, #0
 800476c:	801a      	strh	r2, [r3, #0]
	lp_filter.gain = gain;
 800476e:	4a06      	ldr	r2, [pc, #24]	; (8004788 <filter_lp_RC_init+0x5c>)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6113      	str	r3, [r2, #16]
	lp_active = true;
 8004774:	4b06      	ldr	r3, [pc, #24]	; (8004790 <filter_lp_RC_init+0x64>)
 8004776:	2201      	movs	r2, #1
 8004778:	701a      	strb	r2, [r3, #0]
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20010d7c 	.word	0x20010d7c
 800478c:	37aec33e 	.word	0x37aec33e
 8004790:	20010d94 	.word	0x20010d94

08004794 <filter_lp_update>:
void filter_lp_update() {
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
	static float fc;
	fc = 0xFFF - mixer_get_filter_fc_low();
 8004798:	f7fd ff76 	bl	8002688 <mixer_get_filter_fc_low>
 800479c:	4603      	mov	r3, r0
 800479e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80047a2:	330f      	adds	r3, #15
 80047a4:	ee07 3a90 	vmov	s15, r3
 80047a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ac:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <filter_lp_update+0x4c>)
 80047ae:	edc3 7a00 	vstr	s15, [r3]
	lp_filter.fc = fc;
 80047b2:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <filter_lp_update+0x4c>)
 80047b4:	edd3 7a00 	vldr	s15, [r3]
 80047b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047bc:	ee17 3a90 	vmov	r3, s15
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	4b08      	ldr	r3, [pc, #32]	; (80047e4 <filter_lp_update+0x50>)
 80047c4:	805a      	strh	r2, [r3, #2]
	filter_lp_set_alpha(fc);
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <filter_lp_update+0x4c>)
 80047c8:	edd3 7a00 	vldr	s15, [r3]
 80047cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d0:	ee17 3a90 	vmov	r3, s15
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f806 	bl	80047e8 <filter_lp_set_alpha>
}
 80047dc:	bf00      	nop
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20010d98 	.word	0x20010d98
 80047e4:	20010d7c 	.word	0x20010d7c

080047e8 <filter_lp_set_alpha>:

void filter_lp_RC_set_C(float C) {
	lp_filter.C = C;
}

void filter_lp_set_alpha(uint16_t fc) {
 80047e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	4603      	mov	r3, r0
 80047f2:	80fb      	strh	r3, [r7, #6]

	lp_filter.alpha = 2 * M_PI * fc * lp_filter.delta_t/(2* M_PI * fc * lp_filter.delta_t + 1);
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fb fe38 	bl	800046c <__aeabi_i2d>
 80047fc:	a326      	add	r3, pc, #152	; (adr r3, 8004898 <filter_lp_set_alpha+0xb0>)
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f7fb fe9d 	bl	8000540 <__aeabi_dmul>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4614      	mov	r4, r2
 800480c:	461d      	mov	r5, r3
 800480e:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <filter_lp_set_alpha+0xb8>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	4618      	mov	r0, r3
 8004814:	f7fb fe3c 	bl	8000490 <__aeabi_f2d>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4620      	mov	r0, r4
 800481e:	4629      	mov	r1, r5
 8004820:	f7fb fe8e 	bl	8000540 <__aeabi_dmul>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4614      	mov	r4, r2
 800482a:	461d      	mov	r5, r3
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fb fe1c 	bl	800046c <__aeabi_i2d>
 8004834:	a318      	add	r3, pc, #96	; (adr r3, 8004898 <filter_lp_set_alpha+0xb0>)
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f7fb fe81 	bl	8000540 <__aeabi_dmul>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4690      	mov	r8, r2
 8004844:	4699      	mov	r9, r3
 8004846:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <filter_lp_set_alpha+0xb8>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4618      	mov	r0, r3
 800484c:	f7fb fe20 	bl	8000490 <__aeabi_f2d>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4640      	mov	r0, r8
 8004856:	4649      	mov	r1, r9
 8004858:	f7fb fe72 	bl	8000540 <__aeabi_dmul>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <filter_lp_set_alpha+0xbc>)
 800486a:	f7fb fcb3 	bl	80001d4 <__adddf3>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4620      	mov	r0, r4
 8004874:	4629      	mov	r1, r5
 8004876:	f7fb ff8d 	bl	8000794 <__aeabi_ddiv>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4610      	mov	r0, r2
 8004880:	4619      	mov	r1, r3
 8004882:	f7fc f935 	bl	8000af0 <__aeabi_d2f>
 8004886:	4603      	mov	r3, r0
 8004888:	4a05      	ldr	r2, [pc, #20]	; (80048a0 <filter_lp_set_alpha+0xb8>)
 800488a:	6153      	str	r3, [r2, #20]
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004896:	bf00      	nop
 8004898:	54442d18 	.word	0x54442d18
 800489c:	401921fb 	.word	0x401921fb
 80048a0:	20010d7c 	.word	0x20010d7c
 80048a4:	3ff00000 	.word	0x3ff00000

080048a8 <filter_res_init>:
static float y_buff[Y_LEN];
static float x_buff[X_LEN];

void shift(float inp, float* buff, uint16_t buff_len);

void filter_res_init() {
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
    fs = 44100;
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <filter_res_init+0x38>)
 80048ae:	f64a 4244 	movw	r2, #44100	; 0xac44
 80048b2:	801a      	strh	r2, [r3, #0]
    Ts = 1.0f/fs;
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <filter_res_init+0x38>)
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	ee07 3a90 	vmov	s15, r3
 80048bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <filter_res_init+0x3c>)
 80048ca:	edc3 7a00 	vstr	s15, [r3]
    fc = 2047; //needed to init LFO
 80048ce:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <filter_res_init+0x40>)
 80048d0:	4a06      	ldr	r2, [pc, #24]	; (80048ec <filter_res_init+0x44>)
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20010da0 	.word	0x20010da0
 80048e4:	20010da4 	.word	0x20010da4
 80048e8:	20010d9c 	.word	0x20010d9c
 80048ec:	44ffe000 	.word	0x44ffe000

080048f0 <filter_res_coeff_update>:
    out = x0 + x1 + x2 - y1 - y2;

    return out;
}

void filter_res_coeff_update() {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	ed2d 8b02 	vpush	{d8}
 80048f6:	af00      	add	r7, sp, #0
    };

    // uint16_t mixer_fc = mixer_get_filter_fc_low();

    // fc = OSC_apply(mixer_fc, 1000, LFO_TREMOLO);
    fc = OSC_res_update();
 80048f8:	f7fc fe72 	bl	80015e0 <OSC_res_update>
 80048fc:	4603      	mov	r3, r0
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004906:	4b58      	ldr	r3, [pc, #352]	; (8004a68 <filter_res_coeff_update+0x178>)
 8004908:	edc3 7a00 	vstr	s15, [r3]

    // fc = 440;
    r_mix = (float)mixer_get_filter_fc_high()/0xFFF;
 800490c:	f7fd fed2 	bl	80026b4 <mixer_get_filter_fc_high>
 8004910:	4603      	mov	r3, r0
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800491a:	eddf 6a54 	vldr	s13, [pc, #336]	; 8004a6c <filter_res_coeff_update+0x17c>
 800491e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004922:	4b53      	ldr	r3, [pc, #332]	; (8004a70 <filter_res_coeff_update+0x180>)
 8004924:	edc3 7a00 	vstr	s15, [r3]

    r_scaler = roundf(r_mix/0.1);
 8004928:	4b51      	ldr	r3, [pc, #324]	; (8004a70 <filter_res_coeff_update+0x180>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7fb fdaf 	bl	8000490 <__aeabi_f2d>
 8004932:	a347      	add	r3, pc, #284	; (adr r3, 8004a50 <filter_res_coeff_update+0x160>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f7fb ff2c 	bl	8000794 <__aeabi_ddiv>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	f7fc f8d4 	bl	8000af0 <__aeabi_d2f>
 8004948:	4603      	mov	r3, r0
 800494a:	ee00 3a10 	vmov	s0, r3
 800494e:	f009 fafb 	bl	800df48 <roundf>
 8004952:	eef0 7a40 	vmov.f32	s15, s0
 8004956:	4b47      	ldr	r3, [pc, #284]	; (8004a74 <filter_res_coeff_update+0x184>)
 8004958:	edc3 7a00 	vstr	s15, [r3]

    r = r_index[(int)r_scaler];
 800495c:	4b45      	ldr	r3, [pc, #276]	; (8004a74 <filter_res_coeff_update+0x184>)
 800495e:	edd3 7a00 	vldr	s15, [r3]
 8004962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004966:	ee17 3a90 	vmov	r3, s15
 800496a:	4a43      	ldr	r2, [pc, #268]	; (8004a78 <filter_res_coeff_update+0x188>)
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a42      	ldr	r2, [pc, #264]	; (8004a7c <filter_res_coeff_update+0x18c>)
 8004974:	6013      	str	r3, [r2, #0]
    if (r > 1) r = 1;
 8004976:	4b41      	ldr	r3, [pc, #260]	; (8004a7c <filter_res_coeff_update+0x18c>)
 8004978:	edd3 7a00 	vldr	s15, [r3]
 800497c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004988:	dd03      	ble.n	8004992 <filter_res_coeff_update+0xa2>
 800498a:	4b3c      	ldr	r3, [pc, #240]	; (8004a7c <filter_res_coeff_update+0x18c>)
 800498c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004990:	601a      	str	r2, [r3, #0]

    r = 0.99;
 8004992:	4b3a      	ldr	r3, [pc, #232]	; (8004a7c <filter_res_coeff_update+0x18c>)
 8004994:	4a3a      	ldr	r2, [pc, #232]	; (8004a80 <filter_res_coeff_update+0x190>)
 8004996:	601a      	str	r2, [r3, #0]

    a1 = -2.0f * r * cosf(2.0f * 3.1415 * fc/44100);
 8004998:	4b38      	ldr	r3, [pc, #224]	; (8004a7c <filter_res_coeff_update+0x18c>)
 800499a:	edd3 7a00 	vldr	s15, [r3]
 800499e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80049a2:	ee27 8a87 	vmul.f32	s16, s15, s14
 80049a6:	4b30      	ldr	r3, [pc, #192]	; (8004a68 <filter_res_coeff_update+0x178>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fb fd70 	bl	8000490 <__aeabi_f2d>
 80049b0:	a329      	add	r3, pc, #164	; (adr r3, 8004a58 <filter_res_coeff_update+0x168>)
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f7fb fdc3 	bl	8000540 <__aeabi_dmul>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4610      	mov	r0, r2
 80049c0:	4619      	mov	r1, r3
 80049c2:	a327      	add	r3, pc, #156	; (adr r3, 8004a60 <filter_res_coeff_update+0x170>)
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f7fb fee4 	bl	8000794 <__aeabi_ddiv>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4610      	mov	r0, r2
 80049d2:	4619      	mov	r1, r3
 80049d4:	f7fc f88c 	bl	8000af0 <__aeabi_d2f>
 80049d8:	4603      	mov	r3, r0
 80049da:	ee00 3a10 	vmov	s0, r3
 80049de:	f009 fa6f 	bl	800dec0 <cosf>
 80049e2:	eef0 7a40 	vmov.f32	s15, s0
 80049e6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80049ea:	4b26      	ldr	r3, [pc, #152]	; (8004a84 <filter_res_coeff_update+0x194>)
 80049ec:	edc3 7a00 	vstr	s15, [r3]
    a2 = r*r;
 80049f0:	4b22      	ldr	r3, [pc, #136]	; (8004a7c <filter_res_coeff_update+0x18c>)
 80049f2:	ed93 7a00 	vldr	s14, [r3]
 80049f6:	4b21      	ldr	r3, [pc, #132]	; (8004a7c <filter_res_coeff_update+0x18c>)
 80049f8:	edd3 7a00 	vldr	s15, [r3]
 80049fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a00:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <filter_res_coeff_update+0x198>)
 8004a02:	edc3 7a00 	vstr	s15, [r3]

    b0 = (1 - r*r)/2;
 8004a06:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <filter_res_coeff_update+0x18c>)
 8004a08:	ed93 7a00 	vldr	s14, [r3]
 8004a0c:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <filter_res_coeff_update+0x18c>)
 8004a0e:	edd3 7a00 	vldr	s15, [r3]
 8004a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a26:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <filter_res_coeff_update+0x19c>)
 8004a28:	edc3 7a00 	vstr	s15, [r3]
    // b0 = 1;
    b1 = 0;
 8004a2c:	4b18      	ldr	r3, [pc, #96]	; (8004a90 <filter_res_coeff_update+0x1a0>)
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
    b2 = -b0;
 8004a34:	4b15      	ldr	r3, [pc, #84]	; (8004a8c <filter_res_coeff_update+0x19c>)
 8004a36:	edd3 7a00 	vldr	s15, [r3]
 8004a3a:	eef1 7a67 	vneg.f32	s15, s15
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <filter_res_coeff_update+0x1a4>)
 8004a40:	edc3 7a00 	vstr	s15, [r3]
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	ecbd 8b02 	vpop	{d8}
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	9999999a 	.word	0x9999999a
 8004a54:	3fb99999 	.word	0x3fb99999
 8004a58:	c083126f 	.word	0xc083126f
 8004a5c:	401921ca 	.word	0x401921ca
 8004a60:	00000000 	.word	0x00000000
 8004a64:	40e58880 	.word	0x40e58880
 8004a68:	20010d9c 	.word	0x20010d9c
 8004a6c:	457ff000 	.word	0x457ff000
 8004a70:	20010dc0 	.word	0x20010dc0
 8004a74:	20010dc4 	.word	0x20010dc4
 8004a78:	20000028 	.word	0x20000028
 8004a7c:	20010da8 	.word	0x20010da8
 8004a80:	3f7d70a4 	.word	0x3f7d70a4
 8004a84:	20010dac 	.word	0x20010dac
 8004a88:	20010db0 	.word	0x20010db0
 8004a8c:	20010db4 	.word	0x20010db4
 8004a90:	20010db8 	.word	0x20010db8
 8004a94:	20010dbc 	.word	0x20010dbc

08004a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ad0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a9c:	480d      	ldr	r0, [pc, #52]	; (8004ad4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a9e:	490e      	ldr	r1, [pc, #56]	; (8004ad8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004aa0:	4a0e      	ldr	r2, [pc, #56]	; (8004adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004aa4:	e002      	b.n	8004aac <LoopCopyDataInit>

08004aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004aaa:	3304      	adds	r3, #4

08004aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ab0:	d3f9      	bcc.n	8004aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ab2:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ab4:	4c0b      	ldr	r4, [pc, #44]	; (8004ae4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ab8:	e001      	b.n	8004abe <LoopFillZerobss>

08004aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004abc:	3204      	adds	r2, #4

08004abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ac0:	d3fb      	bcc.n	8004aba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ac2:	f7fe ffd3 	bl	8003a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ac6:	f008 ffdb 	bl	800da80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aca:	f7fd f815 	bl	8001af8 <main>
  bx  lr    
 8004ace:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ad8:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8004adc:	08011308 	.word	0x08011308
  ldr r2, =_sbss
 8004ae0:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8004ae4:	2001158c 	.word	0x2001158c

08004ae8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ae8:	e7fe      	b.n	8004ae8 <CAN1_RX0_IRQHandler>
	...

08004aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004af0:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <HAL_Init+0x40>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a0d      	ldr	r2, [pc, #52]	; (8004b2c <HAL_Init+0x40>)
 8004af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004afc:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <HAL_Init+0x40>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <HAL_Init+0x40>)
 8004b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b08:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <HAL_Init+0x40>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a07      	ldr	r2, [pc, #28]	; (8004b2c <HAL_Init+0x40>)
 8004b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b14:	2003      	movs	r0, #3
 8004b16:	f000 fe71 	bl	80057fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	f000 f808 	bl	8004b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b20:	f7fe fcb2 	bl	8003488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40023c00 	.word	0x40023c00

08004b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b38:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_InitTick+0x54>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <HAL_InitTick+0x58>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	4619      	mov	r1, r3
 8004b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fe89 	bl	8005866 <HAL_SYSTICK_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e00e      	b.n	8004b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b0f      	cmp	r3, #15
 8004b62:	d80a      	bhi.n	8004b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b64:	2200      	movs	r2, #0
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b6c:	f000 fe51 	bl	8005812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b70:	4a06      	ldr	r2, [pc, #24]	; (8004b8c <HAL_InitTick+0x5c>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e000      	b.n	8004b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000004 	.word	0x20000004
 8004b88:	20000058 	.word	0x20000058
 8004b8c:	20000054 	.word	0x20000054

08004b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b94:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <HAL_IncTick+0x20>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <HAL_IncTick+0x24>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <HAL_IncTick+0x24>)
 8004ba2:	6013      	str	r3, [r2, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	20000058 	.word	0x20000058
 8004bb4:	20010dc8 	.word	0x20010dc8

08004bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  return uwTick;
 8004bbc:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <HAL_GetTick+0x14>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20010dc8 	.word	0x20010dc8

08004bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bd8:	f7ff ffee 	bl	8004bb8 <HAL_GetTick>
 8004bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004be8:	d005      	beq.n	8004bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bea:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <HAL_Delay+0x44>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bf6:	bf00      	nop
 8004bf8:	f7ff ffde 	bl	8004bb8 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d8f7      	bhi.n	8004bf8 <HAL_Delay+0x28>
  {
  }
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000058 	.word	0x20000058

08004c18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e033      	b.n	8004c96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d109      	bne.n	8004c4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fe fc4e 	bl	80034d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d118      	bne.n	8004c88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c5e:	f023 0302 	bic.w	r3, r3, #2
 8004c62:	f043 0202 	orr.w	r2, r3, #2
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fb6e 	bl	800534c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
 8004c7e:	f043 0201 	orr.w	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40
 8004c86:	e001      	b.n	8004c8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b086      	sub	sp, #24
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	2300      	movs	r3, #0
 8004cac:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d049      	beq.n	8004d68 <HAL_ADC_IRQHandler+0xca>
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d046      	beq.n	8004d68 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d105      	bne.n	8004cf2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d12b      	bne.n	8004d58 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d127      	bne.n	8004d58 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d006      	beq.n	8004d24 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d119      	bne.n	8004d58 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0220 	bic.w	r2, r2, #32
 8004d32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d105      	bne.n	8004d58 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	f043 0201 	orr.w	r2, r3, #1
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7fd fdfb 	bl	8002954 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f06f 0212 	mvn.w	r2, #18
 8004d66:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d76:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d057      	beq.n	8004e2e <HAL_ADC_IRQHandler+0x190>
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d054      	beq.n	8004e2e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d105      	bne.n	8004d9c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d139      	bne.n	8004e1e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d006      	beq.n	8004dc6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d12b      	bne.n	8004e1e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d124      	bne.n	8004e1e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d11d      	bne.n	8004e1e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d119      	bne.n	8004e1e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004df8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d105      	bne.n	8004e1e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f043 0201 	orr.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fc12 	bl	8005648 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 020c 	mvn.w	r2, #12
 8004e2c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d017      	beq.n	8004e74 <HAL_ADC_IRQHandler+0x1d6>
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d014      	beq.n	8004e74 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d10d      	bne.n	8004e74 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f93b 	bl	80050e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f06f 0201 	mvn.w	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e82:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d015      	beq.n	8004eb6 <HAL_ADC_IRQHandler+0x218>
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d012      	beq.n	8004eb6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e94:	f043 0202 	orr.w	r2, r3, #2
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0220 	mvn.w	r2, #32
 8004ea4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f924 	bl	80050f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0220 	mvn.w	r2, #32
 8004eb4:	601a      	str	r2, [r3, #0]
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_ADC_Start_DMA+0x1e>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e0e9      	b.n	80050b2 <HAL_ADC_Start_DMA+0x1f2>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d018      	beq.n	8004f26 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004f04:	4b6d      	ldr	r3, [pc, #436]	; (80050bc <HAL_ADC_Start_DMA+0x1fc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a6d      	ldr	r2, [pc, #436]	; (80050c0 <HAL_ADC_Start_DMA+0x200>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	0c9a      	lsrs	r2, r3, #18
 8004f10:	4613      	mov	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4413      	add	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004f18:	e002      	b.n	8004f20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f9      	bne.n	8004f1a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f34:	d107      	bne.n	8004f46 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f44:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	f040 80a1 	bne.w	8005098 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f94:	d106      	bne.n	8004fa4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	f023 0206 	bic.w	r2, r3, #6
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	645a      	str	r2, [r3, #68]	; 0x44
 8004fa2:	e002      	b.n	8004faa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fb2:	4b44      	ldr	r3, [pc, #272]	; (80050c4 <HAL_ADC_Start_DMA+0x204>)
 8004fb4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	4a43      	ldr	r2, [pc, #268]	; (80050c8 <HAL_ADC_Start_DMA+0x208>)
 8004fbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	4a42      	ldr	r2, [pc, #264]	; (80050cc <HAL_ADC_Start_DMA+0x20c>)
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	4a41      	ldr	r2, [pc, #260]	; (80050d0 <HAL_ADC_Start_DMA+0x210>)
 8004fcc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004fe6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ff6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	334c      	adds	r3, #76	; 0x4c
 8005002:	4619      	mov	r1, r3
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f000 fce8 	bl	80059dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	2b00      	cmp	r3, #0
 8005016:	d12a      	bne.n	800506e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a2d      	ldr	r2, [pc, #180]	; (80050d4 <HAL_ADC_Start_DMA+0x214>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d015      	beq.n	800504e <HAL_ADC_Start_DMA+0x18e>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a2c      	ldr	r2, [pc, #176]	; (80050d8 <HAL_ADC_Start_DMA+0x218>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d105      	bne.n	8005038 <HAL_ADC_Start_DMA+0x178>
 800502c:	4b25      	ldr	r3, [pc, #148]	; (80050c4 <HAL_ADC_Start_DMA+0x204>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a27      	ldr	r2, [pc, #156]	; (80050dc <HAL_ADC_Start_DMA+0x21c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d136      	bne.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
 8005042:	4b20      	ldr	r3, [pc, #128]	; (80050c4 <HAL_ADC_Start_DMA+0x204>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	d130      	bne.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d129      	bne.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	e020      	b.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <HAL_ADC_Start_DMA+0x214>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d11b      	bne.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d114      	bne.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005094:	609a      	str	r2, [r3, #8]
 8005096:	e00b      	b.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	f043 0210 	orr.w	r2, r3, #16
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a8:	f043 0201 	orr.w	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000004 	.word	0x20000004
 80050c0:	431bde83 	.word	0x431bde83
 80050c4:	40012300 	.word	0x40012300
 80050c8:	08005545 	.word	0x08005545
 80050cc:	080055ff 	.word	0x080055ff
 80050d0:	0800561b 	.word	0x0800561b
 80050d4:	40012000 	.word	0x40012000
 80050d8:	40012100 	.word	0x40012100
 80050dc:	40012200 	.word	0x40012200

080050e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_ADC_ConfigChannel+0x1c>
 8005120:	2302      	movs	r3, #2
 8005122:	e105      	b.n	8005330 <HAL_ADC_ConfigChannel+0x228>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b09      	cmp	r3, #9
 8005132:	d925      	bls.n	8005180 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68d9      	ldr	r1, [r3, #12]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	4613      	mov	r3, r2
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	4413      	add	r3, r2
 8005148:	3b1e      	subs	r3, #30
 800514a:	2207      	movs	r2, #7
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	43da      	mvns	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	400a      	ands	r2, r1
 8005158:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68d9      	ldr	r1, [r3, #12]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	b29b      	uxth	r3, r3
 800516a:	4618      	mov	r0, r3
 800516c:	4603      	mov	r3, r0
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	4403      	add	r3, r0
 8005172:	3b1e      	subs	r3, #30
 8005174:	409a      	lsls	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	e022      	b.n	80051c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6919      	ldr	r1, [r3, #16]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	b29b      	uxth	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	2207      	movs	r2, #7
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43da      	mvns	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	400a      	ands	r2, r1
 80051a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6919      	ldr	r1, [r3, #16]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	4618      	mov	r0, r3
 80051b6:	4603      	mov	r3, r0
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4403      	add	r3, r0
 80051bc:	409a      	lsls	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b06      	cmp	r3, #6
 80051cc:	d824      	bhi.n	8005218 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	3b05      	subs	r3, #5
 80051e0:	221f      	movs	r2, #31
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43da      	mvns	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	400a      	ands	r2, r1
 80051ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	4618      	mov	r0, r3
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	3b05      	subs	r3, #5
 800520a:	fa00 f203 	lsl.w	r2, r0, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	635a      	str	r2, [r3, #52]	; 0x34
 8005216:	e04c      	b.n	80052b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b0c      	cmp	r3, #12
 800521e:	d824      	bhi.n	800526a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	3b23      	subs	r3, #35	; 0x23
 8005232:	221f      	movs	r2, #31
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43da      	mvns	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	400a      	ands	r2, r1
 8005240:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	4618      	mov	r0, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	3b23      	subs	r3, #35	; 0x23
 800525c:	fa00 f203 	lsl.w	r2, r0, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
 8005268:	e023      	b.n	80052b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	3b41      	subs	r3, #65	; 0x41
 800527c:	221f      	movs	r2, #31
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43da      	mvns	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	400a      	ands	r2, r1
 800528a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	4618      	mov	r0, r3
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	3b41      	subs	r3, #65	; 0x41
 80052a6:	fa00 f203 	lsl.w	r2, r0, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052b2:	4b22      	ldr	r3, [pc, #136]	; (800533c <HAL_ADC_ConfigChannel+0x234>)
 80052b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a21      	ldr	r2, [pc, #132]	; (8005340 <HAL_ADC_ConfigChannel+0x238>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d109      	bne.n	80052d4 <HAL_ADC_ConfigChannel+0x1cc>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b12      	cmp	r3, #18
 80052c6:	d105      	bne.n	80052d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a19      	ldr	r2, [pc, #100]	; (8005340 <HAL_ADC_ConfigChannel+0x238>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d123      	bne.n	8005326 <HAL_ADC_ConfigChannel+0x21e>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d003      	beq.n	80052ee <HAL_ADC_ConfigChannel+0x1e6>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b11      	cmp	r3, #17
 80052ec:	d11b      	bne.n	8005326 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d111      	bne.n	8005326 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005302:	4b10      	ldr	r3, [pc, #64]	; (8005344 <HAL_ADC_ConfigChannel+0x23c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a10      	ldr	r2, [pc, #64]	; (8005348 <HAL_ADC_ConfigChannel+0x240>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	0c9a      	lsrs	r2, r3, #18
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005318:	e002      	b.n	8005320 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	3b01      	subs	r3, #1
 800531e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f9      	bne.n	800531a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	40012300 	.word	0x40012300
 8005340:	40012000 	.word	0x40012000
 8005344:	20000004 	.word	0x20000004
 8005348:	431bde83 	.word	0x431bde83

0800534c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005354:	4b79      	ldr	r3, [pc, #484]	; (800553c <ADC_Init+0x1f0>)
 8005356:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	431a      	orrs	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6859      	ldr	r1, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	021a      	lsls	r2, r3, #8
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80053a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6859      	ldr	r1, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6899      	ldr	r1, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	4a58      	ldr	r2, [pc, #352]	; (8005540 <ADC_Init+0x1f4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d022      	beq.n	800542a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6899      	ldr	r1, [r3, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6899      	ldr	r1, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	e00f      	b.n	800544a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005438:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005448:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0202 	bic.w	r2, r2, #2
 8005458:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6899      	ldr	r1, [r3, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	7e1b      	ldrb	r3, [r3, #24]
 8005464:	005a      	lsls	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01b      	beq.n	80054b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005486:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005496:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6859      	ldr	r1, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	3b01      	subs	r3, #1
 80054a4:	035a      	lsls	r2, r3, #13
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
 80054ae:	e007      	b.n	80054c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80054ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	3b01      	subs	r3, #1
 80054dc:	051a      	lsls	r2, r3, #20
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6899      	ldr	r1, [r3, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005502:	025a      	lsls	r2, r3, #9
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6899      	ldr	r1, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	029a      	lsls	r2, r3, #10
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	609a      	str	r2, [r3, #8]
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	40012300 	.word	0x40012300
 8005540:	0f000001 	.word	0x0f000001

08005544 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800555a:	2b00      	cmp	r3, #0
 800555c:	d13c      	bne.n	80055d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d12b      	bne.n	80055d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800557c:	2b00      	cmp	r3, #0
 800557e:	d127      	bne.n	80055d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800558a:	2b00      	cmp	r3, #0
 800558c:	d006      	beq.n	800559c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005598:	2b00      	cmp	r3, #0
 800559a:	d119      	bne.n	80055d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0220 	bic.w	r2, r2, #32
 80055aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d105      	bne.n	80055d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	f043 0201 	orr.w	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f7fd f9bf 	bl	8002954 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80055d6:	e00e      	b.n	80055f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff fd85 	bl	80050f4 <HAL_ADC_ErrorCallback>
}
 80055ea:	e004      	b.n	80055f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
}
 80055f6:	bf00      	nop
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7fd f997 	bl	8002940 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2240      	movs	r2, #64	; 0x40
 800562c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	f043 0204 	orr.w	r2, r3, #4
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f7ff fd5a 	bl	80050f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800566c:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <__NVIC_SetPriorityGrouping+0x44>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005678:	4013      	ands	r3, r2
 800567a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800568c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800568e:	4a04      	ldr	r2, [pc, #16]	; (80056a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	60d3      	str	r3, [r2, #12]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	e000ed00 	.word	0xe000ed00

080056a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056a8:	4b04      	ldr	r3, [pc, #16]	; (80056bc <__NVIC_GetPriorityGrouping+0x18>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	f003 0307 	and.w	r3, r3, #7
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	e000ed00 	.word	0xe000ed00

080056c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	db0b      	blt.n	80056ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	f003 021f 	and.w	r2, r3, #31
 80056d8:	4907      	ldr	r1, [pc, #28]	; (80056f8 <__NVIC_EnableIRQ+0x38>)
 80056da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	2001      	movs	r0, #1
 80056e2:	fa00 f202 	lsl.w	r2, r0, r2
 80056e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	e000e100 	.word	0xe000e100

080056fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	6039      	str	r1, [r7, #0]
 8005706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570c:	2b00      	cmp	r3, #0
 800570e:	db0a      	blt.n	8005726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	490c      	ldr	r1, [pc, #48]	; (8005748 <__NVIC_SetPriority+0x4c>)
 8005716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571a:	0112      	lsls	r2, r2, #4
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	440b      	add	r3, r1
 8005720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005724:	e00a      	b.n	800573c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	b2da      	uxtb	r2, r3
 800572a:	4908      	ldr	r1, [pc, #32]	; (800574c <__NVIC_SetPriority+0x50>)
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	3b04      	subs	r3, #4
 8005734:	0112      	lsls	r2, r2, #4
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	440b      	add	r3, r1
 800573a:	761a      	strb	r2, [r3, #24]
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	e000e100 	.word	0xe000e100
 800574c:	e000ed00 	.word	0xe000ed00

08005750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005750:	b480      	push	{r7}
 8005752:	b089      	sub	sp, #36	; 0x24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f1c3 0307 	rsb	r3, r3, #7
 800576a:	2b04      	cmp	r3, #4
 800576c:	bf28      	it	cs
 800576e:	2304      	movcs	r3, #4
 8005770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	3304      	adds	r3, #4
 8005776:	2b06      	cmp	r3, #6
 8005778:	d902      	bls.n	8005780 <NVIC_EncodePriority+0x30>
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	3b03      	subs	r3, #3
 800577e:	e000      	b.n	8005782 <NVIC_EncodePriority+0x32>
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43da      	mvns	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	401a      	ands	r2, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005798:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	fa01 f303 	lsl.w	r3, r1, r3
 80057a2:	43d9      	mvns	r1, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a8:	4313      	orrs	r3, r2
         );
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3724      	adds	r7, #36	; 0x24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057c8:	d301      	bcc.n	80057ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ca:	2301      	movs	r3, #1
 80057cc:	e00f      	b.n	80057ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057ce:	4a0a      	ldr	r2, [pc, #40]	; (80057f8 <SysTick_Config+0x40>)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057d6:	210f      	movs	r1, #15
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057dc:	f7ff ff8e 	bl	80056fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057e0:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <SysTick_Config+0x40>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057e6:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <SysTick_Config+0x40>)
 80057e8:	2207      	movs	r2, #7
 80057ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	e000e010 	.word	0xe000e010

080057fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ff29 	bl	800565c <__NVIC_SetPriorityGrouping>
}
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005812:	b580      	push	{r7, lr}
 8005814:	b086      	sub	sp, #24
 8005816:	af00      	add	r7, sp, #0
 8005818:	4603      	mov	r3, r0
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005824:	f7ff ff3e 	bl	80056a4 <__NVIC_GetPriorityGrouping>
 8005828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	6978      	ldr	r0, [r7, #20]
 8005830:	f7ff ff8e 	bl	8005750 <NVIC_EncodePriority>
 8005834:	4602      	mov	r2, r0
 8005836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800583a:	4611      	mov	r1, r2
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff ff5d 	bl	80056fc <__NVIC_SetPriority>
}
 8005842:	bf00      	nop
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	4603      	mov	r3, r0
 8005852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff ff31 	bl	80056c0 <__NVIC_EnableIRQ>
}
 800585e:	bf00      	nop
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b082      	sub	sp, #8
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff ffa2 	bl	80057b8 <SysTick_Config>
 8005874:	4603      	mov	r3, r0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800588c:	f7ff f994 	bl	8004bb8 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e099      	b.n	80059d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058bc:	e00f      	b.n	80058de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058be:	f7ff f97b 	bl	8004bb8 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b05      	cmp	r3, #5
 80058ca:	d908      	bls.n	80058de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2203      	movs	r2, #3
 80058d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e078      	b.n	80059d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e8      	bne.n	80058be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4b38      	ldr	r3, [pc, #224]	; (80059d8 <HAL_DMA_Init+0x158>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800590a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2b04      	cmp	r3, #4
 8005936:	d107      	bne.n	8005948 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	4313      	orrs	r3, r2
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0307 	bic.w	r3, r3, #7
 800595e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	2b04      	cmp	r3, #4
 8005970:	d117      	bne.n	80059a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00e      	beq.n	80059a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fa6f 	bl	8005e68 <DMA_CheckFifoParam>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2240      	movs	r2, #64	; 0x40
 8005994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800599e:	2301      	movs	r3, #1
 80059a0:	e016      	b.n	80059d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa26 	bl	8005dfc <DMA_CalcBaseAndBitshift>
 80059b0:	4603      	mov	r3, r0
 80059b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b8:	223f      	movs	r2, #63	; 0x3f
 80059ba:	409a      	lsls	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	f010803f 	.word	0xf010803f

080059dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_DMA_Start_IT+0x26>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e040      	b.n	8005a84 <HAL_DMA_Start_IT+0xa8>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d12f      	bne.n	8005a76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f9b8 	bl	8005da0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	223f      	movs	r2, #63	; 0x3f
 8005a36:	409a      	lsls	r2, r3
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0216 	orr.w	r2, r2, #22
 8005a4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0208 	orr.w	r2, r2, #8
 8005a62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	e005      	b.n	8005a82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a98:	4b8e      	ldr	r3, [pc, #568]	; (8005cd4 <HAL_DMA_IRQHandler+0x248>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a8e      	ldr	r2, [pc, #568]	; (8005cd8 <HAL_DMA_IRQHandler+0x24c>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	0a9b      	lsrs	r3, r3, #10
 8005aa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	409a      	lsls	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4013      	ands	r3, r2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01a      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d013      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0204 	bic.w	r2, r2, #4
 8005ade:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af0:	f043 0201 	orr.w	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afc:	2201      	movs	r2, #1
 8005afe:	409a      	lsls	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d012      	beq.n	8005b2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	f043 0202 	orr.w	r2, r3, #2
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b32:	2204      	movs	r2, #4
 8005b34:	409a      	lsls	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d012      	beq.n	8005b64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b50:	2204      	movs	r2, #4
 8005b52:	409a      	lsls	r2, r3
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5c:	f043 0204 	orr.w	r2, r3, #4
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b68:	2210      	movs	r2, #16
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d043      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d03c      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b86:	2210      	movs	r2, #16
 8005b88:	409a      	lsls	r2, r3
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d018      	beq.n	8005bce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d108      	bne.n	8005bbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d024      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
 8005bba:	e01f      	b.n	8005bfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01b      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
 8005bcc:	e016      	b.n	8005bfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d107      	bne.n	8005bec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0208 	bic.w	r2, r2, #8
 8005bea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c00:	2220      	movs	r2, #32
 8005c02:	409a      	lsls	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 808f 	beq.w	8005d2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8087 	beq.w	8005d2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c22:	2220      	movs	r2, #32
 8005c24:	409a      	lsls	r2, r3
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b05      	cmp	r3, #5
 8005c34:	d136      	bne.n	8005ca4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0216 	bic.w	r2, r2, #22
 8005c44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <HAL_DMA_IRQHandler+0x1da>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0208 	bic.w	r2, r2, #8
 8005c74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7a:	223f      	movs	r2, #63	; 0x3f
 8005c7c:	409a      	lsls	r2, r3
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d07e      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	4798      	blx	r3
        }
        return;
 8005ca2:	e079      	b.n	8005d98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01d      	beq.n	8005cee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10d      	bne.n	8005cdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d031      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
 8005cd0:	e02c      	b.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
 8005cd2:	bf00      	nop
 8005cd4:	20000004 	.word	0x20000004
 8005cd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d023      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
 8005cec:	e01e      	b.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10f      	bne.n	8005d1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0210 	bic.w	r2, r2, #16
 8005d0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d032      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d022      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2205      	movs	r2, #5
 8005d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0201 	bic.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d307      	bcc.n	8005d74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f2      	bne.n	8005d58 <HAL_DMA_IRQHandler+0x2cc>
 8005d72:	e000      	b.n	8005d76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005d74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	4798      	blx	r3
 8005d96:	e000      	b.n	8005d9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005d98:	bf00      	nop
    }
  }
}
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005dbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	2b40      	cmp	r3, #64	; 0x40
 8005dcc:	d108      	bne.n	8005de0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005dde:	e007      	b.n	8005df0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	60da      	str	r2, [r3, #12]
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	3b10      	subs	r3, #16
 8005e0c:	4a14      	ldr	r2, [pc, #80]	; (8005e60 <DMA_CalcBaseAndBitshift+0x64>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e16:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <DMA_CalcBaseAndBitshift+0x68>)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d909      	bls.n	8005e3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	1d1a      	adds	r2, r3, #4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	659a      	str	r2, [r3, #88]	; 0x58
 8005e3c:	e007      	b.n	8005e4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e46:	f023 0303 	bic.w	r3, r3, #3
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	aaaaaaab 	.word	0xaaaaaaab
 8005e64:	08010d00 	.word	0x08010d00

08005e68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d11f      	bne.n	8005ec2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d856      	bhi.n	8005f36 <DMA_CheckFifoParam+0xce>
 8005e88:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <DMA_CheckFifoParam+0x28>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005ea1 	.word	0x08005ea1
 8005e94:	08005eb3 	.word	0x08005eb3
 8005e98:	08005ea1 	.word	0x08005ea1
 8005e9c:	08005f37 	.word	0x08005f37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d046      	beq.n	8005f3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eb0:	e043      	b.n	8005f3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005eba:	d140      	bne.n	8005f3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ec0:	e03d      	b.n	8005f3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eca:	d121      	bne.n	8005f10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d837      	bhi.n	8005f42 <DMA_CheckFifoParam+0xda>
 8005ed2:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <DMA_CheckFifoParam+0x70>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005ee9 	.word	0x08005ee9
 8005edc:	08005eef 	.word	0x08005eef
 8005ee0:	08005ee9 	.word	0x08005ee9
 8005ee4:	08005f01 	.word	0x08005f01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
      break;
 8005eec:	e030      	b.n	8005f50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d025      	beq.n	8005f46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005efe:	e022      	b.n	8005f46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f08:	d11f      	bne.n	8005f4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f0e:	e01c      	b.n	8005f4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d903      	bls.n	8005f1e <DMA_CheckFifoParam+0xb6>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d003      	beq.n	8005f24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f1c:	e018      	b.n	8005f50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	73fb      	strb	r3, [r7, #15]
      break;
 8005f22:	e015      	b.n	8005f50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00e      	beq.n	8005f4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]
      break;
 8005f34:	e00b      	b.n	8005f4e <DMA_CheckFifoParam+0xe6>
      break;
 8005f36:	bf00      	nop
 8005f38:	e00a      	b.n	8005f50 <DMA_CheckFifoParam+0xe8>
      break;
 8005f3a:	bf00      	nop
 8005f3c:	e008      	b.n	8005f50 <DMA_CheckFifoParam+0xe8>
      break;
 8005f3e:	bf00      	nop
 8005f40:	e006      	b.n	8005f50 <DMA_CheckFifoParam+0xe8>
      break;
 8005f42:	bf00      	nop
 8005f44:	e004      	b.n	8005f50 <DMA_CheckFifoParam+0xe8>
      break;
 8005f46:	bf00      	nop
 8005f48:	e002      	b.n	8005f50 <DMA_CheckFifoParam+0xe8>
      break;   
 8005f4a:	bf00      	nop
 8005f4c:	e000      	b.n	8005f50 <DMA_CheckFifoParam+0xe8>
      break;
 8005f4e:	bf00      	nop
    }
  } 
  
  return status; 
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop

08005f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b089      	sub	sp, #36	; 0x24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
 8005f7a:	e16b      	b.n	8006254 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	f040 815a 	bne.w	800624e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d005      	beq.n	8005fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d130      	bne.n	8006014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	2203      	movs	r2, #3
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fe8:	2201      	movs	r2, #1
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	091b      	lsrs	r3, r3, #4
 8005ffe:	f003 0201 	and.w	r2, r3, #1
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	4313      	orrs	r3, r2
 800600c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	2b03      	cmp	r3, #3
 800601e:	d017      	beq.n	8006050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	2203      	movs	r2, #3
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	43db      	mvns	r3, r3
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	4013      	ands	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	4313      	orrs	r3, r2
 8006048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d123      	bne.n	80060a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	08da      	lsrs	r2, r3, #3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3208      	adds	r2, #8
 8006064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	220f      	movs	r2, #15
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	43db      	mvns	r3, r3
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	4013      	ands	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	4313      	orrs	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	08da      	lsrs	r2, r3, #3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3208      	adds	r2, #8
 800609e:	69b9      	ldr	r1, [r7, #24]
 80060a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	2203      	movs	r2, #3
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4013      	ands	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f003 0203 	and.w	r2, r3, #3
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 80b4 	beq.w	800624e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	4b60      	ldr	r3, [pc, #384]	; (800626c <HAL_GPIO_Init+0x30c>)
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	4a5f      	ldr	r2, [pc, #380]	; (800626c <HAL_GPIO_Init+0x30c>)
 80060f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060f4:	6453      	str	r3, [r2, #68]	; 0x44
 80060f6:	4b5d      	ldr	r3, [pc, #372]	; (800626c <HAL_GPIO_Init+0x30c>)
 80060f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006102:	4a5b      	ldr	r2, [pc, #364]	; (8006270 <HAL_GPIO_Init+0x310>)
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	089b      	lsrs	r3, r3, #2
 8006108:	3302      	adds	r3, #2
 800610a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800610e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	220f      	movs	r2, #15
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	43db      	mvns	r3, r3
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	4013      	ands	r3, r2
 8006124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a52      	ldr	r2, [pc, #328]	; (8006274 <HAL_GPIO_Init+0x314>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d02b      	beq.n	8006186 <HAL_GPIO_Init+0x226>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a51      	ldr	r2, [pc, #324]	; (8006278 <HAL_GPIO_Init+0x318>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d025      	beq.n	8006182 <HAL_GPIO_Init+0x222>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a50      	ldr	r2, [pc, #320]	; (800627c <HAL_GPIO_Init+0x31c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01f      	beq.n	800617e <HAL_GPIO_Init+0x21e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a4f      	ldr	r2, [pc, #316]	; (8006280 <HAL_GPIO_Init+0x320>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d019      	beq.n	800617a <HAL_GPIO_Init+0x21a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a4e      	ldr	r2, [pc, #312]	; (8006284 <HAL_GPIO_Init+0x324>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <HAL_GPIO_Init+0x216>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a4d      	ldr	r2, [pc, #308]	; (8006288 <HAL_GPIO_Init+0x328>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00d      	beq.n	8006172 <HAL_GPIO_Init+0x212>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a4c      	ldr	r2, [pc, #304]	; (800628c <HAL_GPIO_Init+0x32c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d007      	beq.n	800616e <HAL_GPIO_Init+0x20e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a4b      	ldr	r2, [pc, #300]	; (8006290 <HAL_GPIO_Init+0x330>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d101      	bne.n	800616a <HAL_GPIO_Init+0x20a>
 8006166:	2307      	movs	r3, #7
 8006168:	e00e      	b.n	8006188 <HAL_GPIO_Init+0x228>
 800616a:	2308      	movs	r3, #8
 800616c:	e00c      	b.n	8006188 <HAL_GPIO_Init+0x228>
 800616e:	2306      	movs	r3, #6
 8006170:	e00a      	b.n	8006188 <HAL_GPIO_Init+0x228>
 8006172:	2305      	movs	r3, #5
 8006174:	e008      	b.n	8006188 <HAL_GPIO_Init+0x228>
 8006176:	2304      	movs	r3, #4
 8006178:	e006      	b.n	8006188 <HAL_GPIO_Init+0x228>
 800617a:	2303      	movs	r3, #3
 800617c:	e004      	b.n	8006188 <HAL_GPIO_Init+0x228>
 800617e:	2302      	movs	r3, #2
 8006180:	e002      	b.n	8006188 <HAL_GPIO_Init+0x228>
 8006182:	2301      	movs	r3, #1
 8006184:	e000      	b.n	8006188 <HAL_GPIO_Init+0x228>
 8006186:	2300      	movs	r3, #0
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	f002 0203 	and.w	r2, r2, #3
 800618e:	0092      	lsls	r2, r2, #2
 8006190:	4093      	lsls	r3, r2
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4313      	orrs	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006198:	4935      	ldr	r1, [pc, #212]	; (8006270 <HAL_GPIO_Init+0x310>)
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	089b      	lsrs	r3, r3, #2
 800619e:	3302      	adds	r3, #2
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061a6:	4b3b      	ldr	r3, [pc, #236]	; (8006294 <HAL_GPIO_Init+0x334>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	43db      	mvns	r3, r3
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	4013      	ands	r3, r2
 80061b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061ca:	4a32      	ldr	r2, [pc, #200]	; (8006294 <HAL_GPIO_Init+0x334>)
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061d0:	4b30      	ldr	r3, [pc, #192]	; (8006294 <HAL_GPIO_Init+0x334>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	43db      	mvns	r3, r3
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	4013      	ands	r3, r2
 80061de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061f4:	4a27      	ldr	r2, [pc, #156]	; (8006294 <HAL_GPIO_Init+0x334>)
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061fa:	4b26      	ldr	r3, [pc, #152]	; (8006294 <HAL_GPIO_Init+0x334>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	43db      	mvns	r3, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4013      	ands	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800621e:	4a1d      	ldr	r2, [pc, #116]	; (8006294 <HAL_GPIO_Init+0x334>)
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006224:	4b1b      	ldr	r3, [pc, #108]	; (8006294 <HAL_GPIO_Init+0x334>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	43db      	mvns	r3, r3
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	4013      	ands	r3, r2
 8006232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006248:	4a12      	ldr	r2, [pc, #72]	; (8006294 <HAL_GPIO_Init+0x334>)
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	3301      	adds	r3, #1
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	2b0f      	cmp	r3, #15
 8006258:	f67f ae90 	bls.w	8005f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	3724      	adds	r7, #36	; 0x24
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40023800 	.word	0x40023800
 8006270:	40013800 	.word	0x40013800
 8006274:	40020000 	.word	0x40020000
 8006278:	40020400 	.word	0x40020400
 800627c:	40020800 	.word	0x40020800
 8006280:	40020c00 	.word	0x40020c00
 8006284:	40021000 	.word	0x40021000
 8006288:	40021400 	.word	0x40021400
 800628c:	40021800 	.word	0x40021800
 8006290:	40021c00 	.word	0x40021c00
 8006294:	40013c00 	.word	0x40013c00

08006298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	807b      	strh	r3, [r7, #2]
 80062a4:	4613      	mov	r3, r2
 80062a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062a8:	787b      	ldrb	r3, [r7, #1]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062ae:	887a      	ldrh	r2, [r7, #2]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062b4:	e003      	b.n	80062be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062b6:	887b      	ldrh	r3, [r7, #2]
 80062b8:	041a      	lsls	r2, r3, #16
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	619a      	str	r2, [r3, #24]
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062dc:	887a      	ldrh	r2, [r7, #2]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4013      	ands	r3, r2
 80062e2:	041a      	lsls	r2, r3, #16
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	43d9      	mvns	r1, r3
 80062e8:	887b      	ldrh	r3, [r7, #2]
 80062ea:	400b      	ands	r3, r1
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	619a      	str	r2, [r3, #24]
}
 80062f2:	bf00      	nop
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800630a:	4b08      	ldr	r3, [pc, #32]	; (800632c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800630c:	695a      	ldr	r2, [r3, #20]
 800630e:	88fb      	ldrh	r3, [r7, #6]
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006316:	4a05      	ldr	r2, [pc, #20]	; (800632c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fc fb2e 	bl	8002980 <HAL_GPIO_EXTI_Callback>
  }
}
 8006324:	bf00      	nop
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40013c00 	.word	0x40013c00

08006330 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006332:	b08f      	sub	sp, #60	; 0x3c
 8006334:	af0a      	add	r7, sp, #40	; 0x28
 8006336:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e054      	b.n	80063ec <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d106      	bne.n	8006362 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f007 f8df 	bl	800d520 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2203      	movs	r2, #3
 8006366:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f004 fccf 	bl	800ad24 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	687e      	ldr	r6, [r7, #4]
 800638e:	466d      	mov	r5, sp
 8006390:	f106 0410 	add.w	r4, r6, #16
 8006394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800639a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800639c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80063a4:	1d33      	adds	r3, r6, #4
 80063a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063a8:	6838      	ldr	r0, [r7, #0]
 80063aa:	f004 fc49 	bl	800ac40 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2101      	movs	r1, #1
 80063b4:	4618      	mov	r0, r3
 80063b6:	f004 fcc6 	bl	800ad46 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	687e      	ldr	r6, [r7, #4]
 80063c2:	466d      	mov	r5, sp
 80063c4:	f106 0410 	add.w	r4, r6, #16
 80063c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80063d8:	1d33      	adds	r3, r6, #4
 80063da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063dc:	6838      	ldr	r0, [r7, #0]
 80063de:	f004 fe4f 	bl	800b080 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063f4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80063f4:	b590      	push	{r4, r7, lr}
 80063f6:	b089      	sub	sp, #36	; 0x24
 80063f8:	af04      	add	r7, sp, #16
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	4608      	mov	r0, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	461a      	mov	r2, r3
 8006402:	4603      	mov	r3, r0
 8006404:	70fb      	strb	r3, [r7, #3]
 8006406:	460b      	mov	r3, r1
 8006408:	70bb      	strb	r3, [r7, #2]
 800640a:	4613      	mov	r3, r2
 800640c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_HCD_HC_Init+0x28>
 8006418:	2302      	movs	r3, #2
 800641a:	e076      	b.n	800650a <HAL_HCD_HC_Init+0x116>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	212c      	movs	r1, #44	; 0x2c
 800642a:	fb01 f303 	mul.w	r3, r1, r3
 800642e:	4413      	add	r3, r2
 8006430:	333d      	adds	r3, #61	; 0x3d
 8006432:	2200      	movs	r2, #0
 8006434:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	212c      	movs	r1, #44	; 0x2c
 800643c:	fb01 f303 	mul.w	r3, r1, r3
 8006440:	4413      	add	r3, r2
 8006442:	3338      	adds	r3, #56	; 0x38
 8006444:	787a      	ldrb	r2, [r7, #1]
 8006446:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	212c      	movs	r1, #44	; 0x2c
 800644e:	fb01 f303 	mul.w	r3, r1, r3
 8006452:	4413      	add	r3, r2
 8006454:	3340      	adds	r3, #64	; 0x40
 8006456:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006458:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800645a:	78fb      	ldrb	r3, [r7, #3]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	212c      	movs	r1, #44	; 0x2c
 8006460:	fb01 f303 	mul.w	r3, r1, r3
 8006464:	4413      	add	r3, r2
 8006466:	3339      	adds	r3, #57	; 0x39
 8006468:	78fa      	ldrb	r2, [r7, #3]
 800646a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800646c:	78fb      	ldrb	r3, [r7, #3]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	212c      	movs	r1, #44	; 0x2c
 8006472:	fb01 f303 	mul.w	r3, r1, r3
 8006476:	4413      	add	r3, r2
 8006478:	333f      	adds	r3, #63	; 0x3f
 800647a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800647e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	78ba      	ldrb	r2, [r7, #2]
 8006484:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006488:	b2d0      	uxtb	r0, r2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	212c      	movs	r1, #44	; 0x2c
 800648e:	fb01 f303 	mul.w	r3, r1, r3
 8006492:	4413      	add	r3, r2
 8006494:	333a      	adds	r3, #58	; 0x3a
 8006496:	4602      	mov	r2, r0
 8006498:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800649a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	da09      	bge.n	80064b6 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	212c      	movs	r1, #44	; 0x2c
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	4413      	add	r3, r2
 80064ae:	333b      	adds	r3, #59	; 0x3b
 80064b0:	2201      	movs	r2, #1
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	e008      	b.n	80064c8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	212c      	movs	r1, #44	; 0x2c
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	4413      	add	r3, r2
 80064c2:	333b      	adds	r3, #59	; 0x3b
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	212c      	movs	r1, #44	; 0x2c
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	4413      	add	r3, r2
 80064d4:	333c      	adds	r3, #60	; 0x3c
 80064d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80064da:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	787c      	ldrb	r4, [r7, #1]
 80064e2:	78ba      	ldrb	r2, [r7, #2]
 80064e4:	78f9      	ldrb	r1, [r7, #3]
 80064e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064e8:	9302      	str	r3, [sp, #8]
 80064ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	4623      	mov	r3, r4
 80064f8:	f004 ff48 	bl	800b38c <USB_HC_Init>
 80064fc:	4603      	mov	r3, r0
 80064fe:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	bd90      	pop	{r4, r7, pc}

08006512 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	460b      	mov	r3, r1
 800651c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_HCD_HC_Halt+0x1e>
 800652c:	2302      	movs	r3, #2
 800652e:	e00f      	b.n	8006550 <HAL_HCD_HC_Halt+0x3e>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	78fa      	ldrb	r2, [r7, #3]
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f005 f998 	bl	800b876 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800654e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	4608      	mov	r0, r1
 8006562:	4611      	mov	r1, r2
 8006564:	461a      	mov	r2, r3
 8006566:	4603      	mov	r3, r0
 8006568:	70fb      	strb	r3, [r7, #3]
 800656a:	460b      	mov	r3, r1
 800656c:	70bb      	strb	r3, [r7, #2]
 800656e:	4613      	mov	r3, r2
 8006570:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	212c      	movs	r1, #44	; 0x2c
 8006578:	fb01 f303 	mul.w	r3, r1, r3
 800657c:	4413      	add	r3, r2
 800657e:	333b      	adds	r3, #59	; 0x3b
 8006580:	78ba      	ldrb	r2, [r7, #2]
 8006582:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	212c      	movs	r1, #44	; 0x2c
 800658a:	fb01 f303 	mul.w	r3, r1, r3
 800658e:	4413      	add	r3, r2
 8006590:	333f      	adds	r3, #63	; 0x3f
 8006592:	787a      	ldrb	r2, [r7, #1]
 8006594:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006596:	7c3b      	ldrb	r3, [r7, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d112      	bne.n	80065c2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	212c      	movs	r1, #44	; 0x2c
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	4413      	add	r3, r2
 80065a8:	3342      	adds	r3, #66	; 0x42
 80065aa:	2203      	movs	r2, #3
 80065ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80065ae:	78fb      	ldrb	r3, [r7, #3]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	212c      	movs	r1, #44	; 0x2c
 80065b4:	fb01 f303 	mul.w	r3, r1, r3
 80065b8:	4413      	add	r3, r2
 80065ba:	333d      	adds	r3, #61	; 0x3d
 80065bc:	7f3a      	ldrb	r2, [r7, #28]
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	e008      	b.n	80065d4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	212c      	movs	r1, #44	; 0x2c
 80065c8:	fb01 f303 	mul.w	r3, r1, r3
 80065cc:	4413      	add	r3, r2
 80065ce:	3342      	adds	r3, #66	; 0x42
 80065d0:	2202      	movs	r2, #2
 80065d2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80065d4:	787b      	ldrb	r3, [r7, #1]
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	f200 80c6 	bhi.w	8006768 <HAL_HCD_HC_SubmitRequest+0x210>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	080065f5 	.word	0x080065f5
 80065e8:	08006755 	.word	0x08006755
 80065ec:	08006659 	.word	0x08006659
 80065f0:	080066d7 	.word	0x080066d7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80065f4:	7c3b      	ldrb	r3, [r7, #16]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	f040 80b8 	bne.w	800676c <HAL_HCD_HC_SubmitRequest+0x214>
 80065fc:	78bb      	ldrb	r3, [r7, #2]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f040 80b4 	bne.w	800676c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8006604:	8b3b      	ldrh	r3, [r7, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d108      	bne.n	800661c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	212c      	movs	r1, #44	; 0x2c
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	4413      	add	r3, r2
 8006616:	3355      	adds	r3, #85	; 0x55
 8006618:	2201      	movs	r2, #1
 800661a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	212c      	movs	r1, #44	; 0x2c
 8006622:	fb01 f303 	mul.w	r3, r1, r3
 8006626:	4413      	add	r3, r2
 8006628:	3355      	adds	r3, #85	; 0x55
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d109      	bne.n	8006644 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	212c      	movs	r1, #44	; 0x2c
 8006636:	fb01 f303 	mul.w	r3, r1, r3
 800663a:	4413      	add	r3, r2
 800663c:	3342      	adds	r3, #66	; 0x42
 800663e:	2200      	movs	r2, #0
 8006640:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006642:	e093      	b.n	800676c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	212c      	movs	r1, #44	; 0x2c
 800664a:	fb01 f303 	mul.w	r3, r1, r3
 800664e:	4413      	add	r3, r2
 8006650:	3342      	adds	r3, #66	; 0x42
 8006652:	2202      	movs	r2, #2
 8006654:	701a      	strb	r2, [r3, #0]
      break;
 8006656:	e089      	b.n	800676c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006658:	78bb      	ldrb	r3, [r7, #2]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d11d      	bne.n	800669a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	212c      	movs	r1, #44	; 0x2c
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	4413      	add	r3, r2
 800666a:	3355      	adds	r3, #85	; 0x55
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	212c      	movs	r1, #44	; 0x2c
 8006678:	fb01 f303 	mul.w	r3, r1, r3
 800667c:	4413      	add	r3, r2
 800667e:	3342      	adds	r3, #66	; 0x42
 8006680:	2200      	movs	r2, #0
 8006682:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006684:	e073      	b.n	800676e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	212c      	movs	r1, #44	; 0x2c
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	4413      	add	r3, r2
 8006692:	3342      	adds	r3, #66	; 0x42
 8006694:	2202      	movs	r2, #2
 8006696:	701a      	strb	r2, [r3, #0]
      break;
 8006698:	e069      	b.n	800676e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	212c      	movs	r1, #44	; 0x2c
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	4413      	add	r3, r2
 80066a6:	3354      	adds	r3, #84	; 0x54
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	212c      	movs	r1, #44	; 0x2c
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	4413      	add	r3, r2
 80066ba:	3342      	adds	r3, #66	; 0x42
 80066bc:	2200      	movs	r2, #0
 80066be:	701a      	strb	r2, [r3, #0]
      break;
 80066c0:	e055      	b.n	800676e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	212c      	movs	r1, #44	; 0x2c
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	4413      	add	r3, r2
 80066ce:	3342      	adds	r3, #66	; 0x42
 80066d0:	2202      	movs	r2, #2
 80066d2:	701a      	strb	r2, [r3, #0]
      break;
 80066d4:	e04b      	b.n	800676e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80066d6:	78bb      	ldrb	r3, [r7, #2]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d11d      	bne.n	8006718 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	212c      	movs	r1, #44	; 0x2c
 80066e2:	fb01 f303 	mul.w	r3, r1, r3
 80066e6:	4413      	add	r3, r2
 80066e8:	3355      	adds	r3, #85	; 0x55
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d109      	bne.n	8006704 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	212c      	movs	r1, #44	; 0x2c
 80066f6:	fb01 f303 	mul.w	r3, r1, r3
 80066fa:	4413      	add	r3, r2
 80066fc:	3342      	adds	r3, #66	; 0x42
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006702:	e034      	b.n	800676e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	212c      	movs	r1, #44	; 0x2c
 800670a:	fb01 f303 	mul.w	r3, r1, r3
 800670e:	4413      	add	r3, r2
 8006710:	3342      	adds	r3, #66	; 0x42
 8006712:	2202      	movs	r2, #2
 8006714:	701a      	strb	r2, [r3, #0]
      break;
 8006716:	e02a      	b.n	800676e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	212c      	movs	r1, #44	; 0x2c
 800671e:	fb01 f303 	mul.w	r3, r1, r3
 8006722:	4413      	add	r3, r2
 8006724:	3354      	adds	r3, #84	; 0x54
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d109      	bne.n	8006740 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	212c      	movs	r1, #44	; 0x2c
 8006732:	fb01 f303 	mul.w	r3, r1, r3
 8006736:	4413      	add	r3, r2
 8006738:	3342      	adds	r3, #66	; 0x42
 800673a:	2200      	movs	r2, #0
 800673c:	701a      	strb	r2, [r3, #0]
      break;
 800673e:	e016      	b.n	800676e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	212c      	movs	r1, #44	; 0x2c
 8006746:	fb01 f303 	mul.w	r3, r1, r3
 800674a:	4413      	add	r3, r2
 800674c:	3342      	adds	r3, #66	; 0x42
 800674e:	2202      	movs	r2, #2
 8006750:	701a      	strb	r2, [r3, #0]
      break;
 8006752:	e00c      	b.n	800676e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	212c      	movs	r1, #44	; 0x2c
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	4413      	add	r3, r2
 8006760:	3342      	adds	r3, #66	; 0x42
 8006762:	2200      	movs	r2, #0
 8006764:	701a      	strb	r2, [r3, #0]
      break;
 8006766:	e002      	b.n	800676e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800676c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	212c      	movs	r1, #44	; 0x2c
 8006774:	fb01 f303 	mul.w	r3, r1, r3
 8006778:	4413      	add	r3, r2
 800677a:	3344      	adds	r3, #68	; 0x44
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	8b3a      	ldrh	r2, [r7, #24]
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	202c      	movs	r0, #44	; 0x2c
 8006788:	fb00 f303 	mul.w	r3, r0, r3
 800678c:	440b      	add	r3, r1
 800678e:	334c      	adds	r3, #76	; 0x4c
 8006790:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	212c      	movs	r1, #44	; 0x2c
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	4413      	add	r3, r2
 800679e:	3360      	adds	r3, #96	; 0x60
 80067a0:	2200      	movs	r2, #0
 80067a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	212c      	movs	r1, #44	; 0x2c
 80067aa:	fb01 f303 	mul.w	r3, r1, r3
 80067ae:	4413      	add	r3, r2
 80067b0:	3350      	adds	r3, #80	; 0x50
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80067b6:	78fb      	ldrb	r3, [r7, #3]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	212c      	movs	r1, #44	; 0x2c
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	4413      	add	r3, r2
 80067c2:	3339      	adds	r3, #57	; 0x39
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	212c      	movs	r1, #44	; 0x2c
 80067ce:	fb01 f303 	mul.w	r3, r1, r3
 80067d2:	4413      	add	r3, r2
 80067d4:	3361      	adds	r3, #97	; 0x61
 80067d6:	2200      	movs	r2, #0
 80067d8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	78fb      	ldrb	r3, [r7, #3]
 80067e0:	222c      	movs	r2, #44	; 0x2c
 80067e2:	fb02 f303 	mul.w	r3, r2, r3
 80067e6:	3338      	adds	r3, #56	; 0x38
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	18d1      	adds	r1, r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	461a      	mov	r2, r3
 80067f4:	f004 feec 	bl	800b5d0 <USB_HC_StartXfer>
 80067f8:	4603      	mov	r3, r0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop

08006804 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f004 fbed 	bl	800affa <USB_GetMode>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	f040 80f6 	bne.w	8006a14 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4618      	mov	r0, r3
 800682e:	f004 fbd1 	bl	800afd4 <USB_ReadInterrupts>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80ec 	beq.w	8006a12 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f004 fbc8 	bl	800afd4 <USB_ReadInterrupts>
 8006844:	4603      	mov	r3, r0
 8006846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800684a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800684e:	d104      	bne.n	800685a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006858:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f004 fbb8 	bl	800afd4 <USB_ReadInterrupts>
 8006864:	4603      	mov	r3, r0
 8006866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800686a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800686e:	d104      	bne.n	800687a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006878:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f004 fba8 	bl	800afd4 <USB_ReadInterrupts>
 8006884:	4603      	mov	r3, r0
 8006886:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800688a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800688e:	d104      	bne.n	800689a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006898:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f004 fb98 	bl	800afd4 <USB_ReadInterrupts>
 80068a4:	4603      	mov	r3, r0
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d103      	bne.n	80068b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2202      	movs	r2, #2
 80068b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f004 fb8a 	bl	800afd4 <USB_ReadInterrupts>
 80068c0:	4603      	mov	r3, r0
 80068c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ca:	d11c      	bne.n	8006906 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80068d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10f      	bne.n	8006906 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80068e6:	2110      	movs	r1, #16
 80068e8:	6938      	ldr	r0, [r7, #16]
 80068ea:	f004 fa79 	bl	800ade0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80068ee:	6938      	ldr	r0, [r7, #16]
 80068f0:	f004 faaa 	bl	800ae48 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2101      	movs	r1, #1
 80068fa:	4618      	mov	r0, r3
 80068fc:	f004 fc80 	bl	800b200 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f006 fe8b 	bl	800d61c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f004 fb62 	bl	800afd4 <USB_ReadInterrupts>
 8006910:	4603      	mov	r3, r0
 8006912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006916:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800691a:	d102      	bne.n	8006922 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 f89e 	bl	8007a5e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f004 fb54 	bl	800afd4 <USB_ReadInterrupts>
 800692c:	4603      	mov	r3, r0
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b08      	cmp	r3, #8
 8006934:	d106      	bne.n	8006944 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f006 fe54 	bl	800d5e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2208      	movs	r2, #8
 8006942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f004 fb43 	bl	800afd4 <USB_ReadInterrupts>
 800694e:	4603      	mov	r3, r0
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	2b10      	cmp	r3, #16
 8006956:	d101      	bne.n	800695c <HAL_HCD_IRQHandler+0x158>
 8006958:	2301      	movs	r3, #1
 800695a:	e000      	b.n	800695e <HAL_HCD_IRQHandler+0x15a>
 800695c:	2300      	movs	r3, #0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d012      	beq.n	8006988 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	699a      	ldr	r2, [r3, #24]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0210 	bic.w	r2, r2, #16
 8006970:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 ffa1 	bl	80078ba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0210 	orr.w	r2, r2, #16
 8006986:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f004 fb21 	bl	800afd4 <USB_ReadInterrupts>
 8006992:	4603      	mov	r3, r0
 8006994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800699c:	d13a      	bne.n	8006a14 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f004 ff56 	bl	800b854 <USB_HC_ReadInterrupt>
 80069a8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80069aa:	2300      	movs	r3, #0
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e025      	b.n	80069fc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f003 030f 	and.w	r3, r3, #15
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	fa22 f303 	lsr.w	r3, r2, r3
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d018      	beq.n	80069f6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069da:	d106      	bne.n	80069ea <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f8ab 	bl	8006b3e <HCD_HC_IN_IRQHandler>
 80069e8:	e005      	b.n	80069f6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fbf9 	bl	80071e8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	3301      	adds	r3, #1
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d3d4      	bcc.n	80069b0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a0e:	615a      	str	r2, [r3, #20]
 8006a10:	e000      	b.n	8006a14 <HAL_HCD_IRQHandler+0x210>
      return;
 8006a12:	bf00      	nop
    }
  }
}
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_HCD_Start+0x16>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e013      	b.n	8006a58 <HAL_HCD_Start+0x3e>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f004 fc42 	bl	800b2c8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f004 f95a 	bl	800ad02 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <HAL_HCD_Stop+0x16>
 8006a72:	2302      	movs	r3, #2
 8006a74:	e00d      	b.n	8006a92 <HAL_HCD_Stop+0x32>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f005 f830 	bl	800bae8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f004 fbe4 	bl	800b274 <USB_ResetPort>
 8006aac:	4603      	mov	r3, r0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	212c      	movs	r1, #44	; 0x2c
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	3360      	adds	r3, #96	; 0x60
 8006ad0:	781b      	ldrb	r3, [r3, #0]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	212c      	movs	r1, #44	; 0x2c
 8006af0:	fb01 f303 	mul.w	r3, r1, r3
 8006af4:	4413      	add	r3, r2
 8006af6:	3350      	adds	r3, #80	; 0x50
 8006af8:	681b      	ldr	r3, [r3, #0]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f004 fc28 	bl	800b368 <USB_GetCurrentFrame>
 8006b18:	4603      	mov	r3, r0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f004 fc03 	bl	800b33a <USB_GetHostSpeed>
 8006b34:	4603      	mov	r3, r0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b086      	sub	sp, #24
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	460b      	mov	r3, r1
 8006b48:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d11a      	bne.n	8006ba4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	2304      	movs	r3, #4
 8006b7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	212c      	movs	r1, #44	; 0x2c
 8006b86:	fb01 f303 	mul.w	r3, r1, r3
 8006b8a:	4413      	add	r3, r2
 8006b8c:	3361      	adds	r3, #97	; 0x61
 8006b8e:	2206      	movs	r2, #6
 8006b90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f004 fe6a 	bl	800b876 <USB_HC_Halt>
 8006ba2:	e0af      	b.n	8006d04 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bba:	d11b      	bne.n	8006bf4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc8:	461a      	mov	r2, r3
 8006bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	212c      	movs	r1, #44	; 0x2c
 8006bd6:	fb01 f303 	mul.w	r3, r1, r3
 8006bda:	4413      	add	r3, r2
 8006bdc:	3361      	adds	r3, #97	; 0x61
 8006bde:	2207      	movs	r2, #7
 8006be0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	4611      	mov	r1, r2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f004 fe42 	bl	800b876 <USB_HC_Halt>
 8006bf2:	e087      	b.n	8006d04 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 0320 	and.w	r3, r3, #32
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d109      	bne.n	8006c1e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c16:	461a      	mov	r2, r3
 8006c18:	2320      	movs	r3, #32
 8006c1a:	6093      	str	r3, [r2, #8]
 8006c1c:	e072      	b.n	8006d04 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f003 0308 	and.w	r3, r3, #8
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d11a      	bne.n	8006c6a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c40:	461a      	mov	r2, r3
 8006c42:	2308      	movs	r3, #8
 8006c44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	212c      	movs	r1, #44	; 0x2c
 8006c4c:	fb01 f303 	mul.w	r3, r1, r3
 8006c50:	4413      	add	r3, r2
 8006c52:	3361      	adds	r3, #97	; 0x61
 8006c54:	2205      	movs	r2, #5
 8006c56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	4611      	mov	r1, r2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f004 fe07 	bl	800b876 <USB_HC_Halt>
 8006c68:	e04c      	b.n	8006d04 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c80:	d11b      	bne.n	8006cba <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	212c      	movs	r1, #44	; 0x2c
 8006c9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ca0:	4413      	add	r3, r2
 8006ca2:	3361      	adds	r3, #97	; 0x61
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f004 fddf 	bl	800b876 <USB_HC_Halt>
 8006cb8:	e024      	b.n	8006d04 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ccc:	2b80      	cmp	r3, #128	; 0x80
 8006cce:	d119      	bne.n	8006d04 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cdc:	461a      	mov	r2, r3
 8006cde:	2380      	movs	r3, #128	; 0x80
 8006ce0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	212c      	movs	r1, #44	; 0x2c
 8006ce8:	fb01 f303 	mul.w	r3, r1, r3
 8006cec:	4413      	add	r3, r2
 8006cee:	3361      	adds	r3, #97	; 0x61
 8006cf0:	2206      	movs	r2, #6
 8006cf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f004 fdb9 	bl	800b876 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1a:	d112      	bne.n	8006d42 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	4611      	mov	r1, r2
 8006d26:	4618      	mov	r0, r3
 8006d28:	f004 fda5 	bl	800b876 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d38:	461a      	mov	r2, r3
 8006d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d3e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006d40:	e24e      	b.n	80071e0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	f040 80df 	bne.w	8006f18 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d019      	beq.n	8006d96 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	212c      	movs	r1, #44	; 0x2c
 8006d68:	fb01 f303 	mul.w	r3, r1, r3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	3348      	adds	r3, #72	; 0x48
 8006d70:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	0159      	lsls	r1, r3, #5
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	440b      	add	r3, r1
 8006d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006d84:	1ad2      	subs	r2, r2, r3
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	202c      	movs	r0, #44	; 0x2c
 8006d8c:	fb00 f303 	mul.w	r3, r0, r3
 8006d90:	440b      	add	r3, r1
 8006d92:	3350      	adds	r3, #80	; 0x50
 8006d94:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	212c      	movs	r1, #44	; 0x2c
 8006d9c:	fb01 f303 	mul.w	r3, r1, r3
 8006da0:	4413      	add	r3, r2
 8006da2:	3361      	adds	r3, #97	; 0x61
 8006da4:	2201      	movs	r2, #1
 8006da6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	212c      	movs	r1, #44	; 0x2c
 8006dae:	fb01 f303 	mul.w	r3, r1, r3
 8006db2:	4413      	add	r3, r2
 8006db4:	335c      	adds	r3, #92	; 0x5c
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	2301      	movs	r3, #1
 8006dca:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	212c      	movs	r1, #44	; 0x2c
 8006dd2:	fb01 f303 	mul.w	r3, r1, r3
 8006dd6:	4413      	add	r3, r2
 8006dd8:	333f      	adds	r3, #63	; 0x3f
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d009      	beq.n	8006df4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	212c      	movs	r1, #44	; 0x2c
 8006de6:	fb01 f303 	mul.w	r3, r1, r3
 8006dea:	4413      	add	r3, r2
 8006dec:	333f      	adds	r3, #63	; 0x3f
 8006dee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d111      	bne.n	8006e18 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f004 fd39 	bl	800b876 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e10:	461a      	mov	r2, r3
 8006e12:	2310      	movs	r3, #16
 8006e14:	6093      	str	r3, [r2, #8]
 8006e16:	e03a      	b.n	8006e8e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	212c      	movs	r1, #44	; 0x2c
 8006e1e:	fb01 f303 	mul.w	r3, r1, r3
 8006e22:	4413      	add	r3, r2
 8006e24:	333f      	adds	r3, #63	; 0x3f
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d009      	beq.n	8006e40 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	212c      	movs	r1, #44	; 0x2c
 8006e32:	fb01 f303 	mul.w	r3, r1, r3
 8006e36:	4413      	add	r3, r2
 8006e38:	333f      	adds	r3, #63	; 0x3f
 8006e3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d126      	bne.n	8006e8e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	0151      	lsls	r1, r2, #5
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	440a      	add	r2, r1
 8006e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e5e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	212c      	movs	r1, #44	; 0x2c
 8006e66:	fb01 f303 	mul.w	r3, r1, r3
 8006e6a:	4413      	add	r3, r2
 8006e6c:	3360      	adds	r3, #96	; 0x60
 8006e6e:	2201      	movs	r2, #1
 8006e70:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	b2d9      	uxtb	r1, r3
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	202c      	movs	r0, #44	; 0x2c
 8006e7c:	fb00 f303 	mul.w	r3, r0, r3
 8006e80:	4413      	add	r3, r2
 8006e82:	3360      	adds	r3, #96	; 0x60
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f006 fbd5 	bl	800d638 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d12b      	bne.n	8006eee <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	212c      	movs	r1, #44	; 0x2c
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	3348      	adds	r3, #72	; 0x48
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	202c      	movs	r0, #44	; 0x2c
 8006eac:	fb00 f202 	mul.w	r2, r0, r2
 8006eb0:	440a      	add	r2, r1
 8006eb2:	3240      	adds	r2, #64	; 0x40
 8006eb4:	8812      	ldrh	r2, [r2, #0]
 8006eb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 818e 	beq.w	80071e0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	212c      	movs	r1, #44	; 0x2c
 8006eca:	fb01 f303 	mul.w	r3, r1, r3
 8006ece:	4413      	add	r3, r2
 8006ed0:	3354      	adds	r3, #84	; 0x54
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	f083 0301 	eor.w	r3, r3, #1
 8006ed8:	b2d8      	uxtb	r0, r3
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	212c      	movs	r1, #44	; 0x2c
 8006ee0:	fb01 f303 	mul.w	r3, r1, r3
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3354      	adds	r3, #84	; 0x54
 8006ee8:	4602      	mov	r2, r0
 8006eea:	701a      	strb	r2, [r3, #0]
}
 8006eec:	e178      	b.n	80071e0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	212c      	movs	r1, #44	; 0x2c
 8006ef4:	fb01 f303 	mul.w	r3, r1, r3
 8006ef8:	4413      	add	r3, r2
 8006efa:	3354      	adds	r3, #84	; 0x54
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	f083 0301 	eor.w	r3, r3, #1
 8006f02:	b2d8      	uxtb	r0, r3
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	212c      	movs	r1, #44	; 0x2c
 8006f0a:	fb01 f303 	mul.w	r3, r1, r3
 8006f0e:	4413      	add	r3, r2
 8006f10:	3354      	adds	r3, #84	; 0x54
 8006f12:	4602      	mov	r2, r0
 8006f14:	701a      	strb	r2, [r3, #0]
}
 8006f16:	e163      	b.n	80071e0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	f040 80f6 	bne.w	800711c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	212c      	movs	r1, #44	; 0x2c
 8006f36:	fb01 f303 	mul.w	r3, r1, r3
 8006f3a:	4413      	add	r3, r2
 8006f3c:	3361      	adds	r3, #97	; 0x61
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d109      	bne.n	8006f58 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	212c      	movs	r1, #44	; 0x2c
 8006f4a:	fb01 f303 	mul.w	r3, r1, r3
 8006f4e:	4413      	add	r3, r2
 8006f50:	3360      	adds	r3, #96	; 0x60
 8006f52:	2201      	movs	r2, #1
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	e0c9      	b.n	80070ec <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	212c      	movs	r1, #44	; 0x2c
 8006f5e:	fb01 f303 	mul.w	r3, r1, r3
 8006f62:	4413      	add	r3, r2
 8006f64:	3361      	adds	r3, #97	; 0x61
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b05      	cmp	r3, #5
 8006f6a:	d109      	bne.n	8006f80 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	212c      	movs	r1, #44	; 0x2c
 8006f72:	fb01 f303 	mul.w	r3, r1, r3
 8006f76:	4413      	add	r3, r2
 8006f78:	3360      	adds	r3, #96	; 0x60
 8006f7a:	2205      	movs	r2, #5
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	e0b5      	b.n	80070ec <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	212c      	movs	r1, #44	; 0x2c
 8006f86:	fb01 f303 	mul.w	r3, r1, r3
 8006f8a:	4413      	add	r3, r2
 8006f8c:	3361      	adds	r3, #97	; 0x61
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2b06      	cmp	r3, #6
 8006f92:	d009      	beq.n	8006fa8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	212c      	movs	r1, #44	; 0x2c
 8006f9a:	fb01 f303 	mul.w	r3, r1, r3
 8006f9e:	4413      	add	r3, r2
 8006fa0:	3361      	adds	r3, #97	; 0x61
 8006fa2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d150      	bne.n	800704a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	212c      	movs	r1, #44	; 0x2c
 8006fae:	fb01 f303 	mul.w	r3, r1, r3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	335c      	adds	r3, #92	; 0x5c
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	202c      	movs	r0, #44	; 0x2c
 8006fc0:	fb00 f303 	mul.w	r3, r0, r3
 8006fc4:	440b      	add	r3, r1
 8006fc6:	335c      	adds	r3, #92	; 0x5c
 8006fc8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	212c      	movs	r1, #44	; 0x2c
 8006fd0:	fb01 f303 	mul.w	r3, r1, r3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	335c      	adds	r3, #92	; 0x5c
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d912      	bls.n	8007004 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	212c      	movs	r1, #44	; 0x2c
 8006fe4:	fb01 f303 	mul.w	r3, r1, r3
 8006fe8:	4413      	add	r3, r2
 8006fea:	335c      	adds	r3, #92	; 0x5c
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	212c      	movs	r1, #44	; 0x2c
 8006ff6:	fb01 f303 	mul.w	r3, r1, r3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	3360      	adds	r3, #96	; 0x60
 8006ffe:	2204      	movs	r2, #4
 8007000:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007002:	e073      	b.n	80070ec <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	212c      	movs	r1, #44	; 0x2c
 800700a:	fb01 f303 	mul.w	r3, r1, r3
 800700e:	4413      	add	r3, r2
 8007010:	3360      	adds	r3, #96	; 0x60
 8007012:	2202      	movs	r2, #2
 8007014:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	4413      	add	r3, r2
 800701e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800702c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007034:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	4413      	add	r3, r2
 800703e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007042:	461a      	mov	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007048:	e050      	b.n	80070ec <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	212c      	movs	r1, #44	; 0x2c
 8007050:	fb01 f303 	mul.w	r3, r1, r3
 8007054:	4413      	add	r3, r2
 8007056:	3361      	adds	r3, #97	; 0x61
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b03      	cmp	r3, #3
 800705c:	d122      	bne.n	80070a4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	212c      	movs	r1, #44	; 0x2c
 8007064:	fb01 f303 	mul.w	r3, r1, r3
 8007068:	4413      	add	r3, r2
 800706a:	3360      	adds	r3, #96	; 0x60
 800706c:	2202      	movs	r2, #2
 800706e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	4413      	add	r3, r2
 8007078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007086:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800708e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	4413      	add	r3, r2
 8007098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709c:	461a      	mov	r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	e023      	b.n	80070ec <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	212c      	movs	r1, #44	; 0x2c
 80070aa:	fb01 f303 	mul.w	r3, r1, r3
 80070ae:	4413      	add	r3, r2
 80070b0:	3361      	adds	r3, #97	; 0x61
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b07      	cmp	r3, #7
 80070b6:	d119      	bne.n	80070ec <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	212c      	movs	r1, #44	; 0x2c
 80070be:	fb01 f303 	mul.w	r3, r1, r3
 80070c2:	4413      	add	r3, r2
 80070c4:	335c      	adds	r3, #92	; 0x5c
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	6879      	ldr	r1, [r7, #4]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	202c      	movs	r0, #44	; 0x2c
 80070d0:	fb00 f303 	mul.w	r3, r0, r3
 80070d4:	440b      	add	r3, r1
 80070d6:	335c      	adds	r3, #92	; 0x5c
 80070d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	212c      	movs	r1, #44	; 0x2c
 80070e0:	fb01 f303 	mul.w	r3, r1, r3
 80070e4:	4413      	add	r3, r2
 80070e6:	3360      	adds	r3, #96	; 0x60
 80070e8:	2204      	movs	r2, #4
 80070ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f8:	461a      	mov	r2, r3
 80070fa:	2302      	movs	r3, #2
 80070fc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	b2d9      	uxtb	r1, r3
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	202c      	movs	r0, #44	; 0x2c
 8007108:	fb00 f303 	mul.w	r3, r0, r3
 800710c:	4413      	add	r3, r2
 800710e:	3360      	adds	r3, #96	; 0x60
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f006 fa8f 	bl	800d638 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800711a:	e061      	b.n	80071e0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	4413      	add	r3, r2
 8007124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	2b10      	cmp	r3, #16
 8007130:	d156      	bne.n	80071e0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	212c      	movs	r1, #44	; 0x2c
 8007138:	fb01 f303 	mul.w	r3, r1, r3
 800713c:	4413      	add	r3, r2
 800713e:	333f      	adds	r3, #63	; 0x3f
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b03      	cmp	r3, #3
 8007144:	d111      	bne.n	800716a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	212c      	movs	r1, #44	; 0x2c
 800714c:	fb01 f303 	mul.w	r3, r1, r3
 8007150:	4413      	add	r3, r2
 8007152:	335c      	adds	r3, #92	; 0x5c
 8007154:	2200      	movs	r2, #0
 8007156:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	b2d2      	uxtb	r2, r2
 8007160:	4611      	mov	r1, r2
 8007162:	4618      	mov	r0, r3
 8007164:	f004 fb87 	bl	800b876 <USB_HC_Halt>
 8007168:	e031      	b.n	80071ce <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	212c      	movs	r1, #44	; 0x2c
 8007170:	fb01 f303 	mul.w	r3, r1, r3
 8007174:	4413      	add	r3, r2
 8007176:	333f      	adds	r3, #63	; 0x3f
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d009      	beq.n	8007192 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	212c      	movs	r1, #44	; 0x2c
 8007184:	fb01 f303 	mul.w	r3, r1, r3
 8007188:	4413      	add	r3, r2
 800718a:	333f      	adds	r3, #63	; 0x3f
 800718c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800718e:	2b02      	cmp	r3, #2
 8007190:	d11d      	bne.n	80071ce <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	212c      	movs	r1, #44	; 0x2c
 8007198:	fb01 f303 	mul.w	r3, r1, r3
 800719c:	4413      	add	r3, r2
 800719e:	335c      	adds	r3, #92	; 0x5c
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d110      	bne.n	80071ce <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	212c      	movs	r1, #44	; 0x2c
 80071b2:	fb01 f303 	mul.w	r3, r1, r3
 80071b6:	4413      	add	r3, r2
 80071b8:	3361      	adds	r3, #97	; 0x61
 80071ba:	2203      	movs	r2, #3
 80071bc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	b2d2      	uxtb	r2, r2
 80071c6:	4611      	mov	r1, r2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f004 fb54 	bl	800b876 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071da:	461a      	mov	r2, r3
 80071dc:	2310      	movs	r3, #16
 80071de:	6093      	str	r3, [r2, #8]
}
 80071e0:	bf00      	nop
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b088      	sub	sp, #32
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80071fe:	78fb      	ldrb	r3, [r7, #3]
 8007200:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	4413      	add	r3, r2
 800720a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b04      	cmp	r3, #4
 8007216:	d11a      	bne.n	800724e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	4413      	add	r3, r2
 8007220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007224:	461a      	mov	r2, r3
 8007226:	2304      	movs	r3, #4
 8007228:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	212c      	movs	r1, #44	; 0x2c
 8007230:	fb01 f303 	mul.w	r3, r1, r3
 8007234:	4413      	add	r3, r2
 8007236:	3361      	adds	r3, #97	; 0x61
 8007238:	2206      	movs	r2, #6
 800723a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	4611      	mov	r1, r2
 8007246:	4618      	mov	r0, r3
 8007248:	f004 fb15 	bl	800b876 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800724c:	e331      	b.n	80078b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	4413      	add	r3, r2
 8007256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b20      	cmp	r3, #32
 8007262:	d12e      	bne.n	80072c2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	4413      	add	r3, r2
 800726c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007270:	461a      	mov	r2, r3
 8007272:	2320      	movs	r3, #32
 8007274:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	212c      	movs	r1, #44	; 0x2c
 800727c:	fb01 f303 	mul.w	r3, r1, r3
 8007280:	4413      	add	r3, r2
 8007282:	333d      	adds	r3, #61	; 0x3d
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b01      	cmp	r3, #1
 8007288:	f040 8313 	bne.w	80078b2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	212c      	movs	r1, #44	; 0x2c
 8007292:	fb01 f303 	mul.w	r3, r1, r3
 8007296:	4413      	add	r3, r2
 8007298:	333d      	adds	r3, #61	; 0x3d
 800729a:	2200      	movs	r2, #0
 800729c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	212c      	movs	r1, #44	; 0x2c
 80072a4:	fb01 f303 	mul.w	r3, r1, r3
 80072a8:	4413      	add	r3, r2
 80072aa:	3360      	adds	r3, #96	; 0x60
 80072ac:	2202      	movs	r2, #2
 80072ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	4611      	mov	r1, r2
 80072ba:	4618      	mov	r0, r3
 80072bc:	f004 fadb 	bl	800b876 <USB_HC_Halt>
}
 80072c0:	e2f7      	b.n	80078b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d8:	d112      	bne.n	8007300 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e6:	461a      	mov	r2, r3
 80072e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072ec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	b2d2      	uxtb	r2, r2
 80072f6:	4611      	mov	r1, r2
 80072f8:	4618      	mov	r0, r3
 80072fa:	f004 fabc 	bl	800b876 <USB_HC_Halt>
}
 80072fe:	e2d8      	b.n	80078b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	4413      	add	r3, r2
 8007308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b01      	cmp	r3, #1
 8007314:	d140      	bne.n	8007398 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	212c      	movs	r1, #44	; 0x2c
 800731c:	fb01 f303 	mul.w	r3, r1, r3
 8007320:	4413      	add	r3, r2
 8007322:	335c      	adds	r3, #92	; 0x5c
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	4413      	add	r3, r2
 8007330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	d111      	bne.n	8007362 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	212c      	movs	r1, #44	; 0x2c
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	4413      	add	r3, r2
 800734a:	333d      	adds	r3, #61	; 0x3d
 800734c:	2201      	movs	r2, #1
 800734e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	4413      	add	r3, r2
 8007358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735c:	461a      	mov	r2, r3
 800735e:	2340      	movs	r3, #64	; 0x40
 8007360:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	4413      	add	r3, r2
 800736a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800736e:	461a      	mov	r2, r3
 8007370:	2301      	movs	r3, #1
 8007372:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	212c      	movs	r1, #44	; 0x2c
 800737a:	fb01 f303 	mul.w	r3, r1, r3
 800737e:	4413      	add	r3, r2
 8007380:	3361      	adds	r3, #97	; 0x61
 8007382:	2201      	movs	r2, #1
 8007384:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	b2d2      	uxtb	r2, r2
 800738e:	4611      	mov	r1, r2
 8007390:	4618      	mov	r0, r3
 8007392:	f004 fa70 	bl	800b876 <USB_HC_Halt>
}
 8007396:	e28c      	b.n	80078b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073aa:	2b40      	cmp	r3, #64	; 0x40
 80073ac:	d12c      	bne.n	8007408 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	212c      	movs	r1, #44	; 0x2c
 80073b4:	fb01 f303 	mul.w	r3, r1, r3
 80073b8:	4413      	add	r3, r2
 80073ba:	3361      	adds	r3, #97	; 0x61
 80073bc:	2204      	movs	r2, #4
 80073be:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	212c      	movs	r1, #44	; 0x2c
 80073c6:	fb01 f303 	mul.w	r3, r1, r3
 80073ca:	4413      	add	r3, r2
 80073cc:	333d      	adds	r3, #61	; 0x3d
 80073ce:	2201      	movs	r2, #1
 80073d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	212c      	movs	r1, #44	; 0x2c
 80073d8:	fb01 f303 	mul.w	r3, r1, r3
 80073dc:	4413      	add	r3, r2
 80073de:	335c      	adds	r3, #92	; 0x5c
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	4611      	mov	r1, r2
 80073ee:	4618      	mov	r0, r3
 80073f0:	f004 fa41 	bl	800b876 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007400:	461a      	mov	r2, r3
 8007402:	2340      	movs	r3, #64	; 0x40
 8007404:	6093      	str	r3, [r2, #8]
}
 8007406:	e254      	b.n	80078b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	4413      	add	r3, r2
 8007410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f003 0308 	and.w	r3, r3, #8
 800741a:	2b08      	cmp	r3, #8
 800741c:	d11a      	bne.n	8007454 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	4413      	add	r3, r2
 8007426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742a:	461a      	mov	r2, r3
 800742c:	2308      	movs	r3, #8
 800742e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	212c      	movs	r1, #44	; 0x2c
 8007436:	fb01 f303 	mul.w	r3, r1, r3
 800743a:	4413      	add	r3, r2
 800743c:	3361      	adds	r3, #97	; 0x61
 800743e:	2205      	movs	r2, #5
 8007440:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	4611      	mov	r1, r2
 800744c:	4618      	mov	r0, r3
 800744e:	f004 fa12 	bl	800b876 <USB_HC_Halt>
}
 8007452:	e22e      	b.n	80078b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	4413      	add	r3, r2
 800745c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f003 0310 	and.w	r3, r3, #16
 8007466:	2b10      	cmp	r3, #16
 8007468:	d140      	bne.n	80074ec <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	212c      	movs	r1, #44	; 0x2c
 8007470:	fb01 f303 	mul.w	r3, r1, r3
 8007474:	4413      	add	r3, r2
 8007476:	335c      	adds	r3, #92	; 0x5c
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	212c      	movs	r1, #44	; 0x2c
 8007482:	fb01 f303 	mul.w	r3, r1, r3
 8007486:	4413      	add	r3, r2
 8007488:	3361      	adds	r3, #97	; 0x61
 800748a:	2203      	movs	r2, #3
 800748c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	212c      	movs	r1, #44	; 0x2c
 8007494:	fb01 f303 	mul.w	r3, r1, r3
 8007498:	4413      	add	r3, r2
 800749a:	333d      	adds	r3, #61	; 0x3d
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d112      	bne.n	80074c8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	212c      	movs	r1, #44	; 0x2c
 80074a8:	fb01 f303 	mul.w	r3, r1, r3
 80074ac:	4413      	add	r3, r2
 80074ae:	333c      	adds	r3, #60	; 0x3c
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d108      	bne.n	80074c8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	212c      	movs	r1, #44	; 0x2c
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	4413      	add	r3, r2
 80074c2:	333d      	adds	r3, #61	; 0x3d
 80074c4:	2201      	movs	r2, #1
 80074c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	4611      	mov	r1, r2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f004 f9cf 	bl	800b876 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e4:	461a      	mov	r2, r3
 80074e6:	2310      	movs	r3, #16
 80074e8:	6093      	str	r3, [r2, #8]
}
 80074ea:	e1e2      	b.n	80078b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074fe:	2b80      	cmp	r3, #128	; 0x80
 8007500:	d164      	bne.n	80075cc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d111      	bne.n	800752e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	212c      	movs	r1, #44	; 0x2c
 8007510:	fb01 f303 	mul.w	r3, r1, r3
 8007514:	4413      	add	r3, r2
 8007516:	3361      	adds	r3, #97	; 0x61
 8007518:	2206      	movs	r2, #6
 800751a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	b2d2      	uxtb	r2, r2
 8007524:	4611      	mov	r1, r2
 8007526:	4618      	mov	r0, r3
 8007528:	f004 f9a5 	bl	800b876 <USB_HC_Halt>
 800752c:	e044      	b.n	80075b8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	212c      	movs	r1, #44	; 0x2c
 8007534:	fb01 f303 	mul.w	r3, r1, r3
 8007538:	4413      	add	r3, r2
 800753a:	335c      	adds	r3, #92	; 0x5c
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	202c      	movs	r0, #44	; 0x2c
 8007546:	fb00 f303 	mul.w	r3, r0, r3
 800754a:	440b      	add	r3, r1
 800754c:	335c      	adds	r3, #92	; 0x5c
 800754e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	212c      	movs	r1, #44	; 0x2c
 8007556:	fb01 f303 	mul.w	r3, r1, r3
 800755a:	4413      	add	r3, r2
 800755c:	335c      	adds	r3, #92	; 0x5c
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d920      	bls.n	80075a6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	212c      	movs	r1, #44	; 0x2c
 800756a:	fb01 f303 	mul.w	r3, r1, r3
 800756e:	4413      	add	r3, r2
 8007570:	335c      	adds	r3, #92	; 0x5c
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	212c      	movs	r1, #44	; 0x2c
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	4413      	add	r3, r2
 8007582:	3360      	adds	r3, #96	; 0x60
 8007584:	2204      	movs	r2, #4
 8007586:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	b2d9      	uxtb	r1, r3
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	202c      	movs	r0, #44	; 0x2c
 8007592:	fb00 f303 	mul.w	r3, r0, r3
 8007596:	4413      	add	r3, r2
 8007598:	3360      	adds	r3, #96	; 0x60
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f006 f84a 	bl	800d638 <HAL_HCD_HC_NotifyURBChange_Callback>
 80075a4:	e008      	b.n	80075b8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	212c      	movs	r1, #44	; 0x2c
 80075ac:	fb01 f303 	mul.w	r3, r1, r3
 80075b0:	4413      	add	r3, r2
 80075b2:	3360      	adds	r3, #96	; 0x60
 80075b4:	2202      	movs	r2, #2
 80075b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c4:	461a      	mov	r2, r3
 80075c6:	2380      	movs	r3, #128	; 0x80
 80075c8:	6093      	str	r3, [r2, #8]
}
 80075ca:	e172      	b.n	80078b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e2:	d11b      	bne.n	800761c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	212c      	movs	r1, #44	; 0x2c
 80075ea:	fb01 f303 	mul.w	r3, r1, r3
 80075ee:	4413      	add	r3, r2
 80075f0:	3361      	adds	r3, #97	; 0x61
 80075f2:	2208      	movs	r2, #8
 80075f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	b2d2      	uxtb	r2, r2
 80075fe:	4611      	mov	r1, r2
 8007600:	4618      	mov	r0, r3
 8007602:	f004 f938 	bl	800b876 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	4413      	add	r3, r2
 800760e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007612:	461a      	mov	r2, r3
 8007614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007618:	6093      	str	r3, [r2, #8]
}
 800761a:	e14a      	b.n	80078b2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	4413      	add	r3, r2
 8007624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b02      	cmp	r3, #2
 8007630:	f040 813f 	bne.w	80078b2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	212c      	movs	r1, #44	; 0x2c
 800763a:	fb01 f303 	mul.w	r3, r1, r3
 800763e:	4413      	add	r3, r2
 8007640:	3361      	adds	r3, #97	; 0x61
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d17d      	bne.n	8007744 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	212c      	movs	r1, #44	; 0x2c
 800764e:	fb01 f303 	mul.w	r3, r1, r3
 8007652:	4413      	add	r3, r2
 8007654:	3360      	adds	r3, #96	; 0x60
 8007656:	2201      	movs	r2, #1
 8007658:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	212c      	movs	r1, #44	; 0x2c
 8007660:	fb01 f303 	mul.w	r3, r1, r3
 8007664:	4413      	add	r3, r2
 8007666:	333f      	adds	r3, #63	; 0x3f
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b02      	cmp	r3, #2
 800766c:	d00a      	beq.n	8007684 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	212c      	movs	r1, #44	; 0x2c
 8007674:	fb01 f303 	mul.w	r3, r1, r3
 8007678:	4413      	add	r3, r2
 800767a:	333f      	adds	r3, #63	; 0x3f
 800767c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800767e:	2b03      	cmp	r3, #3
 8007680:	f040 8100 	bne.w	8007884 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d113      	bne.n	80076b4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	212c      	movs	r1, #44	; 0x2c
 8007692:	fb01 f303 	mul.w	r3, r1, r3
 8007696:	4413      	add	r3, r2
 8007698:	3355      	adds	r3, #85	; 0x55
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	f083 0301 	eor.w	r3, r3, #1
 80076a0:	b2d8      	uxtb	r0, r3
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	212c      	movs	r1, #44	; 0x2c
 80076a8:	fb01 f303 	mul.w	r3, r1, r3
 80076ac:	4413      	add	r3, r2
 80076ae:	3355      	adds	r3, #85	; 0x55
 80076b0:	4602      	mov	r2, r0
 80076b2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	f040 80e3 	bne.w	8007884 <HCD_HC_OUT_IRQHandler+0x69c>
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	212c      	movs	r1, #44	; 0x2c
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	4413      	add	r3, r2
 80076ca:	334c      	adds	r3, #76	; 0x4c
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 80d8 	beq.w	8007884 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	212c      	movs	r1, #44	; 0x2c
 80076da:	fb01 f303 	mul.w	r3, r1, r3
 80076de:	4413      	add	r3, r2
 80076e0:	334c      	adds	r3, #76	; 0x4c
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	202c      	movs	r0, #44	; 0x2c
 80076ea:	fb00 f202 	mul.w	r2, r0, r2
 80076ee:	440a      	add	r2, r1
 80076f0:	3240      	adds	r2, #64	; 0x40
 80076f2:	8812      	ldrh	r2, [r2, #0]
 80076f4:	4413      	add	r3, r2
 80076f6:	3b01      	subs	r3, #1
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	202c      	movs	r0, #44	; 0x2c
 80076fe:	fb00 f202 	mul.w	r2, r0, r2
 8007702:	440a      	add	r2, r1
 8007704:	3240      	adds	r2, #64	; 0x40
 8007706:	8812      	ldrh	r2, [r2, #0]
 8007708:	fbb3 f3f2 	udiv	r3, r3, r2
 800770c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 80b5 	beq.w	8007884 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	212c      	movs	r1, #44	; 0x2c
 8007720:	fb01 f303 	mul.w	r3, r1, r3
 8007724:	4413      	add	r3, r2
 8007726:	3355      	adds	r3, #85	; 0x55
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	f083 0301 	eor.w	r3, r3, #1
 800772e:	b2d8      	uxtb	r0, r3
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	212c      	movs	r1, #44	; 0x2c
 8007736:	fb01 f303 	mul.w	r3, r1, r3
 800773a:	4413      	add	r3, r2
 800773c:	3355      	adds	r3, #85	; 0x55
 800773e:	4602      	mov	r2, r0
 8007740:	701a      	strb	r2, [r3, #0]
 8007742:	e09f      	b.n	8007884 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	212c      	movs	r1, #44	; 0x2c
 800774a:	fb01 f303 	mul.w	r3, r1, r3
 800774e:	4413      	add	r3, r2
 8007750:	3361      	adds	r3, #97	; 0x61
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b03      	cmp	r3, #3
 8007756:	d109      	bne.n	800776c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	212c      	movs	r1, #44	; 0x2c
 800775e:	fb01 f303 	mul.w	r3, r1, r3
 8007762:	4413      	add	r3, r2
 8007764:	3360      	adds	r3, #96	; 0x60
 8007766:	2202      	movs	r2, #2
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	e08b      	b.n	8007884 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	212c      	movs	r1, #44	; 0x2c
 8007772:	fb01 f303 	mul.w	r3, r1, r3
 8007776:	4413      	add	r3, r2
 8007778:	3361      	adds	r3, #97	; 0x61
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b04      	cmp	r3, #4
 800777e:	d109      	bne.n	8007794 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	212c      	movs	r1, #44	; 0x2c
 8007786:	fb01 f303 	mul.w	r3, r1, r3
 800778a:	4413      	add	r3, r2
 800778c:	3360      	adds	r3, #96	; 0x60
 800778e:	2202      	movs	r2, #2
 8007790:	701a      	strb	r2, [r3, #0]
 8007792:	e077      	b.n	8007884 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	212c      	movs	r1, #44	; 0x2c
 800779a:	fb01 f303 	mul.w	r3, r1, r3
 800779e:	4413      	add	r3, r2
 80077a0:	3361      	adds	r3, #97	; 0x61
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b05      	cmp	r3, #5
 80077a6:	d109      	bne.n	80077bc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	212c      	movs	r1, #44	; 0x2c
 80077ae:	fb01 f303 	mul.w	r3, r1, r3
 80077b2:	4413      	add	r3, r2
 80077b4:	3360      	adds	r3, #96	; 0x60
 80077b6:	2205      	movs	r2, #5
 80077b8:	701a      	strb	r2, [r3, #0]
 80077ba:	e063      	b.n	8007884 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	212c      	movs	r1, #44	; 0x2c
 80077c2:	fb01 f303 	mul.w	r3, r1, r3
 80077c6:	4413      	add	r3, r2
 80077c8:	3361      	adds	r3, #97	; 0x61
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b06      	cmp	r3, #6
 80077ce:	d009      	beq.n	80077e4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	212c      	movs	r1, #44	; 0x2c
 80077d6:	fb01 f303 	mul.w	r3, r1, r3
 80077da:	4413      	add	r3, r2
 80077dc:	3361      	adds	r3, #97	; 0x61
 80077de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80077e0:	2b08      	cmp	r3, #8
 80077e2:	d14f      	bne.n	8007884 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	212c      	movs	r1, #44	; 0x2c
 80077ea:	fb01 f303 	mul.w	r3, r1, r3
 80077ee:	4413      	add	r3, r2
 80077f0:	335c      	adds	r3, #92	; 0x5c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	202c      	movs	r0, #44	; 0x2c
 80077fc:	fb00 f303 	mul.w	r3, r0, r3
 8007800:	440b      	add	r3, r1
 8007802:	335c      	adds	r3, #92	; 0x5c
 8007804:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	212c      	movs	r1, #44	; 0x2c
 800780c:	fb01 f303 	mul.w	r3, r1, r3
 8007810:	4413      	add	r3, r2
 8007812:	335c      	adds	r3, #92	; 0x5c
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b02      	cmp	r3, #2
 8007818:	d912      	bls.n	8007840 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	212c      	movs	r1, #44	; 0x2c
 8007820:	fb01 f303 	mul.w	r3, r1, r3
 8007824:	4413      	add	r3, r2
 8007826:	335c      	adds	r3, #92	; 0x5c
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	212c      	movs	r1, #44	; 0x2c
 8007832:	fb01 f303 	mul.w	r3, r1, r3
 8007836:	4413      	add	r3, r2
 8007838:	3360      	adds	r3, #96	; 0x60
 800783a:	2204      	movs	r2, #4
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	e021      	b.n	8007884 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	212c      	movs	r1, #44	; 0x2c
 8007846:	fb01 f303 	mul.w	r3, r1, r3
 800784a:	4413      	add	r3, r2
 800784c:	3360      	adds	r3, #96	; 0x60
 800784e:	2202      	movs	r2, #2
 8007850:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	4413      	add	r3, r2
 800785a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007868:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007870:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	4413      	add	r3, r2
 800787a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800787e:	461a      	mov	r2, r3
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	4413      	add	r3, r2
 800788c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007890:	461a      	mov	r2, r3
 8007892:	2302      	movs	r3, #2
 8007894:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	b2d9      	uxtb	r1, r3
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	202c      	movs	r0, #44	; 0x2c
 80078a0:	fb00 f303 	mul.w	r3, r0, r3
 80078a4:	4413      	add	r3, r2
 80078a6:	3360      	adds	r3, #96	; 0x60
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f005 fec3 	bl	800d638 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80078b2:	bf00      	nop
 80078b4:	3720      	adds	r7, #32
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b08a      	sub	sp, #40	; 0x28
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	0c5b      	lsrs	r3, r3, #17
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	091b      	lsrs	r3, r3, #4
 80078ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078ee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d004      	beq.n	8007900 <HCD_RXQLVL_IRQHandler+0x46>
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b05      	cmp	r3, #5
 80078fa:	f000 80a9 	beq.w	8007a50 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80078fe:	e0aa      	b.n	8007a56 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80a6 	beq.w	8007a54 <HCD_RXQLVL_IRQHandler+0x19a>
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	212c      	movs	r1, #44	; 0x2c
 800790e:	fb01 f303 	mul.w	r3, r1, r3
 8007912:	4413      	add	r3, r2
 8007914:	3344      	adds	r3, #68	; 0x44
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 809b 	beq.w	8007a54 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	212c      	movs	r1, #44	; 0x2c
 8007924:	fb01 f303 	mul.w	r3, r1, r3
 8007928:	4413      	add	r3, r2
 800792a:	3350      	adds	r3, #80	; 0x50
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	441a      	add	r2, r3
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	202c      	movs	r0, #44	; 0x2c
 8007938:	fb00 f303 	mul.w	r3, r0, r3
 800793c:	440b      	add	r3, r1
 800793e:	334c      	adds	r3, #76	; 0x4c
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	429a      	cmp	r2, r3
 8007944:	d87a      	bhi.n	8007a3c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	212c      	movs	r1, #44	; 0x2c
 8007950:	fb01 f303 	mul.w	r3, r1, r3
 8007954:	4413      	add	r3, r2
 8007956:	3344      	adds	r3, #68	; 0x44
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	b292      	uxth	r2, r2
 800795e:	4619      	mov	r1, r3
 8007960:	f003 fae0 	bl	800af24 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	212c      	movs	r1, #44	; 0x2c
 800796a:	fb01 f303 	mul.w	r3, r1, r3
 800796e:	4413      	add	r3, r2
 8007970:	3344      	adds	r3, #68	; 0x44
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	441a      	add	r2, r3
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	202c      	movs	r0, #44	; 0x2c
 800797e:	fb00 f303 	mul.w	r3, r0, r3
 8007982:	440b      	add	r3, r1
 8007984:	3344      	adds	r3, #68	; 0x44
 8007986:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	212c      	movs	r1, #44	; 0x2c
 800798e:	fb01 f303 	mul.w	r3, r1, r3
 8007992:	4413      	add	r3, r2
 8007994:	3350      	adds	r3, #80	; 0x50
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	441a      	add	r2, r3
 800799c:	6879      	ldr	r1, [r7, #4]
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	202c      	movs	r0, #44	; 0x2c
 80079a2:	fb00 f303 	mul.w	r3, r0, r3
 80079a6:	440b      	add	r3, r1
 80079a8:	3350      	adds	r3, #80	; 0x50
 80079aa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	0cdb      	lsrs	r3, r3, #19
 80079bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079c0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	212c      	movs	r1, #44	; 0x2c
 80079c8:	fb01 f303 	mul.w	r3, r1, r3
 80079cc:	4413      	add	r3, r2
 80079ce:	3340      	adds	r3, #64	; 0x40
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d13c      	bne.n	8007a54 <HCD_RXQLVL_IRQHandler+0x19a>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d039      	beq.n	8007a54 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079f6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079fe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	212c      	movs	r1, #44	; 0x2c
 8007a18:	fb01 f303 	mul.w	r3, r1, r3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3354      	adds	r3, #84	; 0x54
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f083 0301 	eor.w	r3, r3, #1
 8007a26:	b2d8      	uxtb	r0, r3
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	212c      	movs	r1, #44	; 0x2c
 8007a2e:	fb01 f303 	mul.w	r3, r1, r3
 8007a32:	4413      	add	r3, r2
 8007a34:	3354      	adds	r3, #84	; 0x54
 8007a36:	4602      	mov	r2, r0
 8007a38:	701a      	strb	r2, [r3, #0]
      break;
 8007a3a:	e00b      	b.n	8007a54 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	212c      	movs	r1, #44	; 0x2c
 8007a42:	fb01 f303 	mul.w	r3, r1, r3
 8007a46:	4413      	add	r3, r2
 8007a48:	3360      	adds	r3, #96	; 0x60
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	701a      	strb	r2, [r3, #0]
      break;
 8007a4e:	e001      	b.n	8007a54 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007a50:	bf00      	nop
 8007a52:	e000      	b.n	8007a56 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007a54:	bf00      	nop
  }
}
 8007a56:	bf00      	nop
 8007a58:	3728      	adds	r7, #40	; 0x28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b086      	sub	sp, #24
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007a8a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d10b      	bne.n	8007aae <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d102      	bne.n	8007aa6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f005 fdad 	bl	800d600 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f043 0302 	orr.w	r3, r3, #2
 8007aac:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d132      	bne.n	8007b1e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f043 0308 	orr.w	r3, r3, #8
 8007abe:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d126      	bne.n	8007b18 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d113      	bne.n	8007afa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007ad8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007adc:	d106      	bne.n	8007aec <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2102      	movs	r1, #2
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f003 fb8b 	bl	800b200 <USB_InitFSLSPClkSel>
 8007aea:	e011      	b.n	8007b10 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2101      	movs	r1, #1
 8007af2:	4618      	mov	r0, r3
 8007af4:	f003 fb84 	bl	800b200 <USB_InitFSLSPClkSel>
 8007af8:	e00a      	b.n	8007b10 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d106      	bne.n	8007b10 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007b0e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f005 fd9f 	bl	800d654 <HAL_HCD_PortEnabled_Callback>
 8007b16:	e002      	b.n	8007b1e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f005 fda9 	bl	800d670 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f003 0320 	and.w	r3, r3, #32
 8007b24:	2b20      	cmp	r3, #32
 8007b26:	d103      	bne.n	8007b30 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f043 0320 	orr.w	r3, r3, #32
 8007b2e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b36:	461a      	mov	r2, r3
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	6013      	str	r3, [r2, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e12b      	b.n	8007dae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d106      	bne.n	8007b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7fb fd6c 	bl	8003648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2224      	movs	r2, #36	; 0x24
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0201 	bic.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ba6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ba8:	f002 f970 	bl	8009e8c <HAL_RCC_GetPCLK1Freq>
 8007bac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	4a81      	ldr	r2, [pc, #516]	; (8007db8 <HAL_I2C_Init+0x274>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d807      	bhi.n	8007bc8 <HAL_I2C_Init+0x84>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4a80      	ldr	r2, [pc, #512]	; (8007dbc <HAL_I2C_Init+0x278>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	bf94      	ite	ls
 8007bc0:	2301      	movls	r3, #1
 8007bc2:	2300      	movhi	r3, #0
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	e006      	b.n	8007bd6 <HAL_I2C_Init+0x92>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4a7d      	ldr	r2, [pc, #500]	; (8007dc0 <HAL_I2C_Init+0x27c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	bf94      	ite	ls
 8007bd0:	2301      	movls	r3, #1
 8007bd2:	2300      	movhi	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e0e7      	b.n	8007dae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4a78      	ldr	r2, [pc, #480]	; (8007dc4 <HAL_I2C_Init+0x280>)
 8007be2:	fba2 2303 	umull	r2, r3, r2, r3
 8007be6:	0c9b      	lsrs	r3, r3, #18
 8007be8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	4a6a      	ldr	r2, [pc, #424]	; (8007db8 <HAL_I2C_Init+0x274>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d802      	bhi.n	8007c18 <HAL_I2C_Init+0xd4>
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	3301      	adds	r3, #1
 8007c16:	e009      	b.n	8007c2c <HAL_I2C_Init+0xe8>
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
 8007c22:	4a69      	ldr	r2, [pc, #420]	; (8007dc8 <HAL_I2C_Init+0x284>)
 8007c24:	fba2 2303 	umull	r2, r3, r2, r3
 8007c28:	099b      	lsrs	r3, r3, #6
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	6812      	ldr	r2, [r2, #0]
 8007c30:	430b      	orrs	r3, r1
 8007c32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007c3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	495c      	ldr	r1, [pc, #368]	; (8007db8 <HAL_I2C_Init+0x274>)
 8007c48:	428b      	cmp	r3, r1
 8007c4a:	d819      	bhi.n	8007c80 <HAL_I2C_Init+0x13c>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	1e59      	subs	r1, r3, #1
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c5a:	1c59      	adds	r1, r3, #1
 8007c5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c60:	400b      	ands	r3, r1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00a      	beq.n	8007c7c <HAL_I2C_Init+0x138>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	1e59      	subs	r1, r3, #1
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c74:	3301      	adds	r3, #1
 8007c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c7a:	e051      	b.n	8007d20 <HAL_I2C_Init+0x1dc>
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	e04f      	b.n	8007d20 <HAL_I2C_Init+0x1dc>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d111      	bne.n	8007cac <HAL_I2C_Init+0x168>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	1e58      	subs	r0, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6859      	ldr	r1, [r3, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	440b      	add	r3, r1
 8007c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	bf0c      	ite	eq
 8007ca4:	2301      	moveq	r3, #1
 8007ca6:	2300      	movne	r3, #0
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	e012      	b.n	8007cd2 <HAL_I2C_Init+0x18e>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	1e58      	subs	r0, r3, #1
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6859      	ldr	r1, [r3, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	0099      	lsls	r1, r3, #2
 8007cbc:	440b      	add	r3, r1
 8007cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bf0c      	ite	eq
 8007ccc:	2301      	moveq	r3, #1
 8007cce:	2300      	movne	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <HAL_I2C_Init+0x196>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e022      	b.n	8007d20 <HAL_I2C_Init+0x1dc>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10e      	bne.n	8007d00 <HAL_I2C_Init+0x1bc>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	1e58      	subs	r0, r3, #1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6859      	ldr	r1, [r3, #4]
 8007cea:	460b      	mov	r3, r1
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	440b      	add	r3, r1
 8007cf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cfe:	e00f      	b.n	8007d20 <HAL_I2C_Init+0x1dc>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	1e58      	subs	r0, r3, #1
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6859      	ldr	r1, [r3, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	440b      	add	r3, r1
 8007d0e:	0099      	lsls	r1, r3, #2
 8007d10:	440b      	add	r3, r1
 8007d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d16:	3301      	adds	r3, #1
 8007d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	6809      	ldr	r1, [r1, #0]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69da      	ldr	r2, [r3, #28]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007d4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6911      	ldr	r1, [r2, #16]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	68d2      	ldr	r2, [r2, #12]
 8007d5a:	4311      	orrs	r1, r2
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	6812      	ldr	r2, [r2, #0]
 8007d60:	430b      	orrs	r3, r1
 8007d62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	695a      	ldr	r2, [r3, #20]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	431a      	orrs	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0201 	orr.w	r2, r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	000186a0 	.word	0x000186a0
 8007dbc:	001e847f 	.word	0x001e847f
 8007dc0:	003d08ff 	.word	0x003d08ff
 8007dc4:	431bde83 	.word	0x431bde83
 8007dc8:	10624dd3 	.word	0x10624dd3

08007dcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b088      	sub	sp, #32
 8007dd0:	af02      	add	r7, sp, #8
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	607a      	str	r2, [r7, #4]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	460b      	mov	r3, r1
 8007dda:	817b      	strh	r3, [r7, #10]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007de0:	f7fc feea 	bl	8004bb8 <HAL_GetTick>
 8007de4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b20      	cmp	r3, #32
 8007df0:	f040 80e0 	bne.w	8007fb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	2319      	movs	r3, #25
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	4970      	ldr	r1, [pc, #448]	; (8007fc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 fc58 	bl	80086b4 <I2C_WaitOnFlagUntilTimeout>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	e0d3      	b.n	8007fb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <HAL_I2C_Master_Transmit+0x50>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e0cc      	b.n	8007fb6 <HAL_I2C_Master_Transmit+0x1ea>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d007      	beq.n	8007e42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f042 0201 	orr.w	r2, r2, #1
 8007e40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2221      	movs	r2, #33	; 0x21
 8007e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2210      	movs	r2, #16
 8007e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	893a      	ldrh	r2, [r7, #8]
 8007e72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4a50      	ldr	r2, [pc, #320]	; (8007fc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8007e82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007e84:	8979      	ldrh	r1, [r7, #10]
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	6a3a      	ldr	r2, [r7, #32]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 fac2 	bl	8008414 <I2C_MasterRequestWrite>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e08d      	b.n	8007fb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	613b      	str	r3, [r7, #16]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	613b      	str	r3, [r7, #16]
 8007eae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007eb0:	e066      	b.n	8007f80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	6a39      	ldr	r1, [r7, #32]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 fcd2 	bl	8008860 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00d      	beq.n	8007ede <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d107      	bne.n	8007eda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ed8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e06b      	b.n	8007fb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	781a      	ldrb	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	d11b      	bne.n	8007f54 <HAL_I2C_Master_Transmit+0x188>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d017      	beq.n	8007f54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	781a      	ldrb	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3b01      	subs	r3, #1
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	6a39      	ldr	r1, [r7, #32]
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f000 fcc2 	bl	80088e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00d      	beq.n	8007f80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	d107      	bne.n	8007f7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e01a      	b.n	8007fb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d194      	bne.n	8007eb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e000      	b.n	8007fb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007fb4:	2302      	movs	r3, #2
  }
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	00100002 	.word	0x00100002
 8007fc4:	ffff0000 	.word	0xffff0000

08007fc8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08c      	sub	sp, #48	; 0x30
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	607a      	str	r2, [r7, #4]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	817b      	strh	r3, [r7, #10]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fdc:	f7fc fdec 	bl	8004bb8 <HAL_GetTick>
 8007fe0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b20      	cmp	r3, #32
 8007fec:	f040 820b 	bne.w	8008406 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	2319      	movs	r3, #25
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	497c      	ldr	r1, [pc, #496]	; (80081ec <HAL_I2C_Master_Receive+0x224>)
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 fb5a 	bl	80086b4 <I2C_WaitOnFlagUntilTimeout>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008006:	2302      	movs	r3, #2
 8008008:	e1fe      	b.n	8008408 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008010:	2b01      	cmp	r3, #1
 8008012:	d101      	bne.n	8008018 <HAL_I2C_Master_Receive+0x50>
 8008014:	2302      	movs	r3, #2
 8008016:	e1f7      	b.n	8008408 <HAL_I2C_Master_Receive+0x440>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b01      	cmp	r3, #1
 800802c:	d007      	beq.n	800803e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f042 0201 	orr.w	r2, r2, #1
 800803c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800804c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2222      	movs	r2, #34	; 0x22
 8008052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2210      	movs	r2, #16
 800805a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	893a      	ldrh	r2, [r7, #8]
 800806e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008074:	b29a      	uxth	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4a5c      	ldr	r2, [pc, #368]	; (80081f0 <HAL_I2C_Master_Receive+0x228>)
 800807e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008080:	8979      	ldrh	r1, [r7, #10]
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 fa46 	bl	8008518 <I2C_MasterRequestRead>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e1b8      	b.n	8008408 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809a:	2b00      	cmp	r3, #0
 800809c:	d113      	bne.n	80080c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800809e:	2300      	movs	r3, #0
 80080a0:	623b      	str	r3, [r7, #32]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	623b      	str	r3, [r7, #32]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	623b      	str	r3, [r7, #32]
 80080b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	e18c      	b.n	80083e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d11b      	bne.n	8008106 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080de:	2300      	movs	r3, #0
 80080e0:	61fb      	str	r3, [r7, #28]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	61fb      	str	r3, [r7, #28]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	61fb      	str	r3, [r7, #28]
 80080f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	e16c      	b.n	80083e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800810a:	2b02      	cmp	r3, #2
 800810c:	d11b      	bne.n	8008146 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800811c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800812c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800812e:	2300      	movs	r3, #0
 8008130:	61bb      	str	r3, [r7, #24]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	61bb      	str	r3, [r7, #24]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	61bb      	str	r3, [r7, #24]
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	e14c      	b.n	80083e0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008156:	2300      	movs	r3, #0
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	617b      	str	r3, [r7, #20]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	617b      	str	r3, [r7, #20]
 800816a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800816c:	e138      	b.n	80083e0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008172:	2b03      	cmp	r3, #3
 8008174:	f200 80f1 	bhi.w	800835a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800817c:	2b01      	cmp	r3, #1
 800817e:	d123      	bne.n	80081c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008182:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fbed 	bl	8008964 <I2C_WaitOnRXNEFlagUntilTimeout>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e139      	b.n	8008408 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691a      	ldr	r2, [r3, #16]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081bc:	b29b      	uxth	r3, r3
 80081be:	3b01      	subs	r3, #1
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081c6:	e10b      	b.n	80083e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d14e      	bne.n	800826e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	2200      	movs	r2, #0
 80081d8:	4906      	ldr	r1, [pc, #24]	; (80081f4 <HAL_I2C_Master_Receive+0x22c>)
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fa6a 	bl	80086b4 <I2C_WaitOnFlagUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d008      	beq.n	80081f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e10e      	b.n	8008408 <HAL_I2C_Master_Receive+0x440>
 80081ea:	bf00      	nop
 80081ec:	00100002 	.word	0x00100002
 80081f0:	ffff0000 	.word	0xffff0000
 80081f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	691a      	ldr	r2, [r3, #16]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	b2d2      	uxtb	r2, r2
 8008214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008224:	3b01      	subs	r3, #1
 8008226:	b29a      	uxth	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008230:	b29b      	uxth	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	b2d2      	uxtb	r2, r2
 8008246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008256:	3b01      	subs	r3, #1
 8008258:	b29a      	uxth	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008262:	b29b      	uxth	r3, r3
 8008264:	3b01      	subs	r3, #1
 8008266:	b29a      	uxth	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800826c:	e0b8      	b.n	80083e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	2200      	movs	r2, #0
 8008276:	4966      	ldr	r1, [pc, #408]	; (8008410 <HAL_I2C_Master_Receive+0x448>)
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 fa1b 	bl	80086b4 <I2C_WaitOnFlagUntilTimeout>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e0bf      	b.n	8008408 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691a      	ldr	r2, [r3, #16]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	b2d2      	uxtb	r2, r2
 80082a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b4:	3b01      	subs	r3, #1
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	3b01      	subs	r3, #1
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	2200      	movs	r2, #0
 80082d2:	494f      	ldr	r1, [pc, #316]	; (8008410 <HAL_I2C_Master_Receive+0x448>)
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 f9ed 	bl	80086b4 <I2C_WaitOnFlagUntilTimeout>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e091      	b.n	8008408 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691a      	ldr	r2, [r3, #16]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008310:	3b01      	subs	r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800831c:	b29b      	uxth	r3, r3
 800831e:	3b01      	subs	r3, #1
 8008320:	b29a      	uxth	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	691a      	ldr	r2, [r3, #16]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	b2d2      	uxtb	r2, r2
 8008332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008342:	3b01      	subs	r3, #1
 8008344:	b29a      	uxth	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800834e:	b29b      	uxth	r3, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008358:	e042      	b.n	80083e0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800835a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800835c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 fb00 	bl	8008964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e04c      	b.n	8008408 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	691a      	ldr	r2, [r3, #16]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	b2d2      	uxtb	r2, r2
 800837a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838a:	3b01      	subs	r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008396:	b29b      	uxth	r3, r3
 8008398:	3b01      	subs	r3, #1
 800839a:	b29a      	uxth	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	f003 0304 	and.w	r3, r3, #4
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d118      	bne.n	80083e0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	691a      	ldr	r2, [r3, #16]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	b2d2      	uxtb	r2, r2
 80083ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ca:	3b01      	subs	r3, #1
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f47f aec2 	bne.w	800816e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2220      	movs	r2, #32
 80083ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	e000      	b.n	8008408 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008406:	2302      	movs	r3, #2
  }
}
 8008408:	4618      	mov	r0, r3
 800840a:	3728      	adds	r7, #40	; 0x28
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	00010004 	.word	0x00010004

08008414 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b088      	sub	sp, #32
 8008418:	af02      	add	r7, sp, #8
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	607a      	str	r2, [r7, #4]
 800841e:	603b      	str	r3, [r7, #0]
 8008420:	460b      	mov	r3, r1
 8008422:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2b08      	cmp	r3, #8
 800842e:	d006      	beq.n	800843e <I2C_MasterRequestWrite+0x2a>
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d003      	beq.n	800843e <I2C_MasterRequestWrite+0x2a>
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800843c:	d108      	bne.n	8008450 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	e00b      	b.n	8008468 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008454:	2b12      	cmp	r3, #18
 8008456:	d107      	bne.n	8008468 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008466:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f91d 	bl	80086b4 <I2C_WaitOnFlagUntilTimeout>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00d      	beq.n	800849c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800848a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800848e:	d103      	bne.n	8008498 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008496:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e035      	b.n	8008508 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084a4:	d108      	bne.n	80084b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084a6:	897b      	ldrh	r3, [r7, #10]
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	461a      	mov	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80084b4:	611a      	str	r2, [r3, #16]
 80084b6:	e01b      	b.n	80084f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80084b8:	897b      	ldrh	r3, [r7, #10]
 80084ba:	11db      	asrs	r3, r3, #7
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	f003 0306 	and.w	r3, r3, #6
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f063 030f 	orn	r3, r3, #15
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	490e      	ldr	r1, [pc, #56]	; (8008510 <I2C_MasterRequestWrite+0xfc>)
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f000 f943 	bl	8008762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e010      	b.n	8008508 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80084e6:	897b      	ldrh	r3, [r7, #10]
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	4907      	ldr	r1, [pc, #28]	; (8008514 <I2C_MasterRequestWrite+0x100>)
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 f933 	bl	8008762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e000      	b.n	8008508 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3718      	adds	r7, #24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	00010008 	.word	0x00010008
 8008514:	00010002 	.word	0x00010002

08008518 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af02      	add	r7, sp, #8
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	460b      	mov	r3, r1
 8008526:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800853c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b08      	cmp	r3, #8
 8008542:	d006      	beq.n	8008552 <I2C_MasterRequestRead+0x3a>
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d003      	beq.n	8008552 <I2C_MasterRequestRead+0x3a>
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008550:	d108      	bne.n	8008564 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	e00b      	b.n	800857c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008568:	2b11      	cmp	r3, #17
 800856a:	d107      	bne.n	800857c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800857a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 f893 	bl	80086b4 <I2C_WaitOnFlagUntilTimeout>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00d      	beq.n	80085b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800859e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085a2:	d103      	bne.n	80085ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e079      	b.n	80086a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085b8:	d108      	bne.n	80085cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80085ba:	897b      	ldrh	r3, [r7, #10]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	f043 0301 	orr.w	r3, r3, #1
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	611a      	str	r2, [r3, #16]
 80085ca:	e05f      	b.n	800868c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80085cc:	897b      	ldrh	r3, [r7, #10]
 80085ce:	11db      	asrs	r3, r3, #7
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	f003 0306 	and.w	r3, r3, #6
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f063 030f 	orn	r3, r3, #15
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	4930      	ldr	r1, [pc, #192]	; (80086ac <I2C_MasterRequestRead+0x194>)
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 f8b9 	bl	8008762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e054      	b.n	80086a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80085fa:	897b      	ldrh	r3, [r7, #10]
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	4929      	ldr	r1, [pc, #164]	; (80086b0 <I2C_MasterRequestRead+0x198>)
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 f8a9 	bl	8008762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e044      	b.n	80086a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800861a:	2300      	movs	r3, #0
 800861c:	613b      	str	r3, [r7, #16]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	613b      	str	r3, [r7, #16]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	613b      	str	r3, [r7, #16]
 800862e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800863e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 f831 	bl	80086b4 <I2C_WaitOnFlagUntilTimeout>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00d      	beq.n	8008674 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008666:	d103      	bne.n	8008670 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800866e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e017      	b.n	80086a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008674:	897b      	ldrh	r3, [r7, #10]
 8008676:	11db      	asrs	r3, r3, #7
 8008678:	b2db      	uxtb	r3, r3
 800867a:	f003 0306 	and.w	r3, r3, #6
 800867e:	b2db      	uxtb	r3, r3
 8008680:	f063 030e 	orn	r3, r3, #14
 8008684:	b2da      	uxtb	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	4907      	ldr	r1, [pc, #28]	; (80086b0 <I2C_MasterRequestRead+0x198>)
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f000 f865 	bl	8008762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e000      	b.n	80086a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	00010008 	.word	0x00010008
 80086b0:	00010002 	.word	0x00010002

080086b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	4613      	mov	r3, r2
 80086c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086c4:	e025      	b.n	8008712 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086cc:	d021      	beq.n	8008712 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ce:	f7fc fa73 	bl	8004bb8 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d302      	bcc.n	80086e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d116      	bne.n	8008712 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2220      	movs	r2, #32
 80086ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	f043 0220 	orr.w	r2, r3, #32
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e023      	b.n	800875a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	0c1b      	lsrs	r3, r3, #16
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b01      	cmp	r3, #1
 800871a:	d10d      	bne.n	8008738 <I2C_WaitOnFlagUntilTimeout+0x84>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	43da      	mvns	r2, r3
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	4013      	ands	r3, r2
 8008728:	b29b      	uxth	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	bf0c      	ite	eq
 800872e:	2301      	moveq	r3, #1
 8008730:	2300      	movne	r3, #0
 8008732:	b2db      	uxtb	r3, r3
 8008734:	461a      	mov	r2, r3
 8008736:	e00c      	b.n	8008752 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	43da      	mvns	r2, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	4013      	ands	r3, r2
 8008744:	b29b      	uxth	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	bf0c      	ite	eq
 800874a:	2301      	moveq	r3, #1
 800874c:	2300      	movne	r3, #0
 800874e:	b2db      	uxtb	r3, r3
 8008750:	461a      	mov	r2, r3
 8008752:	79fb      	ldrb	r3, [r7, #7]
 8008754:	429a      	cmp	r2, r3
 8008756:	d0b6      	beq.n	80086c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008770:	e051      	b.n	8008816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800877c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008780:	d123      	bne.n	80087ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008790:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800879a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2220      	movs	r2, #32
 80087a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	f043 0204 	orr.w	r2, r3, #4
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e046      	b.n	8008858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087d0:	d021      	beq.n	8008816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087d2:	f7fc f9f1 	bl	8004bb8 <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d302      	bcc.n	80087e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d116      	bne.n	8008816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2220      	movs	r2, #32
 80087f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	f043 0220 	orr.w	r2, r3, #32
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e020      	b.n	8008858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	0c1b      	lsrs	r3, r3, #16
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b01      	cmp	r3, #1
 800881e:	d10c      	bne.n	800883a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	43da      	mvns	r2, r3
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4013      	ands	r3, r2
 800882c:	b29b      	uxth	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	bf14      	ite	ne
 8008832:	2301      	movne	r3, #1
 8008834:	2300      	moveq	r3, #0
 8008836:	b2db      	uxtb	r3, r3
 8008838:	e00b      	b.n	8008852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	43da      	mvns	r2, r3
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	4013      	ands	r3, r2
 8008846:	b29b      	uxth	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	bf14      	ite	ne
 800884c:	2301      	movne	r3, #1
 800884e:	2300      	moveq	r3, #0
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d18d      	bne.n	8008772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800886c:	e02d      	b.n	80088ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f000 f8ce 	bl	8008a10 <I2C_IsAcknowledgeFailed>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e02d      	b.n	80088da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008884:	d021      	beq.n	80088ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008886:	f7fc f997 	bl	8004bb8 <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	429a      	cmp	r2, r3
 8008894:	d302      	bcc.n	800889c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d116      	bne.n	80088ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b6:	f043 0220 	orr.w	r2, r3, #32
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e007      	b.n	80088da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d4:	2b80      	cmp	r3, #128	; 0x80
 80088d6:	d1ca      	bne.n	800886e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	60f8      	str	r0, [r7, #12]
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088ee:	e02d      	b.n	800894c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 f88d 	bl	8008a10 <I2C_IsAcknowledgeFailed>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e02d      	b.n	800895c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008906:	d021      	beq.n	800894c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008908:	f7fc f956 	bl	8004bb8 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	429a      	cmp	r2, r3
 8008916:	d302      	bcc.n	800891e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d116      	bne.n	800894c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2220      	movs	r2, #32
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008938:	f043 0220 	orr.w	r2, r3, #32
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e007      	b.n	800895c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b04      	cmp	r3, #4
 8008958:	d1ca      	bne.n	80088f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008970:	e042      	b.n	80089f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	f003 0310 	and.w	r3, r3, #16
 800897c:	2b10      	cmp	r3, #16
 800897e:	d119      	bne.n	80089b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f06f 0210 	mvn.w	r2, #16
 8008988:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2220      	movs	r2, #32
 8008994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e029      	b.n	8008a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089b4:	f7fc f900 	bl	8004bb8 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d302      	bcc.n	80089ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d116      	bne.n	80089f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e4:	f043 0220 	orr.w	r2, r3, #32
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e007      	b.n	8008a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a02:	2b40      	cmp	r3, #64	; 0x40
 8008a04:	d1b5      	bne.n	8008972 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a26:	d11b      	bne.n	8008a60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4c:	f043 0204 	orr.w	r2, r3, #4
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e000      	b.n	8008a62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
	...

08008a70 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e128      	b.n	8008cd4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d109      	bne.n	8008aa2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a90      	ldr	r2, [pc, #576]	; (8008cdc <HAL_I2S_Init+0x26c>)
 8008a9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7fa fe1b 	bl	80036d8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	6812      	ldr	r2, [r2, #0]
 8008ab4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008ab8:	f023 030f 	bic.w	r3, r3, #15
 8008abc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d060      	beq.n	8008b90 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d102      	bne.n	8008adc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008ad6:	2310      	movs	r3, #16
 8008ad8:	617b      	str	r3, [r7, #20]
 8008ada:	e001      	b.n	8008ae0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008adc:	2320      	movs	r3, #32
 8008ade:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d802      	bhi.n	8008aee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	005b      	lsls	r3, r3, #1
 8008aec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8008aee:	2001      	movs	r0, #1
 8008af0:	f001 fac2 	bl	800a078 <HAL_RCCEx_GetPeriphCLKFreq>
 8008af4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008afe:	d125      	bne.n	8008b4c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d010      	beq.n	8008b2a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b24:	3305      	adds	r3, #5
 8008b26:	613b      	str	r3, [r7, #16]
 8008b28:	e01f      	b.n	8008b6a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	005b      	lsls	r3, r3, #1
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b46:	3305      	adds	r3, #5
 8008b48:	613b      	str	r3, [r7, #16]
 8008b4a:	e00e      	b.n	8008b6a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b66:	3305      	adds	r3, #5
 8008b68:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	4a5c      	ldr	r2, [pc, #368]	; (8008ce0 <HAL_I2S_Init+0x270>)
 8008b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b72:	08db      	lsrs	r3, r3, #3
 8008b74:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	085b      	lsrs	r3, r3, #1
 8008b86:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	021b      	lsls	r3, r3, #8
 8008b8c:	61bb      	str	r3, [r7, #24]
 8008b8e:	e003      	b.n	8008b98 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008b90:	2302      	movs	r3, #2
 8008b92:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d902      	bls.n	8008ba4 <HAL_I2S_Init+0x134>
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	2bff      	cmp	r3, #255	; 0xff
 8008ba2:	d907      	bls.n	8008bb4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ba8:	f043 0210 	orr.w	r2, r3, #16
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e08f      	b.n	8008cd4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	691a      	ldr	r2, [r3, #16]
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	ea42 0103 	orr.w	r1, r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008bd2:	f023 030f 	bic.w	r3, r3, #15
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	6851      	ldr	r1, [r2, #4]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	6892      	ldr	r2, [r2, #8]
 8008bde:	4311      	orrs	r1, r2
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	68d2      	ldr	r2, [r2, #12]
 8008be4:	4311      	orrs	r1, r2
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6992      	ldr	r2, [r2, #24]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	431a      	orrs	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bf6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d161      	bne.n	8008cc4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a38      	ldr	r2, [pc, #224]	; (8008ce4 <HAL_I2S_Init+0x274>)
 8008c04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a37      	ldr	r2, [pc, #220]	; (8008ce8 <HAL_I2S_Init+0x278>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d101      	bne.n	8008c14 <HAL_I2S_Init+0x1a4>
 8008c10:	4b36      	ldr	r3, [pc, #216]	; (8008cec <HAL_I2S_Init+0x27c>)
 8008c12:	e001      	b.n	8008c18 <HAL_I2S_Init+0x1a8>
 8008c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	6812      	ldr	r2, [r2, #0]
 8008c1e:	4932      	ldr	r1, [pc, #200]	; (8008ce8 <HAL_I2S_Init+0x278>)
 8008c20:	428a      	cmp	r2, r1
 8008c22:	d101      	bne.n	8008c28 <HAL_I2S_Init+0x1b8>
 8008c24:	4a31      	ldr	r2, [pc, #196]	; (8008cec <HAL_I2S_Init+0x27c>)
 8008c26:	e001      	b.n	8008c2c <HAL_I2S_Init+0x1bc>
 8008c28:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8008c2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008c30:	f023 030f 	bic.w	r3, r3, #15
 8008c34:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a2b      	ldr	r2, [pc, #172]	; (8008ce8 <HAL_I2S_Init+0x278>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d101      	bne.n	8008c44 <HAL_I2S_Init+0x1d4>
 8008c40:	4b2a      	ldr	r3, [pc, #168]	; (8008cec <HAL_I2S_Init+0x27c>)
 8008c42:	e001      	b.n	8008c48 <HAL_I2S_Init+0x1d8>
 8008c44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c48:	2202      	movs	r2, #2
 8008c4a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a25      	ldr	r2, [pc, #148]	; (8008ce8 <HAL_I2S_Init+0x278>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d101      	bne.n	8008c5a <HAL_I2S_Init+0x1ea>
 8008c56:	4b25      	ldr	r3, [pc, #148]	; (8008cec <HAL_I2S_Init+0x27c>)
 8008c58:	e001      	b.n	8008c5e <HAL_I2S_Init+0x1ee>
 8008c5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c6a:	d003      	beq.n	8008c74 <HAL_I2S_Init+0x204>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d103      	bne.n	8008c7c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c78:	613b      	str	r3, [r7, #16]
 8008c7a:	e001      	b.n	8008c80 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008c94:	4313      	orrs	r3, r2
 8008c96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	897b      	ldrh	r3, [r7, #10]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008cac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a0d      	ldr	r2, [pc, #52]	; (8008ce8 <HAL_I2S_Init+0x278>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d101      	bne.n	8008cbc <HAL_I2S_Init+0x24c>
 8008cb8:	4b0c      	ldr	r3, [pc, #48]	; (8008cec <HAL_I2S_Init+0x27c>)
 8008cba:	e001      	b.n	8008cc0 <HAL_I2S_Init+0x250>
 8008cbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008cc0:	897a      	ldrh	r2, [r7, #10]
 8008cc2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3720      	adds	r7, #32
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	08008fe5 	.word	0x08008fe5
 8008ce0:	cccccccd 	.word	0xcccccccd
 8008ce4:	080090f9 	.word	0x080090f9
 8008ce8:	40003800 	.word	0x40003800
 8008cec:	40003400 	.word	0x40003400

08008cf0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <HAL_I2S_Transmit_DMA+0x1a>
 8008d04:	88fb      	ldrh	r3, [r7, #6]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e08e      	b.n	8008e2c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d101      	bne.n	8008d1e <HAL_I2S_Transmit_DMA+0x2e>
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	e086      	b.n	8008e2c <HAL_I2S_Transmit_DMA+0x13c>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d005      	beq.n	8008d3e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e076      	b.n	8008e2c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2203      	movs	r2, #3
 8008d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	f003 0307 	and.w	r3, r3, #7
 8008d5c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d002      	beq.n	8008d6a <HAL_I2S_Transmit_DMA+0x7a>
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	2b05      	cmp	r3, #5
 8008d68:	d10a      	bne.n	8008d80 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8008d6a:	88fb      	ldrh	r3, [r7, #6]
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8008d74:	88fb      	ldrh	r3, [r7, #6]
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d7e:	e005      	b.n	8008d8c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	88fa      	ldrh	r2, [r7, #6]
 8008d84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	88fa      	ldrh	r2, [r7, #6]
 8008d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d90:	4a28      	ldr	r2, [pc, #160]	; (8008e34 <HAL_I2S_Transmit_DMA+0x144>)
 8008d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d98:	4a27      	ldr	r2, [pc, #156]	; (8008e38 <HAL_I2S_Transmit_DMA+0x148>)
 8008d9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	4a26      	ldr	r2, [pc, #152]	; (8008e3c <HAL_I2S_Transmit_DMA+0x14c>)
 8008da2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008dac:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008db4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008dbc:	f7fc fe0e 	bl	80059dc <HAL_DMA_Start_IT>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00f      	beq.n	8008de6 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dca:	f043 0208 	orr.w	r2, r3, #8
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e022      	b.n	8008e2c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	69db      	ldr	r3, [r3, #28]
 8008dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d107      	bne.n	8008e04 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	69da      	ldr	r2, [r3, #28]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e02:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d107      	bne.n	8008e22 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f042 0202 	orr.w	r2, r2, #2
 8008e20:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	08008ec3 	.word	0x08008ec3
 8008e38:	08008e81 	.word	0x08008e81
 8008e3c:	08008edf 	.word	0x08008edf

08008e40 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	4798      	blx	r3
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10e      	bne.n	8008eb4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f022 0202 	bic.w	r2, r2, #2
 8008ea4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f7f9 faef 	bl	8002498 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f7f9 facb 	bl	800246c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008ed6:	bf00      	nop
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0203 	bic.w	r2, r2, #3
 8008efa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f14:	f043 0208 	orr.w	r2, r3, #8
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f7ff ffa5 	bl	8008e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008f22:	bf00      	nop
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b082      	sub	sp, #8
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	881a      	ldrh	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	1c9a      	adds	r2, r3, #2
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10e      	bne.n	8008f7e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008f6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7f9 fa8d 	bl	8002498 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	b292      	uxth	r2, r2
 8008f9a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa0:	1c9a      	adds	r2, r3, #2
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	3b01      	subs	r3, #1
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10e      	bne.n	8008fdc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008fcc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff ff3e 	bl	8008e58 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b04      	cmp	r3, #4
 8008ffe:	d13a      	bne.n	8009076 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b01      	cmp	r3, #1
 8009008:	d109      	bne.n	800901e <I2S_IRQHandler+0x3a>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009014:	2b40      	cmp	r3, #64	; 0x40
 8009016:	d102      	bne.n	800901e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff ffb4 	bl	8008f86 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009024:	2b40      	cmp	r3, #64	; 0x40
 8009026:	d126      	bne.n	8009076 <I2S_IRQHandler+0x92>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f003 0320 	and.w	r3, r3, #32
 8009032:	2b20      	cmp	r3, #32
 8009034:	d11f      	bne.n	8009076 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009044:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009046:	2300      	movs	r3, #0
 8009048:	613b      	str	r3, [r7, #16]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	613b      	str	r3, [r7, #16]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	613b      	str	r3, [r7, #16]
 800905a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009068:	f043 0202 	orr.w	r2, r3, #2
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff fefb 	bl	8008e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b03      	cmp	r3, #3
 8009080:	d136      	bne.n	80090f0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f003 0302 	and.w	r3, r3, #2
 8009088:	2b02      	cmp	r3, #2
 800908a:	d109      	bne.n	80090a0 <I2S_IRQHandler+0xbc>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009096:	2b80      	cmp	r3, #128	; 0x80
 8009098:	d102      	bne.n	80090a0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7ff ff45 	bl	8008f2a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f003 0308 	and.w	r3, r3, #8
 80090a6:	2b08      	cmp	r3, #8
 80090a8:	d122      	bne.n	80090f0 <I2S_IRQHandler+0x10c>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f003 0320 	and.w	r3, r3, #32
 80090b4:	2b20      	cmp	r3, #32
 80090b6:	d11b      	bne.n	80090f0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80090c6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80090c8:	2300      	movs	r3, #0
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e2:	f043 0204 	orr.w	r2, r3, #4
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7ff febe 	bl	8008e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80090f0:	bf00      	nop
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a92      	ldr	r2, [pc, #584]	; (8009358 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d101      	bne.n	8009116 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8009112:	4b92      	ldr	r3, [pc, #584]	; (800935c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009114:	e001      	b.n	800911a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8009116:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a8b      	ldr	r2, [pc, #556]	; (8009358 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d101      	bne.n	8009134 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8009130:	4b8a      	ldr	r3, [pc, #552]	; (800935c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009132:	e001      	b.n	8009138 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8009134:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009144:	d004      	beq.n	8009150 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	f040 8099 	bne.w	8009282 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	2b02      	cmp	r3, #2
 8009158:	d107      	bne.n	800916a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009160:	2b00      	cmp	r3, #0
 8009162:	d002      	beq.n	800916a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f925 	bl	80093b4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b01      	cmp	r3, #1
 8009172:	d107      	bne.n	8009184 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f9c8 	bl	8009514 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918a:	2b40      	cmp	r3, #64	; 0x40
 800918c:	d13a      	bne.n	8009204 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	f003 0320 	and.w	r3, r3, #32
 8009194:	2b00      	cmp	r3, #0
 8009196:	d035      	beq.n	8009204 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a6e      	ldr	r2, [pc, #440]	; (8009358 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d101      	bne.n	80091a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80091a2:	4b6e      	ldr	r3, [pc, #440]	; (800935c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80091a4:	e001      	b.n	80091aa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80091a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4969      	ldr	r1, [pc, #420]	; (8009358 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80091b2:	428b      	cmp	r3, r1
 80091b4:	d101      	bne.n	80091ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80091b6:	4b69      	ldr	r3, [pc, #420]	; (800935c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80091b8:	e001      	b.n	80091be <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80091ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80091be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80091c2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80091d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80091d4:	2300      	movs	r3, #0
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f6:	f043 0202 	orr.w	r2, r3, #2
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff fe34 	bl	8008e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	f003 0308 	and.w	r3, r3, #8
 800920a:	2b08      	cmp	r3, #8
 800920c:	f040 80c3 	bne.w	8009396 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f003 0320 	and.w	r3, r3, #32
 8009216:	2b00      	cmp	r3, #0
 8009218:	f000 80bd 	beq.w	8009396 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800922a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a49      	ldr	r2, [pc, #292]	; (8009358 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d101      	bne.n	800923a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8009236:	4b49      	ldr	r3, [pc, #292]	; (800935c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009238:	e001      	b.n	800923e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800923a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4944      	ldr	r1, [pc, #272]	; (8009358 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009246:	428b      	cmp	r3, r1
 8009248:	d101      	bne.n	800924e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800924a:	4b44      	ldr	r3, [pc, #272]	; (800935c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800924c:	e001      	b.n	8009252 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800924e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009252:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009256:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009258:	2300      	movs	r3, #0
 800925a:	60bb      	str	r3, [r7, #8]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	60bb      	str	r3, [r7, #8]
 8009264:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009272:	f043 0204 	orr.w	r2, r3, #4
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7ff fdf6 	bl	8008e6c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009280:	e089      	b.n	8009396 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	2b02      	cmp	r3, #2
 800928a:	d107      	bne.n	800929c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f8be 	bl	8009418 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d107      	bne.n	80092b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f8fd 	bl	80094b0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092bc:	2b40      	cmp	r3, #64	; 0x40
 80092be:	d12f      	bne.n	8009320 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	f003 0320 	and.w	r3, r3, #32
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d02a      	beq.n	8009320 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80092d8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a1e      	ldr	r2, [pc, #120]	; (8009358 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d101      	bne.n	80092e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80092e4:	4b1d      	ldr	r3, [pc, #116]	; (800935c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80092e6:	e001      	b.n	80092ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80092e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4919      	ldr	r1, [pc, #100]	; (8009358 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80092f4:	428b      	cmp	r3, r1
 80092f6:	d101      	bne.n	80092fc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80092f8:	4b18      	ldr	r3, [pc, #96]	; (800935c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80092fa:	e001      	b.n	8009300 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80092fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009300:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009304:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009312:	f043 0202 	orr.w	r2, r3, #2
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff fda6 	bl	8008e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	f003 0308 	and.w	r3, r3, #8
 8009326:	2b08      	cmp	r3, #8
 8009328:	d136      	bne.n	8009398 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	f003 0320 	and.w	r3, r3, #32
 8009330:	2b00      	cmp	r3, #0
 8009332:	d031      	beq.n	8009398 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a07      	ldr	r2, [pc, #28]	; (8009358 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d101      	bne.n	8009342 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800933e:	4b07      	ldr	r3, [pc, #28]	; (800935c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009340:	e001      	b.n	8009346 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8009342:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4902      	ldr	r1, [pc, #8]	; (8009358 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800934e:	428b      	cmp	r3, r1
 8009350:	d106      	bne.n	8009360 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8009352:	4b02      	ldr	r3, [pc, #8]	; (800935c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009354:	e006      	b.n	8009364 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8009356:	bf00      	nop
 8009358:	40003800 	.word	0x40003800
 800935c:	40003400 	.word	0x40003400
 8009360:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009364:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009368:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009378:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009386:	f043 0204 	orr.w	r2, r3, #4
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff fd6c 	bl	8008e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009394:	e000      	b.n	8009398 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009396:	bf00      	nop
}
 8009398:	bf00      	nop
 800939a:	3720      	adds	r7, #32
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	1c99      	adds	r1, r3, #2
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	6251      	str	r1, [r2, #36]	; 0x24
 80093c6:	881a      	ldrh	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	3b01      	subs	r3, #1
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d113      	bne.n	800940e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80093f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d106      	bne.n	800940e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7ff ffc9 	bl	80093a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800940e:	bf00      	nop
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009424:	1c99      	adds	r1, r3, #2
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	6251      	str	r1, [r2, #36]	; 0x24
 800942a:	8819      	ldrh	r1, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a1d      	ldr	r2, [pc, #116]	; (80094a8 <I2SEx_TxISR_I2SExt+0x90>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d101      	bne.n	800943a <I2SEx_TxISR_I2SExt+0x22>
 8009436:	4b1d      	ldr	r3, [pc, #116]	; (80094ac <I2SEx_TxISR_I2SExt+0x94>)
 8009438:	e001      	b.n	800943e <I2SEx_TxISR_I2SExt+0x26>
 800943a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800943e:	460a      	mov	r2, r1
 8009440:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009446:	b29b      	uxth	r3, r3
 8009448:	3b01      	subs	r3, #1
 800944a:	b29a      	uxth	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009454:	b29b      	uxth	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d121      	bne.n	800949e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a12      	ldr	r2, [pc, #72]	; (80094a8 <I2SEx_TxISR_I2SExt+0x90>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d101      	bne.n	8009468 <I2SEx_TxISR_I2SExt+0x50>
 8009464:	4b11      	ldr	r3, [pc, #68]	; (80094ac <I2SEx_TxISR_I2SExt+0x94>)
 8009466:	e001      	b.n	800946c <I2SEx_TxISR_I2SExt+0x54>
 8009468:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	490d      	ldr	r1, [pc, #52]	; (80094a8 <I2SEx_TxISR_I2SExt+0x90>)
 8009474:	428b      	cmp	r3, r1
 8009476:	d101      	bne.n	800947c <I2SEx_TxISR_I2SExt+0x64>
 8009478:	4b0c      	ldr	r3, [pc, #48]	; (80094ac <I2SEx_TxISR_I2SExt+0x94>)
 800947a:	e001      	b.n	8009480 <I2SEx_TxISR_I2SExt+0x68>
 800947c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009480:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009484:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800948a:	b29b      	uxth	r3, r3
 800948c:	2b00      	cmp	r3, #0
 800948e:	d106      	bne.n	800949e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7ff ff81 	bl	80093a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800949e:	bf00      	nop
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	40003800 	.word	0x40003800
 80094ac:	40003400 	.word	0x40003400

080094b0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68d8      	ldr	r0, [r3, #12]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c2:	1c99      	adds	r1, r3, #2
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80094c8:	b282      	uxth	r2, r0
 80094ca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094de:	b29b      	uxth	r3, r3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d113      	bne.n	800950c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80094f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d106      	bne.n	800950c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7ff ff4a 	bl	80093a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a20      	ldr	r2, [pc, #128]	; (80095a4 <I2SEx_RxISR_I2SExt+0x90>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d101      	bne.n	800952a <I2SEx_RxISR_I2SExt+0x16>
 8009526:	4b20      	ldr	r3, [pc, #128]	; (80095a8 <I2SEx_RxISR_I2SExt+0x94>)
 8009528:	e001      	b.n	800952e <I2SEx_RxISR_I2SExt+0x1a>
 800952a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800952e:	68d8      	ldr	r0, [r3, #12]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009534:	1c99      	adds	r1, r3, #2
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	62d1      	str	r1, [r2, #44]	; 0x2c
 800953a:	b282      	uxth	r2, r0
 800953c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009542:	b29b      	uxth	r3, r3
 8009544:	3b01      	subs	r3, #1
 8009546:	b29a      	uxth	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009550:	b29b      	uxth	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d121      	bne.n	800959a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a12      	ldr	r2, [pc, #72]	; (80095a4 <I2SEx_RxISR_I2SExt+0x90>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d101      	bne.n	8009564 <I2SEx_RxISR_I2SExt+0x50>
 8009560:	4b11      	ldr	r3, [pc, #68]	; (80095a8 <I2SEx_RxISR_I2SExt+0x94>)
 8009562:	e001      	b.n	8009568 <I2SEx_RxISR_I2SExt+0x54>
 8009564:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	490d      	ldr	r1, [pc, #52]	; (80095a4 <I2SEx_RxISR_I2SExt+0x90>)
 8009570:	428b      	cmp	r3, r1
 8009572:	d101      	bne.n	8009578 <I2SEx_RxISR_I2SExt+0x64>
 8009574:	4b0c      	ldr	r3, [pc, #48]	; (80095a8 <I2SEx_RxISR_I2SExt+0x94>)
 8009576:	e001      	b.n	800957c <I2SEx_RxISR_I2SExt+0x68>
 8009578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800957c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009580:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009586:	b29b      	uxth	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	d106      	bne.n	800959a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7ff ff03 	bl	80093a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	40003800 	.word	0x40003800
 80095a8:	40003400 	.word	0x40003400

080095ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e267      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d075      	beq.n	80096b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80095ca:	4b88      	ldr	r3, [pc, #544]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	f003 030c 	and.w	r3, r3, #12
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	d00c      	beq.n	80095f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095d6:	4b85      	ldr	r3, [pc, #532]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80095de:	2b08      	cmp	r3, #8
 80095e0:	d112      	bne.n	8009608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095e2:	4b82      	ldr	r3, [pc, #520]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095ee:	d10b      	bne.n	8009608 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095f0:	4b7e      	ldr	r3, [pc, #504]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d05b      	beq.n	80096b4 <HAL_RCC_OscConfig+0x108>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d157      	bne.n	80096b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e242      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009610:	d106      	bne.n	8009620 <HAL_RCC_OscConfig+0x74>
 8009612:	4b76      	ldr	r3, [pc, #472]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a75      	ldr	r2, [pc, #468]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 8009618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	e01d      	b.n	800965c <HAL_RCC_OscConfig+0xb0>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009628:	d10c      	bne.n	8009644 <HAL_RCC_OscConfig+0x98>
 800962a:	4b70      	ldr	r3, [pc, #448]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a6f      	ldr	r2, [pc, #444]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 8009630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009634:	6013      	str	r3, [r2, #0]
 8009636:	4b6d      	ldr	r3, [pc, #436]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a6c      	ldr	r2, [pc, #432]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 800963c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009640:	6013      	str	r3, [r2, #0]
 8009642:	e00b      	b.n	800965c <HAL_RCC_OscConfig+0xb0>
 8009644:	4b69      	ldr	r3, [pc, #420]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a68      	ldr	r2, [pc, #416]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 800964a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	4b66      	ldr	r3, [pc, #408]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a65      	ldr	r2, [pc, #404]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 8009656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800965a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d013      	beq.n	800968c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009664:	f7fb faa8 	bl	8004bb8 <HAL_GetTick>
 8009668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800966a:	e008      	b.n	800967e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800966c:	f7fb faa4 	bl	8004bb8 <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b64      	cmp	r3, #100	; 0x64
 8009678:	d901      	bls.n	800967e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	e207      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800967e:	4b5b      	ldr	r3, [pc, #364]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d0f0      	beq.n	800966c <HAL_RCC_OscConfig+0xc0>
 800968a:	e014      	b.n	80096b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800968c:	f7fb fa94 	bl	8004bb8 <HAL_GetTick>
 8009690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009692:	e008      	b.n	80096a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009694:	f7fb fa90 	bl	8004bb8 <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	2b64      	cmp	r3, #100	; 0x64
 80096a0:	d901      	bls.n	80096a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e1f3      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096a6:	4b51      	ldr	r3, [pc, #324]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1f0      	bne.n	8009694 <HAL_RCC_OscConfig+0xe8>
 80096b2:	e000      	b.n	80096b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d063      	beq.n	800978a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80096c2:	4b4a      	ldr	r3, [pc, #296]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	f003 030c 	and.w	r3, r3, #12
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00b      	beq.n	80096e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096ce:	4b47      	ldr	r3, [pc, #284]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80096d6:	2b08      	cmp	r3, #8
 80096d8:	d11c      	bne.n	8009714 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096da:	4b44      	ldr	r3, [pc, #272]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d116      	bne.n	8009714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096e6:	4b41      	ldr	r3, [pc, #260]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d005      	beq.n	80096fe <HAL_RCC_OscConfig+0x152>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d001      	beq.n	80096fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e1c7      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096fe:	4b3b      	ldr	r3, [pc, #236]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	00db      	lsls	r3, r3, #3
 800970c:	4937      	ldr	r1, [pc, #220]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 800970e:	4313      	orrs	r3, r2
 8009710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009712:	e03a      	b.n	800978a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d020      	beq.n	800975e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800971c:	4b34      	ldr	r3, [pc, #208]	; (80097f0 <HAL_RCC_OscConfig+0x244>)
 800971e:	2201      	movs	r2, #1
 8009720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009722:	f7fb fa49 	bl	8004bb8 <HAL_GetTick>
 8009726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009728:	e008      	b.n	800973c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800972a:	f7fb fa45 	bl	8004bb8 <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	2b02      	cmp	r3, #2
 8009736:	d901      	bls.n	800973c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e1a8      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800973c:	4b2b      	ldr	r3, [pc, #172]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0f0      	beq.n	800972a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009748:	4b28      	ldr	r3, [pc, #160]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	00db      	lsls	r3, r3, #3
 8009756:	4925      	ldr	r1, [pc, #148]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 8009758:	4313      	orrs	r3, r2
 800975a:	600b      	str	r3, [r1, #0]
 800975c:	e015      	b.n	800978a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800975e:	4b24      	ldr	r3, [pc, #144]	; (80097f0 <HAL_RCC_OscConfig+0x244>)
 8009760:	2200      	movs	r2, #0
 8009762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009764:	f7fb fa28 	bl	8004bb8 <HAL_GetTick>
 8009768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800976a:	e008      	b.n	800977e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800976c:	f7fb fa24 	bl	8004bb8 <HAL_GetTick>
 8009770:	4602      	mov	r2, r0
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	2b02      	cmp	r3, #2
 8009778:	d901      	bls.n	800977e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e187      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800977e:	4b1b      	ldr	r3, [pc, #108]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 0302 	and.w	r3, r3, #2
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1f0      	bne.n	800976c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0308 	and.w	r3, r3, #8
 8009792:	2b00      	cmp	r3, #0
 8009794:	d036      	beq.n	8009804 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d016      	beq.n	80097cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800979e:	4b15      	ldr	r3, [pc, #84]	; (80097f4 <HAL_RCC_OscConfig+0x248>)
 80097a0:	2201      	movs	r2, #1
 80097a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097a4:	f7fb fa08 	bl	8004bb8 <HAL_GetTick>
 80097a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097aa:	e008      	b.n	80097be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097ac:	f7fb fa04 	bl	8004bb8 <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d901      	bls.n	80097be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e167      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097be:	4b0b      	ldr	r3, [pc, #44]	; (80097ec <HAL_RCC_OscConfig+0x240>)
 80097c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097c2:	f003 0302 	and.w	r3, r3, #2
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d0f0      	beq.n	80097ac <HAL_RCC_OscConfig+0x200>
 80097ca:	e01b      	b.n	8009804 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097cc:	4b09      	ldr	r3, [pc, #36]	; (80097f4 <HAL_RCC_OscConfig+0x248>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097d2:	f7fb f9f1 	bl	8004bb8 <HAL_GetTick>
 80097d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097d8:	e00e      	b.n	80097f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097da:	f7fb f9ed 	bl	8004bb8 <HAL_GetTick>
 80097de:	4602      	mov	r2, r0
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d907      	bls.n	80097f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e150      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
 80097ec:	40023800 	.word	0x40023800
 80097f0:	42470000 	.word	0x42470000
 80097f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097f8:	4b88      	ldr	r3, [pc, #544]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 80097fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1ea      	bne.n	80097da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0304 	and.w	r3, r3, #4
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 8097 	beq.w	8009940 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009812:	2300      	movs	r3, #0
 8009814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009816:	4b81      	ldr	r3, [pc, #516]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 8009818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10f      	bne.n	8009842 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009822:	2300      	movs	r3, #0
 8009824:	60bb      	str	r3, [r7, #8]
 8009826:	4b7d      	ldr	r3, [pc, #500]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 8009828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982a:	4a7c      	ldr	r2, [pc, #496]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 800982c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009830:	6413      	str	r3, [r2, #64]	; 0x40
 8009832:	4b7a      	ldr	r3, [pc, #488]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 8009834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800983a:	60bb      	str	r3, [r7, #8]
 800983c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800983e:	2301      	movs	r3, #1
 8009840:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009842:	4b77      	ldr	r3, [pc, #476]	; (8009a20 <HAL_RCC_OscConfig+0x474>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800984a:	2b00      	cmp	r3, #0
 800984c:	d118      	bne.n	8009880 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800984e:	4b74      	ldr	r3, [pc, #464]	; (8009a20 <HAL_RCC_OscConfig+0x474>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a73      	ldr	r2, [pc, #460]	; (8009a20 <HAL_RCC_OscConfig+0x474>)
 8009854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800985a:	f7fb f9ad 	bl	8004bb8 <HAL_GetTick>
 800985e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009860:	e008      	b.n	8009874 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009862:	f7fb f9a9 	bl	8004bb8 <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	2b02      	cmp	r3, #2
 800986e:	d901      	bls.n	8009874 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e10c      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009874:	4b6a      	ldr	r3, [pc, #424]	; (8009a20 <HAL_RCC_OscConfig+0x474>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987c:	2b00      	cmp	r3, #0
 800987e:	d0f0      	beq.n	8009862 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d106      	bne.n	8009896 <HAL_RCC_OscConfig+0x2ea>
 8009888:	4b64      	ldr	r3, [pc, #400]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 800988a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988c:	4a63      	ldr	r2, [pc, #396]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 800988e:	f043 0301 	orr.w	r3, r3, #1
 8009892:	6713      	str	r3, [r2, #112]	; 0x70
 8009894:	e01c      	b.n	80098d0 <HAL_RCC_OscConfig+0x324>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	2b05      	cmp	r3, #5
 800989c:	d10c      	bne.n	80098b8 <HAL_RCC_OscConfig+0x30c>
 800989e:	4b5f      	ldr	r3, [pc, #380]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 80098a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a2:	4a5e      	ldr	r2, [pc, #376]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 80098a4:	f043 0304 	orr.w	r3, r3, #4
 80098a8:	6713      	str	r3, [r2, #112]	; 0x70
 80098aa:	4b5c      	ldr	r3, [pc, #368]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 80098ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ae:	4a5b      	ldr	r2, [pc, #364]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 80098b0:	f043 0301 	orr.w	r3, r3, #1
 80098b4:	6713      	str	r3, [r2, #112]	; 0x70
 80098b6:	e00b      	b.n	80098d0 <HAL_RCC_OscConfig+0x324>
 80098b8:	4b58      	ldr	r3, [pc, #352]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 80098ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098bc:	4a57      	ldr	r2, [pc, #348]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 80098be:	f023 0301 	bic.w	r3, r3, #1
 80098c2:	6713      	str	r3, [r2, #112]	; 0x70
 80098c4:	4b55      	ldr	r3, [pc, #340]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 80098c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c8:	4a54      	ldr	r2, [pc, #336]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 80098ca:	f023 0304 	bic.w	r3, r3, #4
 80098ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d015      	beq.n	8009904 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098d8:	f7fb f96e 	bl	8004bb8 <HAL_GetTick>
 80098dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098de:	e00a      	b.n	80098f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098e0:	f7fb f96a 	bl	8004bb8 <HAL_GetTick>
 80098e4:	4602      	mov	r2, r0
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d901      	bls.n	80098f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e0cb      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098f6:	4b49      	ldr	r3, [pc, #292]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 80098f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fa:	f003 0302 	and.w	r3, r3, #2
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d0ee      	beq.n	80098e0 <HAL_RCC_OscConfig+0x334>
 8009902:	e014      	b.n	800992e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009904:	f7fb f958 	bl	8004bb8 <HAL_GetTick>
 8009908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800990a:	e00a      	b.n	8009922 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800990c:	f7fb f954 	bl	8004bb8 <HAL_GetTick>
 8009910:	4602      	mov	r2, r0
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	f241 3288 	movw	r2, #5000	; 0x1388
 800991a:	4293      	cmp	r3, r2
 800991c:	d901      	bls.n	8009922 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	e0b5      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009922:	4b3e      	ldr	r3, [pc, #248]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 8009924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009926:	f003 0302 	and.w	r3, r3, #2
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1ee      	bne.n	800990c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800992e:	7dfb      	ldrb	r3, [r7, #23]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d105      	bne.n	8009940 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009934:	4b39      	ldr	r3, [pc, #228]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 8009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009938:	4a38      	ldr	r2, [pc, #224]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 800993a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800993e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 80a1 	beq.w	8009a8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800994a:	4b34      	ldr	r3, [pc, #208]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f003 030c 	and.w	r3, r3, #12
 8009952:	2b08      	cmp	r3, #8
 8009954:	d05c      	beq.n	8009a10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	2b02      	cmp	r3, #2
 800995c:	d141      	bne.n	80099e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800995e:	4b31      	ldr	r3, [pc, #196]	; (8009a24 <HAL_RCC_OscConfig+0x478>)
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009964:	f7fb f928 	bl	8004bb8 <HAL_GetTick>
 8009968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800996a:	e008      	b.n	800997e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800996c:	f7fb f924 	bl	8004bb8 <HAL_GetTick>
 8009970:	4602      	mov	r2, r0
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	2b02      	cmp	r3, #2
 8009978:	d901      	bls.n	800997e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e087      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800997e:	4b27      	ldr	r3, [pc, #156]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1f0      	bne.n	800996c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	69da      	ldr	r2, [r3, #28]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	431a      	orrs	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009998:	019b      	lsls	r3, r3, #6
 800999a:	431a      	orrs	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a0:	085b      	lsrs	r3, r3, #1
 80099a2:	3b01      	subs	r3, #1
 80099a4:	041b      	lsls	r3, r3, #16
 80099a6:	431a      	orrs	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ac:	061b      	lsls	r3, r3, #24
 80099ae:	491b      	ldr	r1, [pc, #108]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 80099b0:	4313      	orrs	r3, r2
 80099b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099b4:	4b1b      	ldr	r3, [pc, #108]	; (8009a24 <HAL_RCC_OscConfig+0x478>)
 80099b6:	2201      	movs	r2, #1
 80099b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099ba:	f7fb f8fd 	bl	8004bb8 <HAL_GetTick>
 80099be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099c0:	e008      	b.n	80099d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099c2:	f7fb f8f9 	bl	8004bb8 <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d901      	bls.n	80099d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e05c      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099d4:	4b11      	ldr	r3, [pc, #68]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0f0      	beq.n	80099c2 <HAL_RCC_OscConfig+0x416>
 80099e0:	e054      	b.n	8009a8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099e2:	4b10      	ldr	r3, [pc, #64]	; (8009a24 <HAL_RCC_OscConfig+0x478>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099e8:	f7fb f8e6 	bl	8004bb8 <HAL_GetTick>
 80099ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099ee:	e008      	b.n	8009a02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099f0:	f7fb f8e2 	bl	8004bb8 <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d901      	bls.n	8009a02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e045      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a02:	4b06      	ldr	r3, [pc, #24]	; (8009a1c <HAL_RCC_OscConfig+0x470>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1f0      	bne.n	80099f0 <HAL_RCC_OscConfig+0x444>
 8009a0e:	e03d      	b.n	8009a8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d107      	bne.n	8009a28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e038      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
 8009a1c:	40023800 	.word	0x40023800
 8009a20:	40007000 	.word	0x40007000
 8009a24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009a28:	4b1b      	ldr	r3, [pc, #108]	; (8009a98 <HAL_RCC_OscConfig+0x4ec>)
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d028      	beq.n	8009a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d121      	bne.n	8009a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d11a      	bne.n	8009a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009a58:	4013      	ands	r3, r2
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d111      	bne.n	8009a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6e:	085b      	lsrs	r3, r3, #1
 8009a70:	3b01      	subs	r3, #1
 8009a72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d107      	bne.n	8009a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d001      	beq.n	8009a8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e000      	b.n	8009a8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3718      	adds	r7, #24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	40023800 	.word	0x40023800

08009a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d101      	bne.n	8009ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e0cc      	b.n	8009c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ab0:	4b68      	ldr	r3, [pc, #416]	; (8009c54 <HAL_RCC_ClockConfig+0x1b8>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0307 	and.w	r3, r3, #7
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d90c      	bls.n	8009ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009abe:	4b65      	ldr	r3, [pc, #404]	; (8009c54 <HAL_RCC_ClockConfig+0x1b8>)
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	b2d2      	uxtb	r2, r2
 8009ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ac6:	4b63      	ldr	r3, [pc, #396]	; (8009c54 <HAL_RCC_ClockConfig+0x1b8>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0307 	and.w	r3, r3, #7
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d001      	beq.n	8009ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e0b8      	b.n	8009c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d020      	beq.n	8009b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 0304 	and.w	r3, r3, #4
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009af0:	4b59      	ldr	r3, [pc, #356]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	4a58      	ldr	r2, [pc, #352]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009afa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0308 	and.w	r3, r3, #8
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d005      	beq.n	8009b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b08:	4b53      	ldr	r3, [pc, #332]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	4a52      	ldr	r2, [pc, #328]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b14:	4b50      	ldr	r3, [pc, #320]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	494d      	ldr	r1, [pc, #308]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009b22:	4313      	orrs	r3, r2
 8009b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d044      	beq.n	8009bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d107      	bne.n	8009b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b3a:	4b47      	ldr	r3, [pc, #284]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d119      	bne.n	8009b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e07f      	b.n	8009c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d003      	beq.n	8009b5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d107      	bne.n	8009b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b5a:	4b3f      	ldr	r3, [pc, #252]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d109      	bne.n	8009b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e06f      	b.n	8009c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b6a:	4b3b      	ldr	r3, [pc, #236]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e067      	b.n	8009c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b7a:	4b37      	ldr	r3, [pc, #220]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	f023 0203 	bic.w	r2, r3, #3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	4934      	ldr	r1, [pc, #208]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009b8c:	f7fb f814 	bl	8004bb8 <HAL_GetTick>
 8009b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b92:	e00a      	b.n	8009baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b94:	f7fb f810 	bl	8004bb8 <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d901      	bls.n	8009baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	e04f      	b.n	8009c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009baa:	4b2b      	ldr	r3, [pc, #172]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	f003 020c 	and.w	r2, r3, #12
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d1eb      	bne.n	8009b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009bbc:	4b25      	ldr	r3, [pc, #148]	; (8009c54 <HAL_RCC_ClockConfig+0x1b8>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 0307 	and.w	r3, r3, #7
 8009bc4:	683a      	ldr	r2, [r7, #0]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d20c      	bcs.n	8009be4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bca:	4b22      	ldr	r3, [pc, #136]	; (8009c54 <HAL_RCC_ClockConfig+0x1b8>)
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	b2d2      	uxtb	r2, r2
 8009bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bd2:	4b20      	ldr	r3, [pc, #128]	; (8009c54 <HAL_RCC_ClockConfig+0x1b8>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0307 	and.w	r3, r3, #7
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d001      	beq.n	8009be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	e032      	b.n	8009c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d008      	beq.n	8009c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009bf0:	4b19      	ldr	r3, [pc, #100]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	4916      	ldr	r1, [pc, #88]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0308 	and.w	r3, r3, #8
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d009      	beq.n	8009c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c0e:	4b12      	ldr	r3, [pc, #72]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	00db      	lsls	r3, r3, #3
 8009c1c:	490e      	ldr	r1, [pc, #56]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009c22:	f000 f821 	bl	8009c68 <HAL_RCC_GetSysClockFreq>
 8009c26:	4602      	mov	r2, r0
 8009c28:	4b0b      	ldr	r3, [pc, #44]	; (8009c58 <HAL_RCC_ClockConfig+0x1bc>)
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	091b      	lsrs	r3, r3, #4
 8009c2e:	f003 030f 	and.w	r3, r3, #15
 8009c32:	490a      	ldr	r1, [pc, #40]	; (8009c5c <HAL_RCC_ClockConfig+0x1c0>)
 8009c34:	5ccb      	ldrb	r3, [r1, r3]
 8009c36:	fa22 f303 	lsr.w	r3, r2, r3
 8009c3a:	4a09      	ldr	r2, [pc, #36]	; (8009c60 <HAL_RCC_ClockConfig+0x1c4>)
 8009c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009c3e:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <HAL_RCC_ClockConfig+0x1c8>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fa ff74 	bl	8004b30 <HAL_InitTick>

  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	40023c00 	.word	0x40023c00
 8009c58:	40023800 	.word	0x40023800
 8009c5c:	08010ce8 	.word	0x08010ce8
 8009c60:	20000004 	.word	0x20000004
 8009c64:	20000054 	.word	0x20000054

08009c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c6c:	b094      	sub	sp, #80	; 0x50
 8009c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	647b      	str	r3, [r7, #68]	; 0x44
 8009c74:	2300      	movs	r3, #0
 8009c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c78:	2300      	movs	r3, #0
 8009c7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c80:	4b79      	ldr	r3, [pc, #484]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f003 030c 	and.w	r3, r3, #12
 8009c88:	2b08      	cmp	r3, #8
 8009c8a:	d00d      	beq.n	8009ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	f200 80e1 	bhi.w	8009e54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d002      	beq.n	8009c9c <HAL_RCC_GetSysClockFreq+0x34>
 8009c96:	2b04      	cmp	r3, #4
 8009c98:	d003      	beq.n	8009ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8009c9a:	e0db      	b.n	8009e54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009c9c:	4b73      	ldr	r3, [pc, #460]	; (8009e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8009c9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009ca0:	e0db      	b.n	8009e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009ca2:	4b73      	ldr	r3, [pc, #460]	; (8009e70 <HAL_RCC_GetSysClockFreq+0x208>)
 8009ca4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009ca6:	e0d8      	b.n	8009e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ca8:	4b6f      	ldr	r3, [pc, #444]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009cb2:	4b6d      	ldr	r3, [pc, #436]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d063      	beq.n	8009d86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009cbe:	4b6a      	ldr	r3, [pc, #424]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	099b      	lsrs	r3, r3, #6
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8009cd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009cda:	4622      	mov	r2, r4
 8009cdc:	462b      	mov	r3, r5
 8009cde:	f04f 0000 	mov.w	r0, #0
 8009ce2:	f04f 0100 	mov.w	r1, #0
 8009ce6:	0159      	lsls	r1, r3, #5
 8009ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009cec:	0150      	lsls	r0, r2, #5
 8009cee:	4602      	mov	r2, r0
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	1a51      	subs	r1, r2, r1
 8009cf6:	6139      	str	r1, [r7, #16]
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	f04f 0200 	mov.w	r2, #0
 8009d04:	f04f 0300 	mov.w	r3, #0
 8009d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d0c:	4659      	mov	r1, fp
 8009d0e:	018b      	lsls	r3, r1, #6
 8009d10:	4651      	mov	r1, sl
 8009d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009d16:	4651      	mov	r1, sl
 8009d18:	018a      	lsls	r2, r1, #6
 8009d1a:	4651      	mov	r1, sl
 8009d1c:	ebb2 0801 	subs.w	r8, r2, r1
 8009d20:	4659      	mov	r1, fp
 8009d22:	eb63 0901 	sbc.w	r9, r3, r1
 8009d26:	f04f 0200 	mov.w	r2, #0
 8009d2a:	f04f 0300 	mov.w	r3, #0
 8009d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d3a:	4690      	mov	r8, r2
 8009d3c:	4699      	mov	r9, r3
 8009d3e:	4623      	mov	r3, r4
 8009d40:	eb18 0303 	adds.w	r3, r8, r3
 8009d44:	60bb      	str	r3, [r7, #8]
 8009d46:	462b      	mov	r3, r5
 8009d48:	eb49 0303 	adc.w	r3, r9, r3
 8009d4c:	60fb      	str	r3, [r7, #12]
 8009d4e:	f04f 0200 	mov.w	r2, #0
 8009d52:	f04f 0300 	mov.w	r3, #0
 8009d56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	024b      	lsls	r3, r1, #9
 8009d5e:	4621      	mov	r1, r4
 8009d60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009d64:	4621      	mov	r1, r4
 8009d66:	024a      	lsls	r2, r1, #9
 8009d68:	4610      	mov	r0, r2
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d6e:	2200      	movs	r2, #0
 8009d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d78:	f7f6 ff0a 	bl	8000b90 <__aeabi_uldivmod>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4613      	mov	r3, r2
 8009d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d84:	e058      	b.n	8009e38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d86:	4b38      	ldr	r3, [pc, #224]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	099b      	lsrs	r3, r3, #6
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	4618      	mov	r0, r3
 8009d90:	4611      	mov	r1, r2
 8009d92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009d96:	623b      	str	r3, [r7, #32]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009da0:	4642      	mov	r2, r8
 8009da2:	464b      	mov	r3, r9
 8009da4:	f04f 0000 	mov.w	r0, #0
 8009da8:	f04f 0100 	mov.w	r1, #0
 8009dac:	0159      	lsls	r1, r3, #5
 8009dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009db2:	0150      	lsls	r0, r2, #5
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4641      	mov	r1, r8
 8009dba:	ebb2 0a01 	subs.w	sl, r2, r1
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8009dc4:	f04f 0200 	mov.w	r2, #0
 8009dc8:	f04f 0300 	mov.w	r3, #0
 8009dcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009dd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009dd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009dd8:	ebb2 040a 	subs.w	r4, r2, sl
 8009ddc:	eb63 050b 	sbc.w	r5, r3, fp
 8009de0:	f04f 0200 	mov.w	r2, #0
 8009de4:	f04f 0300 	mov.w	r3, #0
 8009de8:	00eb      	lsls	r3, r5, #3
 8009dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009dee:	00e2      	lsls	r2, r4, #3
 8009df0:	4614      	mov	r4, r2
 8009df2:	461d      	mov	r5, r3
 8009df4:	4643      	mov	r3, r8
 8009df6:	18e3      	adds	r3, r4, r3
 8009df8:	603b      	str	r3, [r7, #0]
 8009dfa:	464b      	mov	r3, r9
 8009dfc:	eb45 0303 	adc.w	r3, r5, r3
 8009e00:	607b      	str	r3, [r7, #4]
 8009e02:	f04f 0200 	mov.w	r2, #0
 8009e06:	f04f 0300 	mov.w	r3, #0
 8009e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009e0e:	4629      	mov	r1, r5
 8009e10:	028b      	lsls	r3, r1, #10
 8009e12:	4621      	mov	r1, r4
 8009e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009e18:	4621      	mov	r1, r4
 8009e1a:	028a      	lsls	r2, r1, #10
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e22:	2200      	movs	r2, #0
 8009e24:	61bb      	str	r3, [r7, #24]
 8009e26:	61fa      	str	r2, [r7, #28]
 8009e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e2c:	f7f6 feb0 	bl	8000b90 <__aeabi_uldivmod>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4613      	mov	r3, r2
 8009e36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009e38:	4b0b      	ldr	r3, [pc, #44]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	0c1b      	lsrs	r3, r3, #16
 8009e3e:	f003 0303 	and.w	r3, r3, #3
 8009e42:	3301      	adds	r3, #1
 8009e44:	005b      	lsls	r3, r3, #1
 8009e46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009e48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009e52:	e002      	b.n	8009e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e54:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8009e56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3750      	adds	r7, #80	; 0x50
 8009e60:	46bd      	mov	sp, r7
 8009e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e66:	bf00      	nop
 8009e68:	40023800 	.word	0x40023800
 8009e6c:	00f42400 	.word	0x00f42400
 8009e70:	007a1200 	.word	0x007a1200

08009e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e74:	b480      	push	{r7}
 8009e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e78:	4b03      	ldr	r3, [pc, #12]	; (8009e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	20000004 	.word	0x20000004

08009e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009e90:	f7ff fff0 	bl	8009e74 <HAL_RCC_GetHCLKFreq>
 8009e94:	4602      	mov	r2, r0
 8009e96:	4b05      	ldr	r3, [pc, #20]	; (8009eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	0a9b      	lsrs	r3, r3, #10
 8009e9c:	f003 0307 	and.w	r3, r3, #7
 8009ea0:	4903      	ldr	r1, [pc, #12]	; (8009eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ea2:	5ccb      	ldrb	r3, [r1, r3]
 8009ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	40023800 	.word	0x40023800
 8009eb0:	08010cf8 	.word	0x08010cf8

08009eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 0301 	and.w	r3, r3, #1
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d105      	bne.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d035      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009edc:	4b62      	ldr	r3, [pc, #392]	; (800a068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009ee2:	f7fa fe69 	bl	8004bb8 <HAL_GetTick>
 8009ee6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ee8:	e008      	b.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009eea:	f7fa fe65 	bl	8004bb8 <HAL_GetTick>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d901      	bls.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e0b0      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009efc:	4b5b      	ldr	r3, [pc, #364]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1f0      	bne.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	019a      	lsls	r2, r3, #6
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	071b      	lsls	r3, r3, #28
 8009f14:	4955      	ldr	r1, [pc, #340]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f16:	4313      	orrs	r3, r2
 8009f18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009f1c:	4b52      	ldr	r3, [pc, #328]	; (800a068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009f1e:	2201      	movs	r2, #1
 8009f20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f22:	f7fa fe49 	bl	8004bb8 <HAL_GetTick>
 8009f26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f28:	e008      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009f2a:	f7fa fe45 	bl	8004bb8 <HAL_GetTick>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d901      	bls.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e090      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f3c:	4b4b      	ldr	r3, [pc, #300]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d0f0      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0302 	and.w	r3, r3, #2
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 8083 	beq.w	800a05c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009f56:	2300      	movs	r3, #0
 8009f58:	60fb      	str	r3, [r7, #12]
 8009f5a:	4b44      	ldr	r3, [pc, #272]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5e:	4a43      	ldr	r2, [pc, #268]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f64:	6413      	str	r3, [r2, #64]	; 0x40
 8009f66:	4b41      	ldr	r3, [pc, #260]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f6e:	60fb      	str	r3, [r7, #12]
 8009f70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009f72:	4b3f      	ldr	r3, [pc, #252]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a3e      	ldr	r2, [pc, #248]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f7e:	f7fa fe1b 	bl	8004bb8 <HAL_GetTick>
 8009f82:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009f84:	e008      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009f86:	f7fa fe17 	bl	8004bb8 <HAL_GetTick>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d901      	bls.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e062      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009f98:	4b35      	ldr	r3, [pc, #212]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d0f0      	beq.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009fa4:	4b31      	ldr	r3, [pc, #196]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d02f      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d028      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009fc2:	4b2a      	ldr	r3, [pc, #168]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009fcc:	4b29      	ldr	r3, [pc, #164]	; (800a074 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009fce:	2201      	movs	r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009fd2:	4b28      	ldr	r3, [pc, #160]	; (800a074 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009fd8:	4a24      	ldr	r2, [pc, #144]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009fde:	4b23      	ldr	r3, [pc, #140]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d114      	bne.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009fea:	f7fa fde5 	bl	8004bb8 <HAL_GetTick>
 8009fee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ff0:	e00a      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ff2:	f7fa fde1 	bl	8004bb8 <HAL_GetTick>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a000:	4293      	cmp	r3, r2
 800a002:	d901      	bls.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a004:	2303      	movs	r3, #3
 800a006:	e02a      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a008:	4b18      	ldr	r3, [pc, #96]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a00a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a00c:	f003 0302 	and.w	r3, r3, #2
 800a010:	2b00      	cmp	r3, #0
 800a012:	d0ee      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a01c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a020:	d10d      	bne.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a022:	4b12      	ldr	r3, [pc, #72]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a036:	490d      	ldr	r1, [pc, #52]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a038:	4313      	orrs	r3, r2
 800a03a:	608b      	str	r3, [r1, #8]
 800a03c:	e005      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a03e:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	4a0a      	ldr	r2, [pc, #40]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a044:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a048:	6093      	str	r3, [r2, #8]
 800a04a:	4b08      	ldr	r3, [pc, #32]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a04c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a056:	4905      	ldr	r1, [pc, #20]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a058:	4313      	orrs	r3, r2
 800a05a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3718      	adds	r7, #24
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	42470068 	.word	0x42470068
 800a06c:	40023800 	.word	0x40023800
 800a070:	40007000 	.word	0x40007000
 800a074:	42470e40 	.word	0x42470e40

0800a078 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a078:	b480      	push	{r7}
 800a07a:	b087      	sub	sp, #28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a080:	2300      	movs	r3, #0
 800a082:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a084:	2300      	movs	r3, #0
 800a086:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a08c:	2300      	movs	r3, #0
 800a08e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d13e      	bne.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800a096:	4b23      	ldr	r3, [pc, #140]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d005      	beq.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d12f      	bne.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a0ac:	4b1e      	ldr	r3, [pc, #120]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a0ae:	617b      	str	r3, [r7, #20]
          break;
 800a0b0:	e02f      	b.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a0b2:	4b1c      	ldr	r3, [pc, #112]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0be:	d108      	bne.n	800a0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a0c0:	4b18      	ldr	r3, [pc, #96]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0c8:	4a18      	ldr	r2, [pc, #96]	; (800a12c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ce:	613b      	str	r3, [r7, #16]
 800a0d0:	e007      	b.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a0d2:	4b14      	ldr	r3, [pc, #80]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0da:	4a15      	ldr	r2, [pc, #84]	; (800a130 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800a0dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a0e2:	4b10      	ldr	r3, [pc, #64]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0e8:	099b      	lsrs	r3, r3, #6
 800a0ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	fb02 f303 	mul.w	r3, r2, r3
 800a0f4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a0f6:	4b0b      	ldr	r3, [pc, #44]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0fc:	0f1b      	lsrs	r3, r3, #28
 800a0fe:	f003 0307 	and.w	r3, r3, #7
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	fbb2 f3f3 	udiv	r3, r2, r3
 800a108:	617b      	str	r3, [r7, #20]
          break;
 800a10a:	e002      	b.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a10c:	2300      	movs	r3, #0
 800a10e:	617b      	str	r3, [r7, #20]
          break;
 800a110:	bf00      	nop
        }
      }
      break;
 800a112:	bf00      	nop
    }
  }
  return frequency;
 800a114:	697b      	ldr	r3, [r7, #20]
}
 800a116:	4618      	mov	r0, r3
 800a118:	371c      	adds	r7, #28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	40023800 	.word	0x40023800
 800a128:	00bb8000 	.word	0x00bb8000
 800a12c:	007a1200 	.word	0x007a1200
 800a130:	00f42400 	.word	0x00f42400

0800a134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d101      	bne.n	800a146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	e041      	b.n	800a1ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d106      	bne.n	800a160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f7f9 fba0 	bl	80038a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2202      	movs	r2, #2
 800a164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	3304      	adds	r3, #4
 800a170:	4619      	mov	r1, r3
 800a172:	4610      	mov	r0, r2
 800a174:	f000 fa84 	bl	800a680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
	...

0800a1d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d001      	beq.n	800a1ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e04e      	b.n	800a28a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68da      	ldr	r2, [r3, #12]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f042 0201 	orr.w	r2, r2, #1
 800a202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a23      	ldr	r2, [pc, #140]	; (800a298 <HAL_TIM_Base_Start_IT+0xc4>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d022      	beq.n	800a254 <HAL_TIM_Base_Start_IT+0x80>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a216:	d01d      	beq.n	800a254 <HAL_TIM_Base_Start_IT+0x80>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a1f      	ldr	r2, [pc, #124]	; (800a29c <HAL_TIM_Base_Start_IT+0xc8>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d018      	beq.n	800a254 <HAL_TIM_Base_Start_IT+0x80>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a1e      	ldr	r2, [pc, #120]	; (800a2a0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d013      	beq.n	800a254 <HAL_TIM_Base_Start_IT+0x80>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a1c      	ldr	r2, [pc, #112]	; (800a2a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d00e      	beq.n	800a254 <HAL_TIM_Base_Start_IT+0x80>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a1b      	ldr	r2, [pc, #108]	; (800a2a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d009      	beq.n	800a254 <HAL_TIM_Base_Start_IT+0x80>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a19      	ldr	r2, [pc, #100]	; (800a2ac <HAL_TIM_Base_Start_IT+0xd8>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d004      	beq.n	800a254 <HAL_TIM_Base_Start_IT+0x80>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a18      	ldr	r2, [pc, #96]	; (800a2b0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d111      	bne.n	800a278 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f003 0307 	and.w	r3, r3, #7
 800a25e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2b06      	cmp	r3, #6
 800a264:	d010      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f042 0201 	orr.w	r2, r2, #1
 800a274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a276:	e007      	b.n	800a288 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f042 0201 	orr.w	r2, r2, #1
 800a286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	40010000 	.word	0x40010000
 800a29c:	40000400 	.word	0x40000400
 800a2a0:	40000800 	.word	0x40000800
 800a2a4:	40000c00 	.word	0x40000c00
 800a2a8:	40010400 	.word	0x40010400
 800a2ac:	40014000 	.word	0x40014000
 800a2b0:	40001800 	.word	0x40001800

0800a2b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d101      	bne.n	800a2c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e041      	b.n	800a34a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d106      	bne.n	800a2e0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7f9 fab8 	bl	8003850 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	4610      	mov	r0, r2
 800a2f4:	f000 f9c4 	bl	800a680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b082      	sub	sp, #8
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	f003 0302 	and.w	r3, r3, #2
 800a364:	2b02      	cmp	r3, #2
 800a366:	d122      	bne.n	800a3ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b02      	cmp	r3, #2
 800a374:	d11b      	bne.n	800a3ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f06f 0202 	mvn.w	r2, #2
 800a37e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	f003 0303 	and.w	r3, r3, #3
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f955 	bl	800a644 <HAL_TIM_IC_CaptureCallback>
 800a39a:	e005      	b.n	800a3a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 f947 	bl	800a630 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f958 	bl	800a658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	f003 0304 	and.w	r3, r3, #4
 800a3b8:	2b04      	cmp	r3, #4
 800a3ba:	d122      	bne.n	800a402 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	f003 0304 	and.w	r3, r3, #4
 800a3c6:	2b04      	cmp	r3, #4
 800a3c8:	d11b      	bne.n	800a402 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f06f 0204 	mvn.w	r2, #4
 800a3d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2202      	movs	r2, #2
 800a3d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	699b      	ldr	r3, [r3, #24]
 800a3e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d003      	beq.n	800a3f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f92b 	bl	800a644 <HAL_TIM_IC_CaptureCallback>
 800a3ee:	e005      	b.n	800a3fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f91d 	bl	800a630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f92e 	bl	800a658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	f003 0308 	and.w	r3, r3, #8
 800a40c:	2b08      	cmp	r3, #8
 800a40e:	d122      	bne.n	800a456 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	f003 0308 	and.w	r3, r3, #8
 800a41a:	2b08      	cmp	r3, #8
 800a41c:	d11b      	bne.n	800a456 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f06f 0208 	mvn.w	r2, #8
 800a426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2204      	movs	r2, #4
 800a42c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	69db      	ldr	r3, [r3, #28]
 800a434:	f003 0303 	and.w	r3, r3, #3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d003      	beq.n	800a444 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f901 	bl	800a644 <HAL_TIM_IC_CaptureCallback>
 800a442:	e005      	b.n	800a450 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f8f3 	bl	800a630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f904 	bl	800a658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	f003 0310 	and.w	r3, r3, #16
 800a460:	2b10      	cmp	r3, #16
 800a462:	d122      	bne.n	800a4aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	f003 0310 	and.w	r3, r3, #16
 800a46e:	2b10      	cmp	r3, #16
 800a470:	d11b      	bne.n	800a4aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f06f 0210 	mvn.w	r2, #16
 800a47a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2208      	movs	r2, #8
 800a480:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	69db      	ldr	r3, [r3, #28]
 800a488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d003      	beq.n	800a498 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f8d7 	bl	800a644 <HAL_TIM_IC_CaptureCallback>
 800a496:	e005      	b.n	800a4a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f8c9 	bl	800a630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f8da 	bl	800a658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d10e      	bne.n	800a4d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d107      	bne.n	800a4d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f06f 0201 	mvn.w	r2, #1
 800a4ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 f8a3 	bl	800a61c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e0:	2b80      	cmp	r3, #128	; 0x80
 800a4e2:	d10e      	bne.n	800a502 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ee:	2b80      	cmp	r3, #128	; 0x80
 800a4f0:	d107      	bne.n	800a502 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fb95 	bl	800ac2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a50c:	2b40      	cmp	r3, #64	; 0x40
 800a50e:	d10e      	bne.n	800a52e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a51a:	2b40      	cmp	r3, #64	; 0x40
 800a51c:	d107      	bne.n	800a52e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f89f 	bl	800a66c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	f003 0320 	and.w	r3, r3, #32
 800a538:	2b20      	cmp	r3, #32
 800a53a:	d10e      	bne.n	800a55a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	f003 0320 	and.w	r3, r3, #32
 800a546:	2b20      	cmp	r3, #32
 800a548:	d107      	bne.n	800a55a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f06f 0220 	mvn.w	r2, #32
 800a552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fb5f 	bl	800ac18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a55a:	bf00      	nop
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
	...

0800a564 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d101      	bne.n	800a582 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a57e:	2302      	movs	r3, #2
 800a580:	e048      	b.n	800a614 <HAL_TIM_OC_ConfigChannel+0xb0>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b0c      	cmp	r3, #12
 800a58e:	d839      	bhi.n	800a604 <HAL_TIM_OC_ConfigChannel+0xa0>
 800a590:	a201      	add	r2, pc, #4	; (adr r2, 800a598 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a596:	bf00      	nop
 800a598:	0800a5cd 	.word	0x0800a5cd
 800a59c:	0800a605 	.word	0x0800a605
 800a5a0:	0800a605 	.word	0x0800a605
 800a5a4:	0800a605 	.word	0x0800a605
 800a5a8:	0800a5db 	.word	0x0800a5db
 800a5ac:	0800a605 	.word	0x0800a605
 800a5b0:	0800a605 	.word	0x0800a605
 800a5b4:	0800a605 	.word	0x0800a605
 800a5b8:	0800a5e9 	.word	0x0800a5e9
 800a5bc:	0800a605 	.word	0x0800a605
 800a5c0:	0800a605 	.word	0x0800a605
 800a5c4:	0800a605 	.word	0x0800a605
 800a5c8:	0800a5f7 	.word	0x0800a5f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68b9      	ldr	r1, [r7, #8]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 f8f4 	bl	800a7c0 <TIM_OC1_SetConfig>
      break;
 800a5d8:	e017      	b.n	800a60a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68b9      	ldr	r1, [r7, #8]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 f95d 	bl	800a8a0 <TIM_OC2_SetConfig>
      break;
 800a5e6:	e010      	b.n	800a60a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68b9      	ldr	r1, [r7, #8]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 f9cc 	bl	800a98c <TIM_OC3_SetConfig>
      break;
 800a5f4:	e009      	b.n	800a60a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68b9      	ldr	r1, [r7, #8]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 fa39 	bl	800aa74 <TIM_OC4_SetConfig>
      break;
 800a602:	e002      	b.n	800a60a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	75fb      	strb	r3, [r7, #23]
      break;
 800a608:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a612:	7dfb      	ldrb	r3, [r7, #23]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4a40      	ldr	r2, [pc, #256]	; (800a794 <TIM_Base_SetConfig+0x114>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d013      	beq.n	800a6c0 <TIM_Base_SetConfig+0x40>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a69e:	d00f      	beq.n	800a6c0 <TIM_Base_SetConfig+0x40>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4a3d      	ldr	r2, [pc, #244]	; (800a798 <TIM_Base_SetConfig+0x118>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d00b      	beq.n	800a6c0 <TIM_Base_SetConfig+0x40>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a3c      	ldr	r2, [pc, #240]	; (800a79c <TIM_Base_SetConfig+0x11c>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d007      	beq.n	800a6c0 <TIM_Base_SetConfig+0x40>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a3b      	ldr	r2, [pc, #236]	; (800a7a0 <TIM_Base_SetConfig+0x120>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d003      	beq.n	800a6c0 <TIM_Base_SetConfig+0x40>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a3a      	ldr	r2, [pc, #232]	; (800a7a4 <TIM_Base_SetConfig+0x124>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d108      	bne.n	800a6d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a2f      	ldr	r2, [pc, #188]	; (800a794 <TIM_Base_SetConfig+0x114>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d02b      	beq.n	800a732 <TIM_Base_SetConfig+0xb2>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6e0:	d027      	beq.n	800a732 <TIM_Base_SetConfig+0xb2>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a2c      	ldr	r2, [pc, #176]	; (800a798 <TIM_Base_SetConfig+0x118>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d023      	beq.n	800a732 <TIM_Base_SetConfig+0xb2>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a2b      	ldr	r2, [pc, #172]	; (800a79c <TIM_Base_SetConfig+0x11c>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d01f      	beq.n	800a732 <TIM_Base_SetConfig+0xb2>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a2a      	ldr	r2, [pc, #168]	; (800a7a0 <TIM_Base_SetConfig+0x120>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d01b      	beq.n	800a732 <TIM_Base_SetConfig+0xb2>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a29      	ldr	r2, [pc, #164]	; (800a7a4 <TIM_Base_SetConfig+0x124>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d017      	beq.n	800a732 <TIM_Base_SetConfig+0xb2>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a28      	ldr	r2, [pc, #160]	; (800a7a8 <TIM_Base_SetConfig+0x128>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d013      	beq.n	800a732 <TIM_Base_SetConfig+0xb2>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a27      	ldr	r2, [pc, #156]	; (800a7ac <TIM_Base_SetConfig+0x12c>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d00f      	beq.n	800a732 <TIM_Base_SetConfig+0xb2>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a26      	ldr	r2, [pc, #152]	; (800a7b0 <TIM_Base_SetConfig+0x130>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d00b      	beq.n	800a732 <TIM_Base_SetConfig+0xb2>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a25      	ldr	r2, [pc, #148]	; (800a7b4 <TIM_Base_SetConfig+0x134>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d007      	beq.n	800a732 <TIM_Base_SetConfig+0xb2>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a24      	ldr	r2, [pc, #144]	; (800a7b8 <TIM_Base_SetConfig+0x138>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d003      	beq.n	800a732 <TIM_Base_SetConfig+0xb2>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a23      	ldr	r2, [pc, #140]	; (800a7bc <TIM_Base_SetConfig+0x13c>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d108      	bne.n	800a744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	4313      	orrs	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	689a      	ldr	r2, [r3, #8]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a0a      	ldr	r2, [pc, #40]	; (800a794 <TIM_Base_SetConfig+0x114>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d003      	beq.n	800a778 <TIM_Base_SetConfig+0xf8>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a0c      	ldr	r2, [pc, #48]	; (800a7a4 <TIM_Base_SetConfig+0x124>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d103      	bne.n	800a780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	691a      	ldr	r2, [r3, #16]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	615a      	str	r2, [r3, #20]
}
 800a786:	bf00      	nop
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	40010000 	.word	0x40010000
 800a798:	40000400 	.word	0x40000400
 800a79c:	40000800 	.word	0x40000800
 800a7a0:	40000c00 	.word	0x40000c00
 800a7a4:	40010400 	.word	0x40010400
 800a7a8:	40014000 	.word	0x40014000
 800a7ac:	40014400 	.word	0x40014400
 800a7b0:	40014800 	.word	0x40014800
 800a7b4:	40001800 	.word	0x40001800
 800a7b8:	40001c00 	.word	0x40001c00
 800a7bc:	40002000 	.word	0x40002000

0800a7c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b087      	sub	sp, #28
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	f023 0201 	bic.w	r2, r3, #1
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a1b      	ldr	r3, [r3, #32]
 800a7da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f023 0303 	bic.w	r3, r3, #3
 800a7f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	f023 0302 	bic.w	r3, r3, #2
 800a808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	4313      	orrs	r3, r2
 800a812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a20      	ldr	r2, [pc, #128]	; (800a898 <TIM_OC1_SetConfig+0xd8>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d003      	beq.n	800a824 <TIM_OC1_SetConfig+0x64>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a1f      	ldr	r2, [pc, #124]	; (800a89c <TIM_OC1_SetConfig+0xdc>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d10c      	bne.n	800a83e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f023 0308 	bic.w	r3, r3, #8
 800a82a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	697a      	ldr	r2, [r7, #20]
 800a832:	4313      	orrs	r3, r2
 800a834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f023 0304 	bic.w	r3, r3, #4
 800a83c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a15      	ldr	r2, [pc, #84]	; (800a898 <TIM_OC1_SetConfig+0xd8>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d003      	beq.n	800a84e <TIM_OC1_SetConfig+0x8e>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a14      	ldr	r2, [pc, #80]	; (800a89c <TIM_OC1_SetConfig+0xdc>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d111      	bne.n	800a872 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a85c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	693a      	ldr	r2, [r7, #16]
 800a864:	4313      	orrs	r3, r2
 800a866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	4313      	orrs	r3, r2
 800a870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	685a      	ldr	r2, [r3, #4]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	697a      	ldr	r2, [r7, #20]
 800a88a:	621a      	str	r2, [r3, #32]
}
 800a88c:	bf00      	nop
 800a88e:	371c      	adds	r7, #28
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	40010000 	.word	0x40010000
 800a89c:	40010400 	.word	0x40010400

0800a8a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	f023 0210 	bic.w	r2, r3, #16
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	021b      	lsls	r3, r3, #8
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	f023 0320 	bic.w	r3, r3, #32
 800a8ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	011b      	lsls	r3, r3, #4
 800a8f2:	697a      	ldr	r2, [r7, #20]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a22      	ldr	r2, [pc, #136]	; (800a984 <TIM_OC2_SetConfig+0xe4>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d003      	beq.n	800a908 <TIM_OC2_SetConfig+0x68>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a21      	ldr	r2, [pc, #132]	; (800a988 <TIM_OC2_SetConfig+0xe8>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d10d      	bne.n	800a924 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a90e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	011b      	lsls	r3, r3, #4
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	4313      	orrs	r3, r2
 800a91a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a922:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a17      	ldr	r2, [pc, #92]	; (800a984 <TIM_OC2_SetConfig+0xe4>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d003      	beq.n	800a934 <TIM_OC2_SetConfig+0x94>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a16      	ldr	r2, [pc, #88]	; (800a988 <TIM_OC2_SetConfig+0xe8>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d113      	bne.n	800a95c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a93a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	699b      	ldr	r3, [r3, #24]
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	4313      	orrs	r3, r2
 800a95a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	621a      	str	r2, [r3, #32]
}
 800a976:	bf00      	nop
 800a978:	371c      	adds	r7, #28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	40010000 	.word	0x40010000
 800a988:	40010400 	.word	0x40010400

0800a98c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f023 0303 	bic.w	r3, r3, #3
 800a9c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	021b      	lsls	r3, r3, #8
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a21      	ldr	r2, [pc, #132]	; (800aa6c <TIM_OC3_SetConfig+0xe0>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d003      	beq.n	800a9f2 <TIM_OC3_SetConfig+0x66>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a20      	ldr	r2, [pc, #128]	; (800aa70 <TIM_OC3_SetConfig+0xe4>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d10d      	bne.n	800aa0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	021b      	lsls	r3, r3, #8
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a16      	ldr	r2, [pc, #88]	; (800aa6c <TIM_OC3_SetConfig+0xe0>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d003      	beq.n	800aa1e <TIM_OC3_SetConfig+0x92>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a15      	ldr	r2, [pc, #84]	; (800aa70 <TIM_OC3_SetConfig+0xe4>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d113      	bne.n	800aa46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	011b      	lsls	r3, r3, #4
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	011b      	lsls	r3, r3, #4
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	621a      	str	r2, [r3, #32]
}
 800aa60:	bf00      	nop
 800aa62:	371c      	adds	r7, #28
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	40010000 	.word	0x40010000
 800aa70:	40010400 	.word	0x40010400

0800aa74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b087      	sub	sp, #28
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	021b      	lsls	r3, r3, #8
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aabe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	031b      	lsls	r3, r3, #12
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a12      	ldr	r2, [pc, #72]	; (800ab18 <TIM_OC4_SetConfig+0xa4>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d003      	beq.n	800aadc <TIM_OC4_SetConfig+0x68>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a11      	ldr	r2, [pc, #68]	; (800ab1c <TIM_OC4_SetConfig+0xa8>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d109      	bne.n	800aaf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	695b      	ldr	r3, [r3, #20]
 800aae8:	019b      	lsls	r3, r3, #6
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	685a      	ldr	r2, [r3, #4]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	621a      	str	r2, [r3, #32]
}
 800ab0a:	bf00      	nop
 800ab0c:	371c      	adds	r7, #28
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	40010000 	.word	0x40010000
 800ab1c:	40010400 	.word	0x40010400

0800ab20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d101      	bne.n	800ab38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab34:	2302      	movs	r3, #2
 800ab36:	e05a      	b.n	800abee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2202      	movs	r2, #2
 800ab44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a21      	ldr	r2, [pc, #132]	; (800abfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d022      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab84:	d01d      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a1d      	ldr	r2, [pc, #116]	; (800ac00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d018      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a1b      	ldr	r2, [pc, #108]	; (800ac04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d013      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a1a      	ldr	r2, [pc, #104]	; (800ac08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d00e      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a18      	ldr	r2, [pc, #96]	; (800ac0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d009      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a17      	ldr	r2, [pc, #92]	; (800ac10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d004      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a15      	ldr	r2, [pc, #84]	; (800ac14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d10c      	bne.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	40010000 	.word	0x40010000
 800ac00:	40000400 	.word	0x40000400
 800ac04:	40000800 	.word	0x40000800
 800ac08:	40000c00 	.word	0x40000c00
 800ac0c:	40010400 	.word	0x40010400
 800ac10:	40014000 	.word	0x40014000
 800ac14:	40001800 	.word	0x40001800

0800ac18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac40:	b084      	sub	sp, #16
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	f107 001c 	add.w	r0, r7, #28
 800ac4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d122      	bne.n	800ac9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ac6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ac80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d105      	bne.n	800ac92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f9c0 	bl	800b018 <USB_CoreReset>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73fb      	strb	r3, [r7, #15]
 800ac9c:	e01a      	b.n	800acd4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f9b4 	bl	800b018 <USB_CoreReset>
 800acb0:	4603      	mov	r3, r0
 800acb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800acb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d106      	bne.n	800acc8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	639a      	str	r2, [r3, #56]	; 0x38
 800acc6:	e005      	b.n	800acd4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800accc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d10b      	bne.n	800acf2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f043 0206 	orr.w	r2, r3, #6
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	f043 0220 	orr.w	r2, r3, #32
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acfe:	b004      	add	sp, #16
 800ad00:	4770      	bx	lr

0800ad02 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b083      	sub	sp, #12
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	f043 0201 	orr.w	r2, r3, #1
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f023 0201 	bic.w	r2, r3, #1
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b084      	sub	sp, #16
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	460b      	mov	r3, r1
 800ad50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ad52:	2300      	movs	r3, #0
 800ad54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ad62:	78fb      	ldrb	r3, [r7, #3]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d115      	bne.n	800ad94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ad74:	2001      	movs	r0, #1
 800ad76:	f7f9 ff2b 	bl	8004bd0 <HAL_Delay>
      ms++;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f93a 	bl	800affa <USB_GetMode>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d01e      	beq.n	800adca <USB_SetCurrentMode+0x84>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b31      	cmp	r3, #49	; 0x31
 800ad90:	d9f0      	bls.n	800ad74 <USB_SetCurrentMode+0x2e>
 800ad92:	e01a      	b.n	800adca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ad94:	78fb      	ldrb	r3, [r7, #3]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d115      	bne.n	800adc6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ada6:	2001      	movs	r0, #1
 800ada8:	f7f9 ff12 	bl	8004bd0 <HAL_Delay>
      ms++;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	3301      	adds	r3, #1
 800adb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f921 	bl	800affa <USB_GetMode>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d005      	beq.n	800adca <USB_SetCurrentMode+0x84>
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2b31      	cmp	r3, #49	; 0x31
 800adc2:	d9f0      	bls.n	800ada6 <USB_SetCurrentMode+0x60>
 800adc4:	e001      	b.n	800adca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e005      	b.n	800add6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2b32      	cmp	r3, #50	; 0x32
 800adce:	d101      	bne.n	800add4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	e000      	b.n	800add6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
	...

0800ade0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800adea:	2300      	movs	r3, #0
 800adec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3301      	adds	r3, #1
 800adf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	4a13      	ldr	r2, [pc, #76]	; (800ae44 <USB_FlushTxFifo+0x64>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d901      	bls.n	800ae00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800adfc:	2303      	movs	r3, #3
 800adfe:	e01b      	b.n	800ae38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	daf2      	bge.n	800adee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	019b      	lsls	r3, r3, #6
 800ae10:	f043 0220 	orr.w	r2, r3, #32
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	4a08      	ldr	r2, [pc, #32]	; (800ae44 <USB_FlushTxFifo+0x64>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d901      	bls.n	800ae2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e006      	b.n	800ae38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	f003 0320 	and.w	r3, r3, #32
 800ae32:	2b20      	cmp	r3, #32
 800ae34:	d0f0      	beq.n	800ae18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3714      	adds	r7, #20
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	00030d40 	.word	0x00030d40

0800ae48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae50:	2300      	movs	r3, #0
 800ae52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3301      	adds	r3, #1
 800ae58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	4a11      	ldr	r2, [pc, #68]	; (800aea4 <USB_FlushRxFifo+0x5c>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d901      	bls.n	800ae66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e018      	b.n	800ae98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	daf2      	bge.n	800ae54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2210      	movs	r2, #16
 800ae76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	4a08      	ldr	r2, [pc, #32]	; (800aea4 <USB_FlushRxFifo+0x5c>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d901      	bls.n	800ae8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ae86:	2303      	movs	r3, #3
 800ae88:	e006      	b.n	800ae98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	f003 0310 	and.w	r3, r3, #16
 800ae92:	2b10      	cmp	r3, #16
 800ae94:	d0f0      	beq.n	800ae78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr
 800aea4:	00030d40 	.word	0x00030d40

0800aea8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b089      	sub	sp, #36	; 0x24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	71fb      	strb	r3, [r7, #7]
 800aeba:	4613      	mov	r3, r2
 800aebc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800aec6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d123      	bne.n	800af16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aece:	88bb      	ldrh	r3, [r7, #4]
 800aed0:	3303      	adds	r3, #3
 800aed2:	089b      	lsrs	r3, r3, #2
 800aed4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800aed6:	2300      	movs	r3, #0
 800aed8:	61bb      	str	r3, [r7, #24]
 800aeda:	e018      	b.n	800af0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aedc:	79fb      	ldrb	r3, [r7, #7]
 800aede:	031a      	lsls	r2, r3, #12
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	4413      	add	r3, r2
 800aee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee8:	461a      	mov	r2, r3
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6013      	str	r3, [r2, #0]
      pSrc++;
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	3301      	adds	r3, #1
 800aef4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	3301      	adds	r3, #1
 800aefa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	3301      	adds	r3, #1
 800af00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	3301      	adds	r3, #1
 800af06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	3301      	adds	r3, #1
 800af0c:	61bb      	str	r3, [r7, #24]
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	429a      	cmp	r2, r3
 800af14:	d3e2      	bcc.n	800aedc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3724      	adds	r7, #36	; 0x24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800af24:	b480      	push	{r7}
 800af26:	b08b      	sub	sp, #44	; 0x2c
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	4613      	mov	r3, r2
 800af30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800af3a:	88fb      	ldrh	r3, [r7, #6]
 800af3c:	089b      	lsrs	r3, r3, #2
 800af3e:	b29b      	uxth	r3, r3
 800af40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800af42:	88fb      	ldrh	r3, [r7, #6]
 800af44:	f003 0303 	and.w	r3, r3, #3
 800af48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800af4a:	2300      	movs	r3, #0
 800af4c:	623b      	str	r3, [r7, #32]
 800af4e:	e014      	b.n	800af7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5a:	601a      	str	r2, [r3, #0]
    pDest++;
 800af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5e:	3301      	adds	r3, #1
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800af62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af64:	3301      	adds	r3, #1
 800af66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	3301      	adds	r3, #1
 800af6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af70:	3301      	adds	r3, #1
 800af72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	3301      	adds	r3, #1
 800af78:	623b      	str	r3, [r7, #32]
 800af7a:	6a3a      	ldr	r2, [r7, #32]
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d3e6      	bcc.n	800af50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800af82:	8bfb      	ldrh	r3, [r7, #30]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d01e      	beq.n	800afc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800af88:	2300      	movs	r3, #0
 800af8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af92:	461a      	mov	r2, r3
 800af94:	f107 0310 	add.w	r3, r7, #16
 800af98:	6812      	ldr	r2, [r2, #0]
 800af9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800af9c:	693a      	ldr	r2, [r7, #16]
 800af9e:	6a3b      	ldr	r3, [r7, #32]
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	00db      	lsls	r3, r3, #3
 800afa4:	fa22 f303 	lsr.w	r3, r2, r3
 800afa8:	b2da      	uxtb	r2, r3
 800afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afac:	701a      	strb	r2, [r3, #0]
      i++;
 800afae:	6a3b      	ldr	r3, [r7, #32]
 800afb0:	3301      	adds	r3, #1
 800afb2:	623b      	str	r3, [r7, #32]
      pDest++;
 800afb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb6:	3301      	adds	r3, #1
 800afb8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800afba:	8bfb      	ldrh	r3, [r7, #30]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800afc0:	8bfb      	ldrh	r3, [r7, #30]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1ea      	bne.n	800af9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800afc8:	4618      	mov	r0, r3
 800afca:	372c      	adds	r7, #44	; 0x2c
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	695b      	ldr	r3, [r3, #20]
 800afe0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	4013      	ands	r3, r2
 800afea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800afec:	68fb      	ldr	r3, [r7, #12]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800affa:	b480      	push	{r7}
 800affc:	b083      	sub	sp, #12
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	f003 0301 	and.w	r3, r3, #1
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
	...

0800b018 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b020:	2300      	movs	r3, #0
 800b022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3301      	adds	r3, #1
 800b028:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	4a13      	ldr	r2, [pc, #76]	; (800b07c <USB_CoreReset+0x64>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d901      	bls.n	800b036 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e01b      	b.n	800b06e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	daf2      	bge.n	800b024 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b03e:	2300      	movs	r3, #0
 800b040:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	f043 0201 	orr.w	r2, r3, #1
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3301      	adds	r3, #1
 800b052:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	4a09      	ldr	r2, [pc, #36]	; (800b07c <USB_CoreReset+0x64>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d901      	bls.n	800b060 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e006      	b.n	800b06e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	f003 0301 	and.w	r3, r3, #1
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d0f0      	beq.n	800b04e <USB_CoreReset+0x36>

  return HAL_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	00030d40 	.word	0x00030d40

0800b080 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b080:	b084      	sub	sp, #16
 800b082:	b580      	push	{r7, lr}
 800b084:	b086      	sub	sp, #24
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b08e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d018      	beq.n	800b108 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d10a      	bne.n	800b0f2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0ea:	f043 0304 	orr.w	r3, r3, #4
 800b0ee:	6013      	str	r3, [r2, #0]
 800b0f0:	e014      	b.n	800b11c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b100:	f023 0304 	bic.w	r3, r3, #4
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	e009      	b.n	800b11c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b116:	f023 0304 	bic.w	r3, r3, #4
 800b11a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b11c:	2110      	movs	r1, #16
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff fe5e 	bl	800ade0 <USB_FlushTxFifo>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f7ff fe8a 	bl	800ae48 <USB_FlushRxFifo>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d001      	beq.n	800b13e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800b13a:	2301      	movs	r3, #1
 800b13c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b13e:	2300      	movs	r3, #0
 800b140:	613b      	str	r3, [r7, #16]
 800b142:	e015      	b.n	800b170 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	015a      	lsls	r2, r3, #5
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	4413      	add	r3, r2
 800b14c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b150:	461a      	mov	r2, r3
 800b152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b156:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	015a      	lsls	r2, r3, #5
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b164:	461a      	mov	r2, r3
 800b166:	2300      	movs	r3, #0
 800b168:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	3301      	adds	r3, #1
 800b16e:	613b      	str	r3, [r7, #16]
 800b170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	429a      	cmp	r2, r3
 800b176:	d3e5      	bcc.n	800b144 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b184:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00b      	beq.n	800b1aa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b198:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4a13      	ldr	r2, [pc, #76]	; (800b1ec <USB_HostInit+0x16c>)
 800b19e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a13      	ldr	r2, [pc, #76]	; (800b1f0 <USB_HostInit+0x170>)
 800b1a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b1a8:	e009      	b.n	800b1be <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2280      	movs	r2, #128	; 0x80
 800b1ae:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a10      	ldr	r2, [pc, #64]	; (800b1f4 <USB_HostInit+0x174>)
 800b1b4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a0f      	ldr	r2, [pc, #60]	; (800b1f8 <USB_HostInit+0x178>)
 800b1ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d105      	bne.n	800b1d0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	f043 0210 	orr.w	r2, r3, #16
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	699a      	ldr	r2, [r3, #24]
 800b1d4:	4b09      	ldr	r3, [pc, #36]	; (800b1fc <USB_HostInit+0x17c>)
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3718      	adds	r7, #24
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b1e8:	b004      	add	sp, #16
 800b1ea:	4770      	bx	lr
 800b1ec:	01000200 	.word	0x01000200
 800b1f0:	00e00300 	.word	0x00e00300
 800b1f4:	00600080 	.word	0x00600080
 800b1f8:	004000e0 	.word	0x004000e0
 800b1fc:	a3200008 	.word	0xa3200008

0800b200 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	460b      	mov	r3, r1
 800b20a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b21e:	f023 0303 	bic.w	r3, r3, #3
 800b222:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	78fb      	ldrb	r3, [r7, #3]
 800b22e:	f003 0303 	and.w	r3, r3, #3
 800b232:	68f9      	ldr	r1, [r7, #12]
 800b234:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b238:	4313      	orrs	r3, r2
 800b23a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b23c:	78fb      	ldrb	r3, [r7, #3]
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d107      	bne.n	800b252 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b248:	461a      	mov	r2, r3
 800b24a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b24e:	6053      	str	r3, [r2, #4]
 800b250:	e009      	b.n	800b266 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b252:	78fb      	ldrb	r3, [r7, #3]
 800b254:	2b02      	cmp	r3, #2
 800b256:	d106      	bne.n	800b266 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b25e:	461a      	mov	r2, r3
 800b260:	f241 7370 	movw	r3, #6000	; 0x1770
 800b264:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b280:	2300      	movs	r3, #0
 800b282:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b294:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b29e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b2a4:	2064      	movs	r0, #100	; 0x64
 800b2a6:	f7f9 fc93 	bl	8004bd0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b2b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b2b8:	200a      	movs	r0, #10
 800b2ba:	f7f9 fc89 	bl	8004bd0 <HAL_Delay>

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3710      	adds	r7, #16
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b2ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d109      	bne.n	800b30c <USB_DriveVbus+0x44>
 800b2f8:	78fb      	ldrb	r3, [r7, #3]
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d106      	bne.n	800b30c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b306:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b30a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b316:	d109      	bne.n	800b32c <USB_DriveVbus+0x64>
 800b318:	78fb      	ldrb	r3, [r7, #3]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d106      	bne.n	800b32c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b32a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b085      	sub	sp, #20
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b346:	2300      	movs	r3, #0
 800b348:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	0c5b      	lsrs	r3, r3, #17
 800b358:	f003 0303 	and.w	r3, r3, #3
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3714      	adds	r7, #20
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	b29b      	uxth	r3, r3
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
	...

0800b38c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	4608      	mov	r0, r1
 800b396:	4611      	mov	r1, r2
 800b398:	461a      	mov	r2, r3
 800b39a:	4603      	mov	r3, r0
 800b39c:	70fb      	strb	r3, [r7, #3]
 800b39e:	460b      	mov	r3, r1
 800b3a0:	70bb      	strb	r3, [r7, #2]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b3ae:	78fb      	ldrb	r3, [r7, #3]
 800b3b0:	015a      	lsls	r2, r3, #5
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3c0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b3c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b3c6:	2b03      	cmp	r3, #3
 800b3c8:	d87e      	bhi.n	800b4c8 <USB_HC_Init+0x13c>
 800b3ca:	a201      	add	r2, pc, #4	; (adr r2, 800b3d0 <USB_HC_Init+0x44>)
 800b3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d0:	0800b3e1 	.word	0x0800b3e1
 800b3d4:	0800b48b 	.word	0x0800b48b
 800b3d8:	0800b3e1 	.word	0x0800b3e1
 800b3dc:	0800b44d 	.word	0x0800b44d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b3e0:	78fb      	ldrb	r3, [r7, #3]
 800b3e2:	015a      	lsls	r2, r3, #5
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	f240 439d 	movw	r3, #1181	; 0x49d
 800b3f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b3f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	da10      	bge.n	800b41e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b3fc:	78fb      	ldrb	r3, [r7, #3]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	4413      	add	r3, r2
 800b404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	78fa      	ldrb	r2, [r7, #3]
 800b40c:	0151      	lsls	r1, r2, #5
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	440a      	add	r2, r1
 800b412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b41a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800b41c:	e057      	b.n	800b4ce <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b426:	2b00      	cmp	r3, #0
 800b428:	d051      	beq.n	800b4ce <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b42a:	78fb      	ldrb	r3, [r7, #3]
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	4413      	add	r3, r2
 800b432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	78fa      	ldrb	r2, [r7, #3]
 800b43a:	0151      	lsls	r1, r2, #5
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	440a      	add	r2, r1
 800b440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b444:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b448:	60d3      	str	r3, [r2, #12]
      break;
 800b44a:	e040      	b.n	800b4ce <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b44c:	78fb      	ldrb	r3, [r7, #3]
 800b44e:	015a      	lsls	r2, r3, #5
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	4413      	add	r3, r2
 800b454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b458:	461a      	mov	r2, r3
 800b45a:	f240 639d 	movw	r3, #1693	; 0x69d
 800b45e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b460:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b464:	2b00      	cmp	r3, #0
 800b466:	da34      	bge.n	800b4d2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b468:	78fb      	ldrb	r3, [r7, #3]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	78fa      	ldrb	r2, [r7, #3]
 800b478:	0151      	lsls	r1, r2, #5
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	440a      	add	r2, r1
 800b47e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b486:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b488:	e023      	b.n	800b4d2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b48a:	78fb      	ldrb	r3, [r7, #3]
 800b48c:	015a      	lsls	r2, r3, #5
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	4413      	add	r3, r2
 800b492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b496:	461a      	mov	r2, r3
 800b498:	f240 2325 	movw	r3, #549	; 0x225
 800b49c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b49e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	da17      	bge.n	800b4d6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b4a6:	78fb      	ldrb	r3, [r7, #3]
 800b4a8:	015a      	lsls	r2, r3, #5
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	78fa      	ldrb	r2, [r7, #3]
 800b4b6:	0151      	lsls	r1, r2, #5
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	440a      	add	r2, r1
 800b4bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4c0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b4c4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b4c6:	e006      	b.n	800b4d6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	77fb      	strb	r3, [r7, #31]
      break;
 800b4cc:	e004      	b.n	800b4d8 <USB_HC_Init+0x14c>
      break;
 800b4ce:	bf00      	nop
 800b4d0:	e002      	b.n	800b4d8 <USB_HC_Init+0x14c>
      break;
 800b4d2:	bf00      	nop
 800b4d4:	e000      	b.n	800b4d8 <USB_HC_Init+0x14c>
      break;
 800b4d6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b4d8:	78fb      	ldrb	r3, [r7, #3]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	78fa      	ldrb	r2, [r7, #3]
 800b4e8:	0151      	lsls	r1, r2, #5
 800b4ea:	693a      	ldr	r2, [r7, #16]
 800b4ec:	440a      	add	r2, r1
 800b4ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4f2:	f043 0302 	orr.w	r3, r3, #2
 800b4f6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b4fe:	699a      	ldr	r2, [r3, #24]
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	f003 030f 	and.w	r3, r3, #15
 800b506:	2101      	movs	r1, #1
 800b508:	fa01 f303 	lsl.w	r3, r1, r3
 800b50c:	6939      	ldr	r1, [r7, #16]
 800b50e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b512:	4313      	orrs	r3, r2
 800b514:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b522:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b526:	2b00      	cmp	r3, #0
 800b528:	da03      	bge.n	800b532 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b52a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b52e:	61bb      	str	r3, [r7, #24]
 800b530:	e001      	b.n	800b536 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800b532:	2300      	movs	r3, #0
 800b534:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7ff feff 	bl	800b33a <USB_GetHostSpeed>
 800b53c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b53e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b542:	2b02      	cmp	r3, #2
 800b544:	d106      	bne.n	800b554 <USB_HC_Init+0x1c8>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d003      	beq.n	800b554 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b54c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b550:	617b      	str	r3, [r7, #20]
 800b552:	e001      	b.n	800b558 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b554:	2300      	movs	r3, #0
 800b556:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b558:	787b      	ldrb	r3, [r7, #1]
 800b55a:	059b      	lsls	r3, r3, #22
 800b55c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b560:	78bb      	ldrb	r3, [r7, #2]
 800b562:	02db      	lsls	r3, r3, #11
 800b564:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b568:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b56a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b56e:	049b      	lsls	r3, r3, #18
 800b570:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b574:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b576:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b578:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b57c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b582:	78fb      	ldrb	r3, [r7, #3]
 800b584:	0159      	lsls	r1, r3, #5
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	440b      	add	r3, r1
 800b58a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b58e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b594:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b596:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b59a:	2b03      	cmp	r3, #3
 800b59c:	d003      	beq.n	800b5a6 <USB_HC_Init+0x21a>
 800b59e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d10f      	bne.n	800b5c6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b5a6:	78fb      	ldrb	r3, [r7, #3]
 800b5a8:	015a      	lsls	r2, r3, #5
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	78fa      	ldrb	r2, [r7, #3]
 800b5b6:	0151      	lsls	r1, r2, #5
 800b5b8:	693a      	ldr	r2, [r7, #16]
 800b5ba:	440a      	add	r2, r1
 800b5bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b5c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5c4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b5c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3720      	adds	r7, #32
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08c      	sub	sp, #48	; 0x30
 800b5d4:	af02      	add	r7, sp, #8
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	785b      	ldrb	r3, [r3, #1]
 800b5e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b5e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5ec:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d02d      	beq.n	800b656 <USB_HC_StartXfer+0x86>
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	791b      	ldrb	r3, [r3, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d129      	bne.n	800b656 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800b602:	79fb      	ldrb	r3, [r7, #7]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d117      	bne.n	800b638 <USB_HC_StartXfer+0x68>
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	79db      	ldrb	r3, [r3, #7]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d003      	beq.n	800b618 <USB_HC_StartXfer+0x48>
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	79db      	ldrb	r3, [r3, #7]
 800b614:	2b02      	cmp	r3, #2
 800b616:	d10f      	bne.n	800b638 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	015a      	lsls	r2, r3, #5
 800b61c:	6a3b      	ldr	r3, [r7, #32]
 800b61e:	4413      	add	r3, r2
 800b620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	69fa      	ldr	r2, [r7, #28]
 800b628:	0151      	lsls	r1, r2, #5
 800b62a:	6a3a      	ldr	r2, [r7, #32]
 800b62c:	440a      	add	r2, r1
 800b62e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b636:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800b638:	79fb      	ldrb	r3, [r7, #7]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10b      	bne.n	800b656 <USB_HC_StartXfer+0x86>
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	795b      	ldrb	r3, [r3, #5]
 800b642:	2b01      	cmp	r3, #1
 800b644:	d107      	bne.n	800b656 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	785b      	ldrb	r3, [r3, #1]
 800b64a:	4619      	mov	r1, r3
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f000 fa0f 	bl	800ba70 <USB_DoPing>
      return HAL_OK;
 800b652:	2300      	movs	r3, #0
 800b654:	e0f8      	b.n	800b848 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d018      	beq.n	800b690 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	695b      	ldr	r3, [r3, #20]
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	8912      	ldrh	r2, [r2, #8]
 800b666:	4413      	add	r3, r2
 800b668:	3b01      	subs	r3, #1
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	8912      	ldrh	r2, [r2, #8]
 800b66e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b672:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b674:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b676:	8b7b      	ldrh	r3, [r7, #26]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d90b      	bls.n	800b694 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800b67c:	8b7b      	ldrh	r3, [r7, #26]
 800b67e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b680:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	8912      	ldrh	r2, [r2, #8]
 800b686:	fb03 f202 	mul.w	r2, r3, r2
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	611a      	str	r2, [r3, #16]
 800b68e:	e001      	b.n	800b694 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800b690:	2301      	movs	r3, #1
 800b692:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	78db      	ldrb	r3, [r3, #3]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d007      	beq.n	800b6ac <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b69c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b69e:	68ba      	ldr	r2, [r7, #8]
 800b6a0:	8912      	ldrh	r2, [r2, #8]
 800b6a2:	fb03 f202 	mul.w	r2, r3, r2
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	611a      	str	r2, [r3, #16]
 800b6aa:	e003      	b.n	800b6b4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	695a      	ldr	r2, [r3, #20]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b6bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b6be:	04d9      	lsls	r1, r3, #19
 800b6c0:	4b63      	ldr	r3, [pc, #396]	; (800b850 <USB_HC_StartXfer+0x280>)
 800b6c2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b6c4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	7a9b      	ldrb	r3, [r3, #10]
 800b6ca:	075b      	lsls	r3, r3, #29
 800b6cc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b6d0:	69f9      	ldr	r1, [r7, #28]
 800b6d2:	0148      	lsls	r0, r1, #5
 800b6d4:	6a39      	ldr	r1, [r7, #32]
 800b6d6:	4401      	add	r1, r0
 800b6d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b6dc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b6de:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b6e0:	79fb      	ldrb	r3, [r7, #7]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d009      	beq.n	800b6fa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	68d9      	ldr	r1, [r3, #12]
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	015a      	lsls	r2, r3, #5
 800b6ee:	6a3b      	ldr	r3, [r7, #32]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6f6:	460a      	mov	r2, r1
 800b6f8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	f003 0301 	and.w	r3, r3, #1
 800b706:	2b00      	cmp	r3, #0
 800b708:	bf0c      	ite	eq
 800b70a:	2301      	moveq	r3, #1
 800b70c:	2300      	movne	r3, #0
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	015a      	lsls	r2, r3, #5
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	4413      	add	r3, r2
 800b71a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	69fa      	ldr	r2, [r7, #28]
 800b722:	0151      	lsls	r1, r2, #5
 800b724:	6a3a      	ldr	r2, [r7, #32]
 800b726:	440a      	add	r2, r1
 800b728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b72c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b730:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	015a      	lsls	r2, r3, #5
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	4413      	add	r3, r2
 800b73a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	7e7b      	ldrb	r3, [r7, #25]
 800b742:	075b      	lsls	r3, r3, #29
 800b744:	69f9      	ldr	r1, [r7, #28]
 800b746:	0148      	lsls	r0, r1, #5
 800b748:	6a39      	ldr	r1, [r7, #32]
 800b74a:	4401      	add	r1, r0
 800b74c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b750:	4313      	orrs	r3, r2
 800b752:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	015a      	lsls	r2, r3, #5
 800b758:	6a3b      	ldr	r3, [r7, #32]
 800b75a:	4413      	add	r3, r2
 800b75c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b76a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	78db      	ldrb	r3, [r3, #3]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d004      	beq.n	800b77e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b77a:	613b      	str	r3, [r7, #16]
 800b77c:	e003      	b.n	800b786 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b784:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b78c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	015a      	lsls	r2, r3, #5
 800b792:	6a3b      	ldr	r3, [r7, #32]
 800b794:	4413      	add	r3, r2
 800b796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b79a:	461a      	mov	r2, r3
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b7a0:	79fb      	ldrb	r3, [r7, #7]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	e04e      	b.n	800b848 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	78db      	ldrb	r3, [r3, #3]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d149      	bne.n	800b846 <USB_HC_StartXfer+0x276>
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	695b      	ldr	r3, [r3, #20]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d045      	beq.n	800b846 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	79db      	ldrb	r3, [r3, #7]
 800b7be:	2b03      	cmp	r3, #3
 800b7c0:	d830      	bhi.n	800b824 <USB_HC_StartXfer+0x254>
 800b7c2:	a201      	add	r2, pc, #4	; (adr r2, 800b7c8 <USB_HC_StartXfer+0x1f8>)
 800b7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c8:	0800b7d9 	.word	0x0800b7d9
 800b7cc:	0800b7fd 	.word	0x0800b7fd
 800b7d0:	0800b7d9 	.word	0x0800b7d9
 800b7d4:	0800b7fd 	.word	0x0800b7fd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	3303      	adds	r3, #3
 800b7de:	089b      	lsrs	r3, r3, #2
 800b7e0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b7e2:	8afa      	ldrh	r2, [r7, #22]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d91c      	bls.n	800b828 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	f043 0220 	orr.w	r2, r3, #32
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	619a      	str	r2, [r3, #24]
        }
        break;
 800b7fa:	e015      	b.n	800b828 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	3303      	adds	r3, #3
 800b802:	089b      	lsrs	r3, r3, #2
 800b804:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b806:	8afa      	ldrh	r2, [r7, #22]
 800b808:	6a3b      	ldr	r3, [r7, #32]
 800b80a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	b29b      	uxth	r3, r3
 800b812:	429a      	cmp	r2, r3
 800b814:	d90a      	bls.n	800b82c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	619a      	str	r2, [r3, #24]
        }
        break;
 800b822:	e003      	b.n	800b82c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b824:	bf00      	nop
 800b826:	e002      	b.n	800b82e <USB_HC_StartXfer+0x25e>
        break;
 800b828:	bf00      	nop
 800b82a:	e000      	b.n	800b82e <USB_HC_StartXfer+0x25e>
        break;
 800b82c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	68d9      	ldr	r1, [r3, #12]
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	785a      	ldrb	r2, [r3, #1]
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	2000      	movs	r0, #0
 800b83e:	9000      	str	r0, [sp, #0]
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f7ff fb31 	bl	800aea8 <USB_WritePacket>
  }

  return HAL_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3728      	adds	r7, #40	; 0x28
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	1ff80000 	.word	0x1ff80000

0800b854 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	b29b      	uxth	r3, r3
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr

0800b876 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b876:	b480      	push	{r7}
 800b878:	b089      	sub	sp, #36	; 0x24
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	460b      	mov	r3, r1
 800b880:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b886:	78fb      	ldrb	r3, [r7, #3]
 800b888:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b88a:	2300      	movs	r3, #0
 800b88c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	015a      	lsls	r2, r3, #5
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	4413      	add	r3, r2
 800b896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	0c9b      	lsrs	r3, r3, #18
 800b89e:	f003 0303 	and.w	r3, r3, #3
 800b8a2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	015a      	lsls	r2, r3, #5
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	0fdb      	lsrs	r3, r3, #31
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	f003 0320 	and.w	r3, r3, #32
 800b8c2:	2b20      	cmp	r3, #32
 800b8c4:	d104      	bne.n	800b8d0 <USB_HC_Halt+0x5a>
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	e0c8      	b.n	800ba62 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d002      	beq.n	800b8dc <USB_HC_Halt+0x66>
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d163      	bne.n	800b9a4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	015a      	lsls	r2, r3, #5
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	69ba      	ldr	r2, [r7, #24]
 800b8ec:	0151      	lsls	r1, r2, #5
 800b8ee:	69fa      	ldr	r2, [r7, #28]
 800b8f0:	440a      	add	r2, r1
 800b8f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b8f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8fa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	f003 0320 	and.w	r3, r3, #32
 800b904:	2b00      	cmp	r3, #0
 800b906:	f040 80ab 	bne.w	800ba60 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b912:	2b00      	cmp	r3, #0
 800b914:	d133      	bne.n	800b97e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	015a      	lsls	r2, r3, #5
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	4413      	add	r3, r2
 800b91e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	69ba      	ldr	r2, [r7, #24]
 800b926:	0151      	lsls	r1, r2, #5
 800b928:	69fa      	ldr	r2, [r7, #28]
 800b92a:	440a      	add	r2, r1
 800b92c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b934:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	015a      	lsls	r2, r3, #5
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	4413      	add	r3, r2
 800b93e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	69ba      	ldr	r2, [r7, #24]
 800b946:	0151      	lsls	r1, r2, #5
 800b948:	69fa      	ldr	r2, [r7, #28]
 800b94a:	440a      	add	r2, r1
 800b94c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b954:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	3301      	adds	r3, #1
 800b95a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b962:	d81d      	bhi.n	800b9a0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	015a      	lsls	r2, r3, #5
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	4413      	add	r3, r2
 800b96c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b976:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b97a:	d0ec      	beq.n	800b956 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b97c:	e070      	b.n	800ba60 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	015a      	lsls	r2, r3, #5
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	4413      	add	r3, r2
 800b986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	69ba      	ldr	r2, [r7, #24]
 800b98e:	0151      	lsls	r1, r2, #5
 800b990:	69fa      	ldr	r2, [r7, #28]
 800b992:	440a      	add	r2, r1
 800b994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b998:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b99c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b99e:	e05f      	b.n	800ba60 <USB_HC_Halt+0x1ea>
            break;
 800b9a0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b9a2:	e05d      	b.n	800ba60 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	015a      	lsls	r2, r3, #5
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	69ba      	ldr	r2, [r7, #24]
 800b9b4:	0151      	lsls	r1, r2, #5
 800b9b6:	69fa      	ldr	r2, [r7, #28]
 800b9b8:	440a      	add	r2, r1
 800b9ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9c2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9ca:	691b      	ldr	r3, [r3, #16]
 800b9cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d133      	bne.n	800ba3c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	015a      	lsls	r2, r3, #5
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	4413      	add	r3, r2
 800b9dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	69ba      	ldr	r2, [r7, #24]
 800b9e4:	0151      	lsls	r1, r2, #5
 800b9e6:	69fa      	ldr	r2, [r7, #28]
 800b9e8:	440a      	add	r2, r1
 800b9ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	015a      	lsls	r2, r3, #5
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	69ba      	ldr	r2, [r7, #24]
 800ba04:	0151      	lsls	r1, r2, #5
 800ba06:	69fa      	ldr	r2, [r7, #28]
 800ba08:	440a      	add	r2, r1
 800ba0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba12:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	3301      	adds	r3, #1
 800ba18:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba20:	d81d      	bhi.n	800ba5e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	015a      	lsls	r2, r3, #5
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	4413      	add	r3, r2
 800ba2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba38:	d0ec      	beq.n	800ba14 <USB_HC_Halt+0x19e>
 800ba3a:	e011      	b.n	800ba60 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	015a      	lsls	r2, r3, #5
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	4413      	add	r3, r2
 800ba44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	69ba      	ldr	r2, [r7, #24]
 800ba4c:	0151      	lsls	r1, r2, #5
 800ba4e:	69fa      	ldr	r2, [r7, #28]
 800ba50:	440a      	add	r2, r1
 800ba52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba5a:	6013      	str	r3, [r2, #0]
 800ba5c:	e000      	b.n	800ba60 <USB_HC_Halt+0x1ea>
          break;
 800ba5e:	bf00      	nop
    }
  }

  return HAL_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3724      	adds	r7, #36	; 0x24
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr
	...

0800ba70 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b087      	sub	sp, #28
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ba84:	2301      	movs	r3, #1
 800ba86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	04da      	lsls	r2, r3, #19
 800ba8c:	4b15      	ldr	r3, [pc, #84]	; (800bae4 <USB_DoPing+0x74>)
 800ba8e:	4013      	ands	r3, r2
 800ba90:	693a      	ldr	r2, [r7, #16]
 800ba92:	0151      	lsls	r1, r2, #5
 800ba94:	697a      	ldr	r2, [r7, #20]
 800ba96:	440a      	add	r2, r1
 800ba98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800baa0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	015a      	lsls	r2, r3, #5
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	4413      	add	r3, r2
 800baaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bab8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bac0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	015a      	lsls	r2, r3, #5
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	4413      	add	r3, r2
 800baca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bace:	461a      	mov	r2, r3
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	371c      	adds	r7, #28
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop
 800bae4:	1ff80000 	.word	0x1ff80000

0800bae8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b088      	sub	sp, #32
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800baf8:	2300      	movs	r3, #0
 800bafa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f7ff f911 	bl	800ad24 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb02:	2110      	movs	r1, #16
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7ff f96b 	bl	800ade0 <USB_FlushTxFifo>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d001      	beq.n	800bb14 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7ff f997 	bl	800ae48 <USB_FlushRxFifo>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bb24:	2300      	movs	r3, #0
 800bb26:	61bb      	str	r3, [r7, #24]
 800bb28:	e01f      	b.n	800bb6a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	015a      	lsls	r2, r3, #5
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	4413      	add	r3, r2
 800bb32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb40:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb50:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb5e:	461a      	mov	r2, r3
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	3301      	adds	r3, #1
 800bb68:	61bb      	str	r3, [r7, #24]
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	2b0f      	cmp	r3, #15
 800bb6e:	d9dc      	bls.n	800bb2a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bb70:	2300      	movs	r3, #0
 800bb72:	61bb      	str	r3, [r7, #24]
 800bb74:	e034      	b.n	800bbe0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	015a      	lsls	r2, r3, #5
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb8c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb9c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	015a      	lsls	r2, r3, #5
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	4413      	add	r3, r2
 800bba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbaa:	461a      	mov	r2, r3
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbbc:	d80c      	bhi.n	800bbd8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	015a      	lsls	r2, r3, #5
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbd4:	d0ec      	beq.n	800bbb0 <USB_StopHost+0xc8>
 800bbd6:	e000      	b.n	800bbda <USB_StopHost+0xf2>
        break;
 800bbd8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	61bb      	str	r3, [r7, #24]
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	2b0f      	cmp	r3, #15
 800bbe4:	d9c7      	bls.n	800bb76 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bbec:	461a      	mov	r2, r3
 800bbee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbf2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbfa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7ff f880 	bl	800ad02 <USB_EnableGlobalInt>

  return ret;
 800bc02:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3720      	adds	r7, #32
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	4613      	mov	r3, r2
 800bc18:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bc20:	2302      	movs	r3, #2
 800bc22:	e029      	b.n	800bc78 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	79fa      	ldrb	r2, [r7, #7]
 800bc28:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f000 f81f 	bl	800bc80 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d003      	beq.n	800bc70 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f001 fd0b 	bl	800d68c <USBH_LL_Init>

  return USBH_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	60fb      	str	r3, [r7, #12]
 800bc90:	e00a      	b.n	800bca8 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	4413      	add	r3, r2
 800bc9e:	2200      	movs	r2, #0
 800bca0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	3301      	adds	r3, #1
 800bca6:	60fb      	str	r3, [r7, #12]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2b0f      	cmp	r3, #15
 800bcac:	d9f1      	bls.n	800bc92 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bcae:	2300      	movs	r3, #0
 800bcb0:	60fb      	str	r3, [r7, #12]
 800bcb2:	e009      	b.n	800bcc8 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	4413      	add	r3, r2
 800bcba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	60fb      	str	r3, [r7, #12]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcce:	d3f1      	bcc.n	800bcb4 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2201      	movs	r2, #1
 800bcee:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2240      	movs	r2, #64	; 0x40
 800bcf4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3714      	adds	r7, #20
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b085      	sub	sp, #20
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
 800bd32:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d017      	beq.n	800bd6e <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d10f      	bne.n	800bd68 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800bd4e:	1c59      	adds	r1, r3, #1
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	f503 7389 	add.w	r3, r3, #274	; 0x112
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	73fb      	strb	r3, [r7, #15]
 800bd66:	e004      	b.n	800bd72 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bd68:	2302      	movs	r3, #2
 800bd6a:	73fb      	strb	r3, [r7, #15]
 800bd6c:	e001      	b.n	800bd72 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bd6e:	2302      	movs	r3, #2
 800bd70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bd72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800bd96:	78fa      	ldrb	r2, [r7, #3]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d204      	bcs.n	800bda6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	78fa      	ldrb	r2, [r7, #3]
 800bda0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bda4:	e001      	b.n	800bdaa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bda6:	2302      	movs	r3, #2
 800bda8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3714      	adds	r7, #20
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b087      	sub	sp, #28
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	4608      	mov	r0, r1
 800bdc2:	4611      	mov	r1, r2
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	70fb      	strb	r3, [r7, #3]
 800bdca:	460b      	mov	r3, r1
 800bdcc:	70bb      	strb	r3, [r7, #2]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bde0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bde2:	e025      	b.n	800be30 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bde4:	7dfb      	ldrb	r3, [r7, #23]
 800bde6:	221a      	movs	r2, #26
 800bde8:	fb02 f303 	mul.w	r3, r2, r3
 800bdec:	3308      	adds	r3, #8
 800bdee:	68fa      	ldr	r2, [r7, #12]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	3302      	adds	r3, #2
 800bdf4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	795b      	ldrb	r3, [r3, #5]
 800bdfa:	78fa      	ldrb	r2, [r7, #3]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d002      	beq.n	800be06 <USBH_FindInterface+0x4e>
 800be00:	78fb      	ldrb	r3, [r7, #3]
 800be02:	2bff      	cmp	r3, #255	; 0xff
 800be04:	d111      	bne.n	800be2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800be0a:	78ba      	ldrb	r2, [r7, #2]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d002      	beq.n	800be16 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800be10:	78bb      	ldrb	r3, [r7, #2]
 800be12:	2bff      	cmp	r3, #255	; 0xff
 800be14:	d109      	bne.n	800be2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800be1a:	787a      	ldrb	r2, [r7, #1]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d002      	beq.n	800be26 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800be20:	787b      	ldrb	r3, [r7, #1]
 800be22:	2bff      	cmp	r3, #255	; 0xff
 800be24:	d101      	bne.n	800be2a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	e006      	b.n	800be38 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	3301      	adds	r3, #1
 800be2e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	2b09      	cmp	r3, #9
 800be34:	d9d6      	bls.n	800bde4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800be36:	23ff      	movs	r3, #255	; 0xff
}
 800be38:	4618      	mov	r0, r3
 800be3a:	371c      	adds	r7, #28
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f001 fc59 	bl	800d704 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800be52:	2101      	movs	r1, #1
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f001 fd72 	bl	800d93e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b088      	sub	sp, #32
 800be68:	af04      	add	r7, sp, #16
 800be6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800be6c:	2302      	movs	r3, #2
 800be6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800be70:	2300      	movs	r3, #0
 800be72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d102      	bne.n	800be86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2203      	movs	r2, #3
 800be84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	2b0b      	cmp	r3, #11
 800be8e:	f200 81c0 	bhi.w	800c212 <USBH_Process+0x3ae>
 800be92:	a201      	add	r2, pc, #4	; (adr r2, 800be98 <USBH_Process+0x34>)
 800be94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be98:	0800bec9 	.word	0x0800bec9
 800be9c:	0800befb 	.word	0x0800befb
 800bea0:	0800bf63 	.word	0x0800bf63
 800bea4:	0800c1ad 	.word	0x0800c1ad
 800bea8:	0800c213 	.word	0x0800c213
 800beac:	0800c007 	.word	0x0800c007
 800beb0:	0800c153 	.word	0x0800c153
 800beb4:	0800c03d 	.word	0x0800c03d
 800beb8:	0800c05d 	.word	0x0800c05d
 800bebc:	0800c07d 	.word	0x0800c07d
 800bec0:	0800c0c1 	.word	0x0800c0c1
 800bec4:	0800c195 	.word	0x0800c195
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f000 81a0 	beq.w	800c216 <USBH_Process+0x3b2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2201      	movs	r2, #1
 800beda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bedc:	20c8      	movs	r0, #200	; 0xc8
 800bede:	f001 fd75 	bl	800d9cc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f001 fc6b 	bl	800d7be <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bef8:	e18d      	b.n	800c216 <USBH_Process+0x3b2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d107      	bne.n	800bf14 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2202      	movs	r2, #2
 800bf10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf12:	e18f      	b.n	800c234 <USBH_Process+0x3d0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800bf1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf1e:	d914      	bls.n	800bf4a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bf26:	3301      	adds	r3, #1
 800bf28:	b2da      	uxtb	r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	d903      	bls.n	800bf42 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	220d      	movs	r2, #13
 800bf3e:	701a      	strb	r2, [r3, #0]
      break;
 800bf40:	e178      	b.n	800c234 <USBH_Process+0x3d0>
            phost->gState = HOST_IDLE;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	701a      	strb	r2, [r3, #0]
      break;
 800bf48:	e174      	b.n	800c234 <USBH_Process+0x3d0>
          phost->Timeout += 10U;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800bf50:	f103 020a 	add.w	r2, r3, #10
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 800bf5a:	200a      	movs	r0, #10
 800bf5c:	f001 fd36 	bl	800d9cc <USBH_Delay>
      break;
 800bf60:	e168      	b.n	800c234 <USBH_Process+0x3d0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d005      	beq.n	800bf78 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800bf72:	2104      	movs	r1, #4
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bf78:	2064      	movs	r0, #100	; 0x64
 800bf7a:	f001 fd27 	bl	800d9cc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f001 fbf6 	bl	800d770 <USBH_LL_GetSpeed>
 800bf84:	4603      	mov	r3, r0
 800bf86:	461a      	mov	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2205      	movs	r2, #5
 800bf92:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bf94:	2100      	movs	r1, #0
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f001 f9fc 	bl	800d394 <USBH_AllocPipe>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bfa4:	2180      	movs	r1, #128	; 0x80
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f001 f9f4 	bl	800d394 <USBH_AllocPipe>
 800bfac:	4603      	mov	r3, r0
 800bfae:	461a      	mov	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	7919      	ldrb	r1, [r3, #4]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bfc8:	b292      	uxth	r2, r2
 800bfca:	9202      	str	r2, [sp, #8]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	9201      	str	r2, [sp, #4]
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2280      	movs	r2, #128	; 0x80
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f001 f9ad 	bl	800d336 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	7959      	ldrb	r1, [r3, #5]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bff0:	b292      	uxth	r2, r2
 800bff2:	9202      	str	r2, [sp, #8]
 800bff4:	2200      	movs	r2, #0
 800bff6:	9201      	str	r2, [sp, #4]
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	4603      	mov	r3, r0
 800bffc:	2200      	movs	r2, #0
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f001 f999 	bl	800d336 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c004:	e116      	b.n	800c234 <USBH_Process+0x3d0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f91a 	bl	800c240 <USBH_HandleEnum>
 800c00c:	4603      	mov	r3, r0
 800c00e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c010:	7bbb      	ldrb	r3, [r7, #14]
 800c012:	b2db      	uxtb	r3, r3
 800c014:	2b00      	cmp	r3, #0
 800c016:	f040 8100 	bne.w	800c21a <USBH_Process+0x3b6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d103      	bne.n	800c034 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2208      	movs	r2, #8
 800c030:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c032:	e0f2      	b.n	800c21a <USBH_Process+0x3b6>
          phost->gState = HOST_INPUT;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2207      	movs	r2, #7
 800c038:	701a      	strb	r2, [r3, #0]
      break;
 800c03a:	e0ee      	b.n	800c21a <USBH_Process+0x3b6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800c042:	2b00      	cmp	r3, #0
 800c044:	f000 80eb 	beq.w	800c21e <USBH_Process+0x3ba>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800c04e:	2101      	movs	r1, #1
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2208      	movs	r2, #8
 800c058:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c05a:	e0e0      	b.n	800c21e <USBH_Process+0x3ba>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c062:	b29b      	uxth	r3, r3
 800c064:	4619      	mov	r1, r3
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 fc2e 	bl	800c8c8 <USBH_SetCfg>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f040 80d7 	bne.w	800c222 <USBH_Process+0x3be>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2209      	movs	r2, #9
 800c078:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c07a:	e0d2      	b.n	800c222 <USBH_Process+0x3be>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c082:	f003 0320 	and.w	r3, r3, #32
 800c086:	2b00      	cmp	r3, #0
 800c088:	d016      	beq.n	800c0b8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c08a:	2101      	movs	r1, #1
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 fc3e 	bl	800c90e <USBH_SetFeature>
 800c092:	4603      	mov	r3, r0
 800c094:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c096:	7bbb      	ldrb	r3, [r7, #14]
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d103      	bne.n	800c0a6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	220a      	movs	r2, #10
 800c0a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c0a4:	e0bf      	b.n	800c226 <USBH_Process+0x3c2>
        else if (status == USBH_NOT_SUPPORTED)
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	f040 80bb 	bne.w	800c226 <USBH_Process+0x3c2>
          phost->gState = HOST_CHECK_CLASS;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	220a      	movs	r2, #10
 800c0b4:	701a      	strb	r2, [r3, #0]
      break;
 800c0b6:	e0b6      	b.n	800c226 <USBH_Process+0x3c2>
        phost->gState = HOST_CHECK_CLASS;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	220a      	movs	r2, #10
 800c0bc:	701a      	strb	r2, [r3, #0]
      break;
 800c0be:	e0b2      	b.n	800c226 <USBH_Process+0x3c2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 80af 	beq.w	800c22a <USBH_Process+0x3c6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	73fb      	strb	r3, [r7, #15]
 800c0d8:	e018      	b.n	800c10c <USBH_Process+0x2a8>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c0da:	7bfa      	ldrb	r2, [r7, #15]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f502 7289 	add.w	r2, r2, #274	; 0x112
 800c0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0e6:	791a      	ldrb	r2, [r3, #4]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d109      	bne.n	800c106 <USBH_Process+0x2a2>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c0f2:	7bfa      	ldrb	r2, [r7, #15]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f502 7289 	add.w	r2, r2, #274	; 0x112
 800c0fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 800c104:	e005      	b.n	800c112 <USBH_Process+0x2ae>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c106:	7bfb      	ldrb	r3, [r7, #15]
 800c108:	3301      	adds	r3, #1
 800c10a:	73fb      	strb	r3, [r7, #15]
 800c10c:	7bfb      	ldrb	r3, [r7, #15]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d0e3      	beq.n	800c0da <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d016      	beq.n	800c14a <USBH_Process+0x2e6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	4798      	blx	r3
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d109      	bne.n	800c142 <USBH_Process+0x2de>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2206      	movs	r2, #6
 800c132:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800c13a:	2103      	movs	r1, #3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c140:	e073      	b.n	800c22a <USBH_Process+0x3c6>
            phost->gState = HOST_ABORT_STATE;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	220d      	movs	r2, #13
 800c146:	701a      	strb	r2, [r3, #0]
      break;
 800c148:	e06f      	b.n	800c22a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	220d      	movs	r2, #13
 800c14e:	701a      	strb	r2, [r3, #0]
      break;
 800c150:	e06b      	b.n	800c22a <USBH_Process+0x3c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d017      	beq.n	800c18c <USBH_Process+0x328>
      {
        status = phost->pActiveClass->Requests(phost);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800c162:	691b      	ldr	r3, [r3, #16]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	4798      	blx	r3
 800c168:	4603      	mov	r3, r0
 800c16a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c16c:	7bbb      	ldrb	r3, [r7, #14]
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	2b00      	cmp	r3, #0
 800c172:	d103      	bne.n	800c17c <USBH_Process+0x318>
        {
          phost->gState = HOST_CLASS;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	220b      	movs	r2, #11
 800c178:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c17a:	e058      	b.n	800c22e <USBH_Process+0x3ca>
        else if (status == USBH_FAIL)
 800c17c:	7bbb      	ldrb	r3, [r7, #14]
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b02      	cmp	r3, #2
 800c182:	d154      	bne.n	800c22e <USBH_Process+0x3ca>
          phost->gState = HOST_ABORT_STATE;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	220d      	movs	r2, #13
 800c188:	701a      	strb	r2, [r3, #0]
      break;
 800c18a:	e050      	b.n	800c22e <USBH_Process+0x3ca>
        phost->gState = HOST_ABORT_STATE;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	220d      	movs	r2, #13
 800c190:	701a      	strb	r2, [r3, #0]
      break;
 800c192:	e04c      	b.n	800c22e <USBH_Process+0x3ca>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d049      	beq.n	800c232 <USBH_Process+0x3ce>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	4798      	blx	r3
      }
      break;
 800c1aa:	e042      	b.n	800c232 <USBH_Process+0x3ce>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f7ff fd63 	bl	800bc80 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d009      	beq.n	800c1d8 <USBH_Process+0x374>
      {
        phost->pActiveClass->DeInit(phost);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d005      	beq.n	800c1ee <USBH_Process+0x38a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800c1e8:	2105      	movs	r1, #5
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d107      	bne.n	800c20a <USBH_Process+0x3a6>
      {
        phost->device.is_ReEnumerated = 0U;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7ff fe1e 	bl	800be44 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c208:	e014      	b.n	800c234 <USBH_Process+0x3d0>
        (void)USBH_LL_Start(phost);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f001 fa7a 	bl	800d704 <USBH_LL_Start>
      break;
 800c210:	e010      	b.n	800c234 <USBH_Process+0x3d0>

    case HOST_ABORT_STATE:
    default :
      break;
 800c212:	bf00      	nop
 800c214:	e00e      	b.n	800c234 <USBH_Process+0x3d0>
      break;
 800c216:	bf00      	nop
 800c218:	e00c      	b.n	800c234 <USBH_Process+0x3d0>
      break;
 800c21a:	bf00      	nop
 800c21c:	e00a      	b.n	800c234 <USBH_Process+0x3d0>
    break;
 800c21e:	bf00      	nop
 800c220:	e008      	b.n	800c234 <USBH_Process+0x3d0>
      break;
 800c222:	bf00      	nop
 800c224:	e006      	b.n	800c234 <USBH_Process+0x3d0>
      break;
 800c226:	bf00      	nop
 800c228:	e004      	b.n	800c234 <USBH_Process+0x3d0>
      break;
 800c22a:	bf00      	nop
 800c22c:	e002      	b.n	800c234 <USBH_Process+0x3d0>
      break;
 800c22e:	bf00      	nop
 800c230:	e000      	b.n	800c234 <USBH_Process+0x3d0>
      break;
 800c232:	bf00      	nop
  }
  return USBH_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop

0800c240 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b088      	sub	sp, #32
 800c244:	af04      	add	r7, sp, #16
 800c246:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c248:	2301      	movs	r3, #1
 800c24a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c24c:	2301      	movs	r3, #1
 800c24e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	785b      	ldrb	r3, [r3, #1]
 800c254:	2b07      	cmp	r3, #7
 800c256:	f200 81c1 	bhi.w	800c5dc <USBH_HandleEnum+0x39c>
 800c25a:	a201      	add	r2, pc, #4	; (adr r2, 800c260 <USBH_HandleEnum+0x20>)
 800c25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c260:	0800c281 	.word	0x0800c281
 800c264:	0800c33f 	.word	0x0800c33f
 800c268:	0800c3a9 	.word	0x0800c3a9
 800c26c:	0800c437 	.word	0x0800c437
 800c270:	0800c4a1 	.word	0x0800c4a1
 800c274:	0800c511 	.word	0x0800c511
 800c278:	0800c557 	.word	0x0800c557
 800c27c:	0800c59d 	.word	0x0800c59d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c280:	2108      	movs	r1, #8
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fa50 	bl	800c728 <USBH_Get_DevDesc>
 800c288:	4603      	mov	r3, r0
 800c28a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c28c:	7bbb      	ldrb	r3, [r7, #14]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d130      	bne.n	800c2f4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	7919      	ldrb	r1, [r3, #4]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c2b6:	b292      	uxth	r2, r2
 800c2b8:	9202      	str	r2, [sp, #8]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	9201      	str	r2, [sp, #4]
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2280      	movs	r2, #128	; 0x80
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f001 f836 	bl	800d336 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	7959      	ldrb	r1, [r3, #5]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c2de:	b292      	uxth	r2, r2
 800c2e0:	9202      	str	r2, [sp, #8]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	9201      	str	r2, [sp, #4]
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f001 f822 	bl	800d336 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c2f2:	e175      	b.n	800c5e0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c2f4:	7bbb      	ldrb	r3, [r7, #14]
 800c2f6:	2b03      	cmp	r3, #3
 800c2f8:	f040 8172 	bne.w	800c5e0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c302:	3301      	adds	r3, #1
 800c304:	b2da      	uxtb	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c312:	2b03      	cmp	r3, #3
 800c314:	d903      	bls.n	800c31e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	220d      	movs	r2, #13
 800c31a:	701a      	strb	r2, [r3, #0]
      break;
 800c31c:	e160      	b.n	800c5e0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	795b      	ldrb	r3, [r3, #5]
 800c322:	4619      	mov	r1, r3
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f001 f857 	bl	800d3d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	791b      	ldrb	r3, [r3, #4]
 800c32e:	4619      	mov	r1, r3
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f001 f851 	bl	800d3d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	701a      	strb	r2, [r3, #0]
      break;
 800c33c:	e150      	b.n	800c5e0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c33e:	2112      	movs	r1, #18
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 f9f1 	bl	800c728 <USBH_Get_DevDesc>
 800c346:	4603      	mov	r3, r0
 800c348:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c34a:	7bbb      	ldrb	r3, [r7, #14]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d103      	bne.n	800c358 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2202      	movs	r2, #2
 800c354:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c356:	e145      	b.n	800c5e4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c358:	7bbb      	ldrb	r3, [r7, #14]
 800c35a:	2b03      	cmp	r3, #3
 800c35c:	f040 8142 	bne.w	800c5e4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c366:	3301      	adds	r3, #1
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c376:	2b03      	cmp	r3, #3
 800c378:	d903      	bls.n	800c382 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	220d      	movs	r2, #13
 800c37e:	701a      	strb	r2, [r3, #0]
      break;
 800c380:	e130      	b.n	800c5e4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	795b      	ldrb	r3, [r3, #5]
 800c386:	4619      	mov	r1, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f001 f825 	bl	800d3d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	791b      	ldrb	r3, [r3, #4]
 800c392:	4619      	mov	r1, r3
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f001 f81f 	bl	800d3d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	701a      	strb	r2, [r3, #0]
      break;
 800c3a6:	e11d      	b.n	800c5e4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 fa68 	bl	800c880 <USBH_SetAddress>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c3b4:	7bbb      	ldrb	r3, [r7, #14]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d132      	bne.n	800c420 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c3ba:	2002      	movs	r0, #2
 800c3bc:	f001 fb06 	bl	800d9cc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2203      	movs	r2, #3
 800c3cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	7919      	ldrb	r1, [r3, #4]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c3e2:	b292      	uxth	r2, r2
 800c3e4:	9202      	str	r2, [sp, #8]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	9201      	str	r2, [sp, #4]
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2280      	movs	r2, #128	; 0x80
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 ffa0 	bl	800d336 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	7959      	ldrb	r1, [r3, #5]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c40a:	b292      	uxth	r2, r2
 800c40c:	9202      	str	r2, [sp, #8]
 800c40e:	2200      	movs	r2, #0
 800c410:	9201      	str	r2, [sp, #4]
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	4603      	mov	r3, r0
 800c416:	2200      	movs	r2, #0
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 ff8c 	bl	800d336 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c41e:	e0e3      	b.n	800c5e8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c420:	7bbb      	ldrb	r3, [r7, #14]
 800c422:	2b03      	cmp	r3, #3
 800c424:	f040 80e0 	bne.w	800c5e8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	220d      	movs	r2, #13
 800c42c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	705a      	strb	r2, [r3, #1]
      break;
 800c434:	e0d8      	b.n	800c5e8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c436:	2109      	movs	r1, #9
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 f99d 	bl	800c778 <USBH_Get_CfgDesc>
 800c43e:	4603      	mov	r3, r0
 800c440:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c442:	7bbb      	ldrb	r3, [r7, #14]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d103      	bne.n	800c450 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2204      	movs	r2, #4
 800c44c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c44e:	e0cd      	b.n	800c5ec <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c450:	7bbb      	ldrb	r3, [r7, #14]
 800c452:	2b03      	cmp	r3, #3
 800c454:	f040 80ca 	bne.w	800c5ec <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c45e:	3301      	adds	r3, #1
 800c460:	b2da      	uxtb	r2, r3
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c46e:	2b03      	cmp	r3, #3
 800c470:	d903      	bls.n	800c47a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	220d      	movs	r2, #13
 800c476:	701a      	strb	r2, [r3, #0]
      break;
 800c478:	e0b8      	b.n	800c5ec <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	795b      	ldrb	r3, [r3, #5]
 800c47e:	4619      	mov	r1, r3
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 ffa9 	bl	800d3d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	791b      	ldrb	r3, [r3, #4]
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 ffa3 	bl	800d3d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	701a      	strb	r2, [r3, #0]
      break;
 800c49e:	e0a5      	b.n	800c5ec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 f965 	bl	800c778 <USBH_Get_CfgDesc>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c4b2:	7bbb      	ldrb	r3, [r7, #14]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d103      	bne.n	800c4c0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2205      	movs	r2, #5
 800c4bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c4be:	e097      	b.n	800c5f0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c4c0:	7bbb      	ldrb	r3, [r7, #14]
 800c4c2:	2b03      	cmp	r3, #3
 800c4c4:	f040 8094 	bne.w	800c5f0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	b2da      	uxtb	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c4de:	2b03      	cmp	r3, #3
 800c4e0:	d903      	bls.n	800c4ea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	220d      	movs	r2, #13
 800c4e6:	701a      	strb	r2, [r3, #0]
      break;
 800c4e8:	e082      	b.n	800c5f0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	795b      	ldrb	r3, [r3, #5]
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 ff71 	bl	800d3d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	791b      	ldrb	r3, [r3, #4]
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 ff6b 	bl	800d3d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	701a      	strb	r2, [r3, #0]
      break;
 800c50e:	e06f      	b.n	800c5f0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c516:	2b00      	cmp	r3, #0
 800c518:	d019      	beq.n	800c54e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c526:	23ff      	movs	r3, #255	; 0xff
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 f949 	bl	800c7c0 <USBH_Get_StringDesc>
 800c52e:	4603      	mov	r3, r0
 800c530:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c532:	7bbb      	ldrb	r3, [r7, #14]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d103      	bne.n	800c540 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2206      	movs	r2, #6
 800c53c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c53e:	e059      	b.n	800c5f4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c540:	7bbb      	ldrb	r3, [r7, #14]
 800c542:	2b03      	cmp	r3, #3
 800c544:	d156      	bne.n	800c5f4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2206      	movs	r2, #6
 800c54a:	705a      	strb	r2, [r3, #1]
      break;
 800c54c:	e052      	b.n	800c5f4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2206      	movs	r2, #6
 800c552:	705a      	strb	r2, [r3, #1]
      break;
 800c554:	e04e      	b.n	800c5f4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d019      	beq.n	800c594 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c56c:	23ff      	movs	r3, #255	; 0xff
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 f926 	bl	800c7c0 <USBH_Get_StringDesc>
 800c574:	4603      	mov	r3, r0
 800c576:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c578:	7bbb      	ldrb	r3, [r7, #14]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d103      	bne.n	800c586 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2207      	movs	r2, #7
 800c582:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c584:	e038      	b.n	800c5f8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c586:	7bbb      	ldrb	r3, [r7, #14]
 800c588:	2b03      	cmp	r3, #3
 800c58a:	d135      	bne.n	800c5f8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2207      	movs	r2, #7
 800c590:	705a      	strb	r2, [r3, #1]
      break;
 800c592:	e031      	b.n	800c5f8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2207      	movs	r2, #7
 800c598:	705a      	strb	r2, [r3, #1]
      break;
 800c59a:	e02d      	b.n	800c5f8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d017      	beq.n	800c5d6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c5b2:	23ff      	movs	r3, #255	; 0xff
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 f903 	bl	800c7c0 <USBH_Get_StringDesc>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c5be:	7bbb      	ldrb	r3, [r7, #14]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d102      	bne.n	800c5ca <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c5c8:	e018      	b.n	800c5fc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c5ca:	7bbb      	ldrb	r3, [r7, #14]
 800c5cc:	2b03      	cmp	r3, #3
 800c5ce:	d115      	bne.n	800c5fc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	73fb      	strb	r3, [r7, #15]
      break;
 800c5d4:	e012      	b.n	800c5fc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	73fb      	strb	r3, [r7, #15]
      break;
 800c5da:	e00f      	b.n	800c5fc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c5dc:	bf00      	nop
 800c5de:	e00e      	b.n	800c5fe <USBH_HandleEnum+0x3be>
      break;
 800c5e0:	bf00      	nop
 800c5e2:	e00c      	b.n	800c5fe <USBH_HandleEnum+0x3be>
      break;
 800c5e4:	bf00      	nop
 800c5e6:	e00a      	b.n	800c5fe <USBH_HandleEnum+0x3be>
      break;
 800c5e8:	bf00      	nop
 800c5ea:	e008      	b.n	800c5fe <USBH_HandleEnum+0x3be>
      break;
 800c5ec:	bf00      	nop
 800c5ee:	e006      	b.n	800c5fe <USBH_HandleEnum+0x3be>
      break;
 800c5f0:	bf00      	nop
 800c5f2:	e004      	b.n	800c5fe <USBH_HandleEnum+0x3be>
      break;
 800c5f4:	bf00      	nop
 800c5f6:	e002      	b.n	800c5fe <USBH_HandleEnum+0x3be>
      break;
 800c5f8:	bf00      	nop
 800c5fa:	e000      	b.n	800c5fe <USBH_HandleEnum+0x3be>
      break;
 800c5fc:	bf00      	nop
  }
  return Status;
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c600:	4618      	mov	r0, r3
 800c602:	3710      	adds	r7, #16
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	683a      	ldr	r2, [r7, #0]
 800c616:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 800c61a:	bf00      	nop
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b082      	sub	sp, #8
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800c634:	1c5a      	adds	r2, r3, #1
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 f804 	bl	800c64a <USBH_HandleSof>
}
 800c642:	bf00      	nop
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b082      	sub	sp, #8
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b0b      	cmp	r3, #11
 800c65a:	d10a      	bne.n	800c672 <USBH_HandleSof+0x28>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800c662:	2b00      	cmp	r3, #0
 800c664:	d005      	beq.n	800c672 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	4798      	blx	r3
  }
}
 800c672:	bf00      	nop
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c67a:	b480      	push	{r7}
 800c67c:	b083      	sub	sp, #12
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2201      	movs	r2, #1
 800c686:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c68a:	bf00      	nop
}
 800c68c:	370c      	adds	r7, #12
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr

0800c696 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c696:	b480      	push	{r7}
 800c698:	b083      	sub	sp, #12
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c6a6:	bf00      	nop
}
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c6b2:	b480      	push	{r7}
 800c6b4:	b083      	sub	sp, #12
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f001 f81a 	bl	800d73a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	791b      	ldrb	r3, [r3, #4]
 800c70a:	4619      	mov	r1, r3
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 fe63 	bl	800d3d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	795b      	ldrb	r3, [r3, #5]
 800c716:	4619      	mov	r1, r3
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fe5d 	bl	800d3d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b086      	sub	sp, #24
 800c72c:	af02      	add	r7, sp, #8
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	460b      	mov	r3, r1
 800c732:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c73a:	78fb      	ldrb	r3, [r7, #3]
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	4613      	mov	r3, r2
 800c742:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c746:	2100      	movs	r1, #0
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 f864 	bl	800c816 <USBH_GetDescriptor>
 800c74e:	4603      	mov	r3, r0
 800c750:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c752:	7bfb      	ldrb	r3, [r7, #15]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10a      	bne.n	800c76e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c764:	78fa      	ldrb	r2, [r7, #3]
 800c766:	b292      	uxth	r2, r2
 800c768:	4619      	mov	r1, r3
 800c76a:	f000 f918 	bl	800c99e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c770:	4618      	mov	r0, r3
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af02      	add	r7, sp, #8
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	331c      	adds	r3, #28
 800c788:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c78a:	887b      	ldrh	r3, [r7, #2]
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c794:	2100      	movs	r1, #0
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f83d 	bl	800c816 <USBH_GetDescriptor>
 800c79c:	4603      	mov	r3, r0
 800c79e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c7a0:	7bfb      	ldrb	r3, [r7, #15]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d107      	bne.n	800c7b6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c7a6:	887b      	ldrh	r3, [r7, #2]
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	68b9      	ldr	r1, [r7, #8]
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 f987 	bl	800cac0 <USBH_ParseCfgDesc>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3710      	adds	r7, #16
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b088      	sub	sp, #32
 800c7c4:	af02      	add	r7, sp, #8
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	607a      	str	r2, [r7, #4]
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	72fb      	strb	r3, [r7, #11]
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c7d4:	7afb      	ldrb	r3, [r7, #11]
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c7dc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c7e4:	893b      	ldrh	r3, [r7, #8]
 800c7e6:	9300      	str	r3, [sp, #0]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	f000 f812 	bl	800c816 <USBH_GetDescriptor>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c7f6:	7dfb      	ldrb	r3, [r7, #23]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d107      	bne.n	800c80c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c802:	893a      	ldrh	r2, [r7, #8]
 800c804:	6879      	ldr	r1, [r7, #4]
 800c806:	4618      	mov	r0, r3
 800c808:	f000 fb1a 	bl	800ce40 <USBH_ParseStringDesc>
  }

  return status;
 800c80c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3718      	adds	r7, #24
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b084      	sub	sp, #16
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	60f8      	str	r0, [r7, #12]
 800c81e:	607b      	str	r3, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	72fb      	strb	r3, [r7, #11]
 800c824:	4613      	mov	r3, r2
 800c826:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	789b      	ldrb	r3, [r3, #2]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d11c      	bne.n	800c86a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c830:	7afb      	ldrb	r3, [r7, #11]
 800c832:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c836:	b2da      	uxtb	r2, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2206      	movs	r2, #6
 800c840:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	893a      	ldrh	r2, [r7, #8]
 800c846:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c848:	893b      	ldrh	r3, [r7, #8]
 800c84a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c84e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c852:	d104      	bne.n	800c85e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f240 4209 	movw	r2, #1033	; 0x409
 800c85a:	829a      	strh	r2, [r3, #20]
 800c85c:	e002      	b.n	800c864 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2200      	movs	r2, #0
 800c862:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	8b3a      	ldrh	r2, [r7, #24]
 800c868:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c86a:	8b3b      	ldrh	r3, [r7, #24]
 800c86c:	461a      	mov	r2, r3
 800c86e:	6879      	ldr	r1, [r7, #4]
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f000 fb33 	bl	800cedc <USBH_CtlReq>
 800c876:	4603      	mov	r3, r0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	460b      	mov	r3, r1
 800c88a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	789b      	ldrb	r3, [r3, #2]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d10f      	bne.n	800c8b4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2205      	movs	r2, #5
 800c89e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c8a0:	78fb      	ldrb	r3, [r7, #3]
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fb0f 	bl	800cedc <USBH_CtlReq>
 800c8be:	4603      	mov	r3, r0
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	789b      	ldrb	r3, [r3, #2]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d10e      	bne.n	800c8fa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2209      	movs	r2, #9
 800c8e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	887a      	ldrh	r2, [r7, #2]
 800c8ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 faec 	bl	800cedc <USBH_CtlReq>
 800c904:	4603      	mov	r3, r0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b082      	sub	sp, #8
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
 800c916:	460b      	mov	r3, r1
 800c918:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	789b      	ldrb	r3, [r3, #2]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d10f      	bne.n	800c942 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2203      	movs	r2, #3
 800c92c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c92e:	78fb      	ldrb	r3, [r7, #3]
 800c930:	b29a      	uxth	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c942:	2200      	movs	r2, #0
 800c944:	2100      	movs	r1, #0
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 fac8 	bl	800cedc <USBH_CtlReq>
 800c94c:	4603      	mov	r3, r0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b082      	sub	sp, #8
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
 800c95e:	460b      	mov	r3, r1
 800c960:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	789b      	ldrb	r3, [r3, #2]
 800c966:	2b01      	cmp	r3, #1
 800c968:	d10f      	bne.n	800c98a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2202      	movs	r2, #2
 800c96e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c97c:	78fb      	ldrb	r3, [r7, #3]
 800c97e:	b29a      	uxth	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c98a:	2200      	movs	r2, #0
 800c98c:	2100      	movs	r1, #0
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 faa4 	bl	800cedc <USBH_CtlReq>
 800c994:	4603      	mov	r3, r0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3708      	adds	r7, #8
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c99e:	b480      	push	{r7}
 800c9a0:	b085      	sub	sp, #20
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	60f8      	str	r0, [r7, #12]
 800c9a6:	60b9      	str	r1, [r7, #8]
 800c9a8:	4613      	mov	r3, r2
 800c9aa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	781a      	ldrb	r2, [r3, #0]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	785a      	ldrb	r2, [r3, #1]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	3302      	adds	r3, #2
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	3303      	adds	r3, #3
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	021b      	lsls	r3, r3, #8
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	791a      	ldrb	r2, [r3, #4]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	795a      	ldrb	r2, [r3, #5]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	799a      	ldrb	r2, [r3, #6]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	79da      	ldrb	r2, [r3, #7]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	79db      	ldrb	r3, [r3, #7]
 800c9fc:	2b20      	cmp	r3, #32
 800c9fe:	dc11      	bgt.n	800ca24 <USBH_ParseDevDesc+0x86>
 800ca00:	2b08      	cmp	r3, #8
 800ca02:	db16      	blt.n	800ca32 <USBH_ParseDevDesc+0x94>
 800ca04:	3b08      	subs	r3, #8
 800ca06:	2201      	movs	r2, #1
 800ca08:	fa02 f303 	lsl.w	r3, r2, r3
 800ca0c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800ca10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	bf14      	ite	ne
 800ca18:	2301      	movne	r3, #1
 800ca1a:	2300      	moveq	r3, #0
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d102      	bne.n	800ca28 <USBH_ParseDevDesc+0x8a>
 800ca22:	e006      	b.n	800ca32 <USBH_ParseDevDesc+0x94>
 800ca24:	2b40      	cmp	r3, #64	; 0x40
 800ca26:	d104      	bne.n	800ca32 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	79da      	ldrb	r2, [r3, #7]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	71da      	strb	r2, [r3, #7]
      break;
 800ca30:	e003      	b.n	800ca3a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2240      	movs	r2, #64	; 0x40
 800ca36:	71da      	strb	r2, [r3, #7]
      break;
 800ca38:	bf00      	nop
  }

  if (length > 8U)
 800ca3a:	88fb      	ldrh	r3, [r7, #6]
 800ca3c:	2b08      	cmp	r3, #8
 800ca3e:	d939      	bls.n	800cab4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	3308      	adds	r3, #8
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	b29a      	uxth	r2, r3
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	3309      	adds	r3, #9
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	021b      	lsls	r3, r3, #8
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	4313      	orrs	r3, r2
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	330a      	adds	r3, #10
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	b29a      	uxth	r2, r3
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	330b      	adds	r3, #11
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	021b      	lsls	r3, r3, #8
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	4313      	orrs	r3, r2
 800ca72:	b29a      	uxth	r2, r3
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	330c      	adds	r3, #12
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	330d      	adds	r3, #13
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	021b      	lsls	r3, r3, #8
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	b29a      	uxth	r2, r3
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	7b9a      	ldrb	r2, [r3, #14]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	7bda      	ldrb	r2, [r3, #15]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	7c1a      	ldrb	r2, [r3, #16]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	7c5a      	ldrb	r2, [r3, #17]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	745a      	strb	r2, [r3, #17]
  }
}
 800cab4:	bf00      	nop
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b08c      	sub	sp, #48	; 0x30
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	4613      	mov	r3, r2
 800cacc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cad4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cae0:	2300      	movs	r3, #0
 800cae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800cae6:	2300      	movs	r3, #0
 800cae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	781a      	ldrb	r2, [r3, #0]
 800caf4:	6a3b      	ldr	r3, [r7, #32]
 800caf6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	785a      	ldrb	r2, [r3, #1]
 800cafc:	6a3b      	ldr	r3, [r7, #32]
 800cafe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	3302      	adds	r3, #2
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	3303      	adds	r3, #3
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	021b      	lsls	r3, r3, #8
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	4313      	orrs	r3, r2
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb1c:	bf28      	it	cs
 800cb1e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	6a3b      	ldr	r3, [r7, #32]
 800cb26:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	791a      	ldrb	r2, [r3, #4]
 800cb2c:	6a3b      	ldr	r3, [r7, #32]
 800cb2e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	795a      	ldrb	r2, [r3, #5]
 800cb34:	6a3b      	ldr	r3, [r7, #32]
 800cb36:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	799a      	ldrb	r2, [r3, #6]
 800cb3c:	6a3b      	ldr	r3, [r7, #32]
 800cb3e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	79da      	ldrb	r2, [r3, #7]
 800cb44:	6a3b      	ldr	r3, [r7, #32]
 800cb46:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	7a1a      	ldrb	r2, [r3, #8]
 800cb4c:	6a3b      	ldr	r3, [r7, #32]
 800cb4e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2b09      	cmp	r3, #9
 800cb56:	d002      	beq.n	800cb5e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800cb58:	6a3b      	ldr	r3, [r7, #32]
 800cb5a:	2209      	movs	r2, #9
 800cb5c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cb5e:	88fb      	ldrh	r3, [r7, #6]
 800cb60:	2b09      	cmp	r3, #9
 800cb62:	f240 8093 	bls.w	800cc8c <USBH_ParseCfgDesc+0x1cc>
  {
    ptr = USB_LEN_CFG_DESC;
 800cb66:	2309      	movs	r3, #9
 800cb68:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cb6e:	e077      	b.n	800cc60 <USBH_ParseCfgDesc+0x1a0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cb70:	f107 0316 	add.w	r3, r7, #22
 800cb74:	4619      	mov	r1, r3
 800cb76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb78:	f000 f995 	bl	800cea6 <USBH_GetNextDesc>
 800cb7c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb80:	785b      	ldrb	r3, [r3, #1]
 800cb82:	2b04      	cmp	r3, #4
 800cb84:	d16c      	bne.n	800cc60 <USBH_ParseCfgDesc+0x1a0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800cb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	2b09      	cmp	r3, #9
 800cb8c:	d002      	beq.n	800cb94 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800cb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb90:	2209      	movs	r2, #9
 800cb92:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800cb94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb98:	221a      	movs	r2, #26
 800cb9a:	fb02 f303 	mul.w	r3, r2, r3
 800cb9e:	3308      	adds	r3, #8
 800cba0:	6a3a      	ldr	r2, [r7, #32]
 800cba2:	4413      	add	r3, r2
 800cba4:	3302      	adds	r3, #2
 800cba6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbaa:	69f8      	ldr	r0, [r7, #28]
 800cbac:	f000 f874 	bl	800cc98 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cbba:	e039      	b.n	800cc30 <USBH_ParseCfgDesc+0x170>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cbbc:	f107 0316 	add.w	r3, r7, #22
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbc4:	f000 f96f 	bl	800cea6 <USBH_GetNextDesc>
 800cbc8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbcc:	785b      	ldrb	r3, [r3, #1]
 800cbce:	2b05      	cmp	r3, #5
 800cbd0:	d12e      	bne.n	800cc30 <USBH_ParseCfgDesc+0x170>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800cbd2:	69fb      	ldr	r3, [r7, #28]
 800cbd4:	795b      	ldrb	r3, [r3, #5]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d10e      	bne.n	800cbf8 <USBH_ParseCfgDesc+0x138>
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	799b      	ldrb	r3, [r3, #6]
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d10a      	bne.n	800cbf8 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	79db      	ldrb	r3, [r3, #7]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d106      	bne.n	800cbf8 <USBH_ParseCfgDesc+0x138>
 800cbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	2b09      	cmp	r3, #9
 800cbf0:	d002      	beq.n	800cbf8 <USBH_ParseCfgDesc+0x138>
              {
                pdesc->bLength = 0x09U;
 800cbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf4:	2209      	movs	r2, #9
 800cbf6:	701a      	strb	r2, [r3, #0]
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbfc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cc00:	3201      	adds	r2, #1
 800cc02:	00d2      	lsls	r2, r2, #3
 800cc04:	211a      	movs	r1, #26
 800cc06:	fb01 f303 	mul.w	r3, r1, r3
 800cc0a:	4413      	add	r3, r2
 800cc0c:	3308      	adds	r3, #8
 800cc0e:	6a3a      	ldr	r2, [r7, #32]
 800cc10:	4413      	add	r3, r2
 800cc12:	3304      	adds	r3, #4
 800cc14:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800cc16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc18:	69b9      	ldr	r1, [r7, #24]
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f000 f86b 	bl	800ccf6 <USBH_ParseEPDesc>
 800cc20:	4603      	mov	r3, r0
 800cc22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800cc26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	791b      	ldrb	r3, [r3, #4]
 800cc34:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d204      	bcs.n	800cc46 <USBH_ParseCfgDesc+0x186>
 800cc3c:	6a3b      	ldr	r3, [r7, #32]
 800cc3e:	885a      	ldrh	r2, [r3, #2]
 800cc40:	8afb      	ldrh	r3, [r7, #22]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d8ba      	bhi.n	800cbbc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	791b      	ldrb	r3, [r3, #4]
 800cc4a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d201      	bcs.n	800cc56 <USBH_ParseCfgDesc+0x196>
        {
          return USBH_NOT_SUPPORTED;
 800cc52:	2303      	movs	r3, #3
 800cc54:	e01c      	b.n	800cc90 <USBH_ParseCfgDesc+0x1d0>
        }

        if_ix++;
 800cc56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cc60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc64:	2b09      	cmp	r3, #9
 800cc66:	d805      	bhi.n	800cc74 <USBH_ParseCfgDesc+0x1b4>
 800cc68:	6a3b      	ldr	r3, [r7, #32]
 800cc6a:	885a      	ldrh	r2, [r3, #2]
 800cc6c:	8afb      	ldrh	r3, [r7, #22]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	f63f af7e 	bhi.w	800cb70 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800cc74:	6a3b      	ldr	r3, [r7, #32]
 800cc76:	791b      	ldrb	r3, [r3, #4]
 800cc78:	2b0a      	cmp	r3, #10
 800cc7a:	bf28      	it	cs
 800cc7c:	230a      	movcs	r3, #10
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d201      	bcs.n	800cc8c <USBH_ParseCfgDesc+0x1cc>
    {
      return USBH_NOT_SUPPORTED;
 800cc88:	2303      	movs	r3, #3
 800cc8a:	e001      	b.n	800cc90 <USBH_ParseCfgDesc+0x1d0>
    }
  }

  return status;
 800cc8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3730      	adds	r7, #48	; 0x30
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	781a      	ldrb	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	785a      	ldrb	r2, [r3, #1]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	789a      	ldrb	r2, [r3, #2]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	78da      	ldrb	r2, [r3, #3]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	791a      	ldrb	r2, [r3, #4]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	795a      	ldrb	r2, [r3, #5]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	799a      	ldrb	r2, [r3, #6]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	79da      	ldrb	r2, [r3, #7]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	7a1a      	ldrb	r2, [r3, #8]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	721a      	strb	r2, [r3, #8]
}
 800ccea:	bf00      	nop
 800ccec:	370c      	adds	r7, #12
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800ccf6:	b480      	push	{r7}
 800ccf8:	b087      	sub	sp, #28
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	60f8      	str	r0, [r7, #12]
 800ccfe:	60b9      	str	r1, [r7, #8]
 800cd00:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800cd02:	2300      	movs	r3, #0
 800cd04:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	781a      	ldrb	r2, [r3, #0]
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	785a      	ldrb	r2, [r3, #1]
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	789a      	ldrb	r2, [r3, #2]
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	78da      	ldrb	r2, [r3, #3]
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	3304      	adds	r3, #4
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	3305      	adds	r3, #5
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	021b      	lsls	r3, r3, #8
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	799a      	ldrb	r2, [r3, #6]
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	889b      	ldrh	r3, [r3, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d102      	bne.n	800cd58 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800cd52:	2303      	movs	r3, #3
 800cd54:	75fb      	strb	r3, [r7, #23]
 800cd56:	e033      	b.n	800cdc0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	889b      	ldrh	r3, [r3, #4]
 800cd5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cd60:	f023 0307 	bic.w	r3, r3, #7
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	889b      	ldrh	r3, [r3, #4]
 800cd6e:	b21a      	sxth	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	3304      	adds	r3, #4
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	b299      	uxth	r1, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	3305      	adds	r3, #5
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	021b      	lsls	r3, r3, #8
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	430b      	orrs	r3, r1
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d110      	bne.n	800cdb2 <USBH_ParseEPDesc+0xbc>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	3304      	adds	r3, #4
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	b299      	uxth	r1, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	3305      	adds	r3, #5
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	021b      	lsls	r3, r3, #8
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	430b      	orrs	r3, r1
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	b21b      	sxth	r3, r3
 800cdaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdae:	b21b      	sxth	r3, r3
 800cdb0:	e001      	b.n	800cdb6 <USBH_ParseEPDesc+0xc0>
 800cdb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	b21b      	sxth	r3, r3
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d116      	bne.n	800cdf8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	78db      	ldrb	r3, [r3, #3]
 800cdce:	f003 0303 	and.w	r3, r3, #3
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d005      	beq.n	800cde2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	78db      	ldrb	r3, [r3, #3]
 800cdda:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cdde:	2b03      	cmp	r3, #3
 800cde0:	d127      	bne.n	800ce32 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	799b      	ldrb	r3, [r3, #6]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d003      	beq.n	800cdf2 <USBH_ParseEPDesc+0xfc>
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	799b      	ldrb	r3, [r3, #6]
 800cdee:	2b10      	cmp	r3, #16
 800cdf0:	d91f      	bls.n	800ce32 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cdf2:	2303      	movs	r3, #3
 800cdf4:	75fb      	strb	r3, [r7, #23]
 800cdf6:	e01c      	b.n	800ce32 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	78db      	ldrb	r3, [r3, #3]
 800cdfc:	f003 0303 	and.w	r3, r3, #3
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d10a      	bne.n	800ce1a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	799b      	ldrb	r3, [r3, #6]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d003      	beq.n	800ce14 <USBH_ParseEPDesc+0x11e>
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	799b      	ldrb	r3, [r3, #6]
 800ce10:	2b10      	cmp	r3, #16
 800ce12:	d90e      	bls.n	800ce32 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ce14:	2303      	movs	r3, #3
 800ce16:	75fb      	strb	r3, [r7, #23]
 800ce18:	e00b      	b.n	800ce32 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	78db      	ldrb	r3, [r3, #3]
 800ce1e:	f003 0303 	and.w	r3, r3, #3
 800ce22:	2b03      	cmp	r3, #3
 800ce24:	d105      	bne.n	800ce32 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	799b      	ldrb	r3, [r3, #6]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d101      	bne.n	800ce32 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	371c      	adds	r7, #28
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b087      	sub	sp, #28
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3301      	adds	r3, #1
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2b03      	cmp	r3, #3
 800ce56:	d120      	bne.n	800ce9a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	1e9a      	subs	r2, r3, #2
 800ce5e:	88fb      	ldrh	r3, [r7, #6]
 800ce60:	4293      	cmp	r3, r2
 800ce62:	bf28      	it	cs
 800ce64:	4613      	movcs	r3, r2
 800ce66:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	3302      	adds	r3, #2
 800ce6c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ce6e:	2300      	movs	r3, #0
 800ce70:	82fb      	strh	r3, [r7, #22]
 800ce72:	e00b      	b.n	800ce8c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ce74:	8afb      	ldrh	r3, [r7, #22]
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	4413      	add	r3, r2
 800ce7a:	781a      	ldrb	r2, [r3, #0]
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	3301      	adds	r3, #1
 800ce84:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ce86:	8afb      	ldrh	r3, [r7, #22]
 800ce88:	3302      	adds	r3, #2
 800ce8a:	82fb      	strh	r3, [r7, #22]
 800ce8c:	8afa      	ldrh	r2, [r7, #22]
 800ce8e:	8abb      	ldrh	r3, [r7, #20]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d3ef      	bcc.n	800ce74 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	2200      	movs	r2, #0
 800ce98:	701a      	strb	r2, [r3, #0]
  }
}
 800ce9a:	bf00      	nop
 800ce9c:	371c      	adds	r7, #28
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr

0800cea6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cea6:	b480      	push	{r7}
 800cea8:	b085      	sub	sp, #20
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
 800ceae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	881a      	ldrh	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	4413      	add	r3, r2
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4413      	add	r3, r2
 800cecc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cece:	68fb      	ldr	r3, [r7, #12]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3714      	adds	r7, #20
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b086      	sub	sp, #24
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	4613      	mov	r3, r2
 800cee8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ceea:	2301      	movs	r3, #1
 800ceec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	789b      	ldrb	r3, [r3, #2]
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d002      	beq.n	800cefc <USBH_CtlReq+0x20>
 800cef6:	2b02      	cmp	r3, #2
 800cef8:	d00f      	beq.n	800cf1a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800cefa:	e027      	b.n	800cf4c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	88fa      	ldrh	r2, [r7, #6]
 800cf06:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2202      	movs	r2, #2
 800cf12:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cf14:	2301      	movs	r3, #1
 800cf16:	75fb      	strb	r3, [r7, #23]
      break;
 800cf18:	e018      	b.n	800cf4c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f000 f81c 	bl	800cf58 <USBH_HandleControl>
 800cf20:	4603      	mov	r3, r0
 800cf22:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cf24:	7dfb      	ldrb	r3, [r7, #23]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d002      	beq.n	800cf30 <USBH_CtlReq+0x54>
 800cf2a:	7dfb      	ldrb	r3, [r7, #23]
 800cf2c:	2b03      	cmp	r3, #3
 800cf2e:	d106      	bne.n	800cf3e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2201      	movs	r2, #1
 800cf34:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	761a      	strb	r2, [r3, #24]
      break;
 800cf3c:	e005      	b.n	800cf4a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800cf3e:	7dfb      	ldrb	r3, [r7, #23]
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d102      	bne.n	800cf4a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2201      	movs	r2, #1
 800cf48:	709a      	strb	r2, [r3, #2]
      break;
 800cf4a:	bf00      	nop
  }
  return status;
 800cf4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3718      	adds	r7, #24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
	...

0800cf58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af02      	add	r7, sp, #8
 800cf5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cf60:	2301      	movs	r3, #1
 800cf62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cf64:	2300      	movs	r3, #0
 800cf66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	7e1b      	ldrb	r3, [r3, #24]
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	2b0a      	cmp	r3, #10
 800cf70:	f200 8156 	bhi.w	800d220 <USBH_HandleControl+0x2c8>
 800cf74:	a201      	add	r2, pc, #4	; (adr r2, 800cf7c <USBH_HandleControl+0x24>)
 800cf76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf7a:	bf00      	nop
 800cf7c:	0800cfa9 	.word	0x0800cfa9
 800cf80:	0800cfc3 	.word	0x0800cfc3
 800cf84:	0800d02d 	.word	0x0800d02d
 800cf88:	0800d053 	.word	0x0800d053
 800cf8c:	0800d08b 	.word	0x0800d08b
 800cf90:	0800d0b5 	.word	0x0800d0b5
 800cf94:	0800d107 	.word	0x0800d107
 800cf98:	0800d129 	.word	0x0800d129
 800cf9c:	0800d165 	.word	0x0800d165
 800cfa0:	0800d18b 	.word	0x0800d18b
 800cfa4:	0800d1c9 	.word	0x0800d1c9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f103 0110 	add.w	r1, r3, #16
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	795b      	ldrb	r3, [r3, #5]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 f943 	bl	800d240 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2202      	movs	r2, #2
 800cfbe:	761a      	strb	r2, [r3, #24]
      break;
 800cfc0:	e139      	b.n	800d236 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	795b      	ldrb	r3, [r3, #5]
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 fca5 	bl	800d918 <USBH_LL_GetURBState>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cfd2:	7bbb      	ldrb	r3, [r7, #14]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d11e      	bne.n	800d016 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	7c1b      	ldrb	r3, [r3, #16]
 800cfdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cfe0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	8adb      	ldrh	r3, [r3, #22]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00a      	beq.n	800d000 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cfea:	7b7b      	ldrb	r3, [r7, #13]
 800cfec:	2b80      	cmp	r3, #128	; 0x80
 800cfee:	d103      	bne.n	800cff8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2203      	movs	r2, #3
 800cff4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cff6:	e115      	b.n	800d224 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2205      	movs	r2, #5
 800cffc:	761a      	strb	r2, [r3, #24]
      break;
 800cffe:	e111      	b.n	800d224 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d000:	7b7b      	ldrb	r3, [r7, #13]
 800d002:	2b80      	cmp	r3, #128	; 0x80
 800d004:	d103      	bne.n	800d00e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2209      	movs	r2, #9
 800d00a:	761a      	strb	r2, [r3, #24]
      break;
 800d00c:	e10a      	b.n	800d224 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2207      	movs	r2, #7
 800d012:	761a      	strb	r2, [r3, #24]
      break;
 800d014:	e106      	b.n	800d224 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d016:	7bbb      	ldrb	r3, [r7, #14]
 800d018:	2b04      	cmp	r3, #4
 800d01a:	d003      	beq.n	800d024 <USBH_HandleControl+0xcc>
 800d01c:	7bbb      	ldrb	r3, [r7, #14]
 800d01e:	2b02      	cmp	r3, #2
 800d020:	f040 8100 	bne.w	800d224 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	220b      	movs	r2, #11
 800d028:	761a      	strb	r2, [r3, #24]
      break;
 800d02a:	e0fb      	b.n	800d224 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800d032:	b29a      	uxth	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6899      	ldr	r1, [r3, #8]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	899a      	ldrh	r2, [r3, #12]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	791b      	ldrb	r3, [r3, #4]
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f93a 	bl	800d2be <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2204      	movs	r2, #4
 800d04e:	761a      	strb	r2, [r3, #24]
      break;
 800d050:	e0f1      	b.n	800d236 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	791b      	ldrb	r3, [r3, #4]
 800d056:	4619      	mov	r1, r3
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 fc5d 	bl	800d918 <USBH_LL_GetURBState>
 800d05e:	4603      	mov	r3, r0
 800d060:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d062:	7bbb      	ldrb	r3, [r7, #14]
 800d064:	2b01      	cmp	r3, #1
 800d066:	d102      	bne.n	800d06e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2209      	movs	r2, #9
 800d06c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d06e:	7bbb      	ldrb	r3, [r7, #14]
 800d070:	2b05      	cmp	r3, #5
 800d072:	d102      	bne.n	800d07a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d074:	2303      	movs	r3, #3
 800d076:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d078:	e0d6      	b.n	800d228 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d07a:	7bbb      	ldrb	r3, [r7, #14]
 800d07c:	2b04      	cmp	r3, #4
 800d07e:	f040 80d3 	bne.w	800d228 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	220b      	movs	r2, #11
 800d086:	761a      	strb	r2, [r3, #24]
      break;
 800d088:	e0ce      	b.n	800d228 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6899      	ldr	r1, [r3, #8]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	899a      	ldrh	r2, [r3, #12]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	795b      	ldrb	r3, [r3, #5]
 800d096:	2001      	movs	r0, #1
 800d098:	9000      	str	r0, [sp, #0]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f8ea 	bl	800d274 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2206      	movs	r2, #6
 800d0b0:	761a      	strb	r2, [r3, #24]
      break;
 800d0b2:	e0c0      	b.n	800d236 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	795b      	ldrb	r3, [r3, #5]
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 fc2c 	bl	800d918 <USBH_LL_GetURBState>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d0c4:	7bbb      	ldrb	r3, [r7, #14]
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d103      	bne.n	800d0d2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2207      	movs	r2, #7
 800d0ce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d0d0:	e0ac      	b.n	800d22c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d0d2:	7bbb      	ldrb	r3, [r7, #14]
 800d0d4:	2b05      	cmp	r3, #5
 800d0d6:	d105      	bne.n	800d0e4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	220c      	movs	r2, #12
 800d0dc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d0de:	2303      	movs	r3, #3
 800d0e0:	73fb      	strb	r3, [r7, #15]
      break;
 800d0e2:	e0a3      	b.n	800d22c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d0e4:	7bbb      	ldrb	r3, [r7, #14]
 800d0e6:	2b02      	cmp	r3, #2
 800d0e8:	d103      	bne.n	800d0f2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2205      	movs	r2, #5
 800d0ee:	761a      	strb	r2, [r3, #24]
      break;
 800d0f0:	e09c      	b.n	800d22c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d0f2:	7bbb      	ldrb	r3, [r7, #14]
 800d0f4:	2b04      	cmp	r3, #4
 800d0f6:	f040 8099 	bne.w	800d22c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	220b      	movs	r2, #11
 800d0fe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d100:	2302      	movs	r3, #2
 800d102:	73fb      	strb	r3, [r7, #15]
      break;
 800d104:	e092      	b.n	800d22c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	791b      	ldrb	r3, [r3, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	2100      	movs	r1, #0
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f8d5 	bl	800d2be <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2208      	movs	r2, #8
 800d124:	761a      	strb	r2, [r3, #24]

      break;
 800d126:	e086      	b.n	800d236 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	791b      	ldrb	r3, [r3, #4]
 800d12c:	4619      	mov	r1, r3
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 fbf2 	bl	800d918 <USBH_LL_GetURBState>
 800d134:	4603      	mov	r3, r0
 800d136:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d138:	7bbb      	ldrb	r3, [r7, #14]
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d105      	bne.n	800d14a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	220d      	movs	r2, #13
 800d142:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d144:	2300      	movs	r3, #0
 800d146:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d148:	e072      	b.n	800d230 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d14a:	7bbb      	ldrb	r3, [r7, #14]
 800d14c:	2b04      	cmp	r3, #4
 800d14e:	d103      	bne.n	800d158 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	220b      	movs	r2, #11
 800d154:	761a      	strb	r2, [r3, #24]
      break;
 800d156:	e06b      	b.n	800d230 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d158:	7bbb      	ldrb	r3, [r7, #14]
 800d15a:	2b05      	cmp	r3, #5
 800d15c:	d168      	bne.n	800d230 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d15e:	2303      	movs	r3, #3
 800d160:	73fb      	strb	r3, [r7, #15]
      break;
 800d162:	e065      	b.n	800d230 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	795b      	ldrb	r3, [r3, #5]
 800d168:	2201      	movs	r2, #1
 800d16a:	9200      	str	r2, [sp, #0]
 800d16c:	2200      	movs	r2, #0
 800d16e:	2100      	movs	r1, #0
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f87f 	bl	800d274 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	220a      	movs	r2, #10
 800d186:	761a      	strb	r2, [r3, #24]
      break;
 800d188:	e055      	b.n	800d236 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	795b      	ldrb	r3, [r3, #5]
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 fbc1 	bl	800d918 <USBH_LL_GetURBState>
 800d196:	4603      	mov	r3, r0
 800d198:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d19a:	7bbb      	ldrb	r3, [r7, #14]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d105      	bne.n	800d1ac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	220d      	movs	r2, #13
 800d1a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d1aa:	e043      	b.n	800d234 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d1ac:	7bbb      	ldrb	r3, [r7, #14]
 800d1ae:	2b02      	cmp	r3, #2
 800d1b0:	d103      	bne.n	800d1ba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2209      	movs	r2, #9
 800d1b6:	761a      	strb	r2, [r3, #24]
      break;
 800d1b8:	e03c      	b.n	800d234 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d1ba:	7bbb      	ldrb	r3, [r7, #14]
 800d1bc:	2b04      	cmp	r3, #4
 800d1be:	d139      	bne.n	800d234 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	220b      	movs	r2, #11
 800d1c4:	761a      	strb	r2, [r3, #24]
      break;
 800d1c6:	e035      	b.n	800d234 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	7e5b      	ldrb	r3, [r3, #25]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	b2da      	uxtb	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	765a      	strb	r2, [r3, #25]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	7e5b      	ldrb	r3, [r3, #25]
 800d1d8:	2b02      	cmp	r3, #2
 800d1da:	d806      	bhi.n	800d1ea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d1e8:	e025      	b.n	800d236 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800d1f0:	2106      	movs	r1, #6
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	795b      	ldrb	r3, [r3, #5]
 800d200:	4619      	mov	r1, r3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 f8e8 	bl	800d3d8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	791b      	ldrb	r3, [r3, #4]
 800d20c:	4619      	mov	r1, r3
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 f8e2 	bl	800d3d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d21a:	2302      	movs	r3, #2
 800d21c:	73fb      	strb	r3, [r7, #15]
      break;
 800d21e:	e00a      	b.n	800d236 <USBH_HandleControl+0x2de>

    default:
      break;
 800d220:	bf00      	nop
 800d222:	e008      	b.n	800d236 <USBH_HandleControl+0x2de>
      break;
 800d224:	bf00      	nop
 800d226:	e006      	b.n	800d236 <USBH_HandleControl+0x2de>
      break;
 800d228:	bf00      	nop
 800d22a:	e004      	b.n	800d236 <USBH_HandleControl+0x2de>
      break;
 800d22c:	bf00      	nop
 800d22e:	e002      	b.n	800d236 <USBH_HandleControl+0x2de>
      break;
 800d230:	bf00      	nop
 800d232:	e000      	b.n	800d236 <USBH_HandleControl+0x2de>
      break;
 800d234:	bf00      	nop
  }

  return status;
 800d236:	7bfb      	ldrb	r3, [r7, #15]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b088      	sub	sp, #32
 800d244:	af04      	add	r7, sp, #16
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	4613      	mov	r3, r2
 800d24c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d24e:	79f9      	ldrb	r1, [r7, #7]
 800d250:	2300      	movs	r3, #0
 800d252:	9303      	str	r3, [sp, #12]
 800d254:	2308      	movs	r3, #8
 800d256:	9302      	str	r3, [sp, #8]
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	9301      	str	r3, [sp, #4]
 800d25c:	2300      	movs	r3, #0
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	2300      	movs	r3, #0
 800d262:	2200      	movs	r2, #0
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f000 fb26 	bl	800d8b6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3710      	adds	r7, #16
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b088      	sub	sp, #32
 800d278:	af04      	add	r7, sp, #16
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	4611      	mov	r1, r2
 800d280:	461a      	mov	r2, r3
 800d282:	460b      	mov	r3, r1
 800d284:	80fb      	strh	r3, [r7, #6]
 800d286:	4613      	mov	r3, r2
 800d288:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d290:	2b00      	cmp	r3, #0
 800d292:	d001      	beq.n	800d298 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d294:	2300      	movs	r3, #0
 800d296:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d298:	7979      	ldrb	r1, [r7, #5]
 800d29a:	7e3b      	ldrb	r3, [r7, #24]
 800d29c:	9303      	str	r3, [sp, #12]
 800d29e:	88fb      	ldrh	r3, [r7, #6]
 800d2a0:	9302      	str	r3, [sp, #8]
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	9301      	str	r3, [sp, #4]
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f000 fb01 	bl	800d8b6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3710      	adds	r7, #16
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b088      	sub	sp, #32
 800d2c2:	af04      	add	r7, sp, #16
 800d2c4:	60f8      	str	r0, [r7, #12]
 800d2c6:	60b9      	str	r1, [r7, #8]
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	80fb      	strh	r3, [r7, #6]
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d2d4:	7979      	ldrb	r1, [r7, #5]
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	9303      	str	r3, [sp, #12]
 800d2da:	88fb      	ldrh	r3, [r7, #6]
 800d2dc:	9302      	str	r3, [sp, #8]
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	9301      	str	r3, [sp, #4]
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	f000 fae3 	bl	800d8b6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d2f0:	2300      	movs	r3, #0

}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b088      	sub	sp, #32
 800d2fe:	af04      	add	r7, sp, #16
 800d300:	60f8      	str	r0, [r7, #12]
 800d302:	60b9      	str	r1, [r7, #8]
 800d304:	4611      	mov	r1, r2
 800d306:	461a      	mov	r2, r3
 800d308:	460b      	mov	r3, r1
 800d30a:	80fb      	strh	r3, [r7, #6]
 800d30c:	4613      	mov	r3, r2
 800d30e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d310:	7979      	ldrb	r1, [r7, #5]
 800d312:	2300      	movs	r3, #0
 800d314:	9303      	str	r3, [sp, #12]
 800d316:	88fb      	ldrh	r3, [r7, #6]
 800d318:	9302      	str	r3, [sp, #8]
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	9301      	str	r3, [sp, #4]
 800d31e:	2301      	movs	r3, #1
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	2302      	movs	r3, #2
 800d324:	2201      	movs	r2, #1
 800d326:	68f8      	ldr	r0, [r7, #12]
 800d328:	f000 fac5 	bl	800d8b6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3710      	adds	r7, #16
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b086      	sub	sp, #24
 800d33a:	af04      	add	r7, sp, #16
 800d33c:	6078      	str	r0, [r7, #4]
 800d33e:	4608      	mov	r0, r1
 800d340:	4611      	mov	r1, r2
 800d342:	461a      	mov	r2, r3
 800d344:	4603      	mov	r3, r0
 800d346:	70fb      	strb	r3, [r7, #3]
 800d348:	460b      	mov	r3, r1
 800d34a:	70bb      	strb	r3, [r7, #2]
 800d34c:	4613      	mov	r3, r2
 800d34e:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d350:	7878      	ldrb	r0, [r7, #1]
 800d352:	78ba      	ldrb	r2, [r7, #2]
 800d354:	78f9      	ldrb	r1, [r7, #3]
 800d356:	8b3b      	ldrh	r3, [r7, #24]
 800d358:	9302      	str	r3, [sp, #8]
 800d35a:	7d3b      	ldrb	r3, [r7, #20]
 800d35c:	9301      	str	r3, [sp, #4]
 800d35e:	7c3b      	ldrb	r3, [r7, #16]
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	4603      	mov	r3, r0
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 fa58 	bl	800d81a <USBH_LL_OpenPipe>

  return USBH_OK;
 800d36a:	2300      	movs	r3, #0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	460b      	mov	r3, r1
 800d37e:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d380:	78fb      	ldrb	r3, [r7, #3]
 800d382:	4619      	mov	r1, r3
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fa77 	bl	800d878 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d38a:	2300      	movs	r3, #0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	460b      	mov	r3, r1
 800d39e:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 f839 	bl	800d418 <USBH_GetFreePipe>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d3aa:	89fb      	ldrh	r3, [r7, #14]
 800d3ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d00b      	beq.n	800d3cc <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d3b4:	78fa      	ldrb	r2, [r7, #3]
 800d3b6:	89fb      	ldrh	r3, [r7, #14]
 800d3b8:	f003 030f 	and.w	r3, r3, #15
 800d3bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3c0:	6879      	ldr	r1, [r7, #4]
 800d3c2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	440b      	add	r3, r1
 800d3ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d3cc:	89fb      	ldrh	r3, [r7, #14]
 800d3ce:	b2db      	uxtb	r3, r3
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d3e4:	78fb      	ldrb	r3, [r7, #3]
 800d3e6:	2b0f      	cmp	r3, #15
 800d3e8:	d80f      	bhi.n	800d40a <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d3ea:	78fb      	ldrb	r3, [r7, #3]
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	4413      	add	r3, r2
 800d3f6:	685a      	ldr	r2, [r3, #4]
 800d3f8:	78fb      	ldrb	r3, [r7, #3]
 800d3fa:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d3fe:	6879      	ldr	r1, [r7, #4]
 800d400:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800d404:	009b      	lsls	r3, r3, #2
 800d406:	440b      	add	r3, r1
 800d408:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	370c      	adds	r7, #12
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d420:	2300      	movs	r3, #0
 800d422:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d424:	2300      	movs	r3, #0
 800d426:	73fb      	strb	r3, [r7, #15]
 800d428:	e010      	b.n	800d44c <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4413      	add	r3, r2
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d102      	bne.n	800d446 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800d440:	7bfb      	ldrb	r3, [r7, #15]
 800d442:	b29b      	uxth	r3, r3
 800d444:	e007      	b.n	800d456 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d446:	7bfb      	ldrb	r3, [r7, #15]
 800d448:	3301      	adds	r3, #1
 800d44a:	73fb      	strb	r3, [r7, #15]
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
 800d44e:	2b0f      	cmp	r3, #15
 800d450:	d9eb      	bls.n	800d42a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d452:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d456:	4618      	mov	r0, r3
 800d458:	3714      	adds	r7, #20
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
	...

0800d464 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d468:	2201      	movs	r2, #1
 800d46a:	490e      	ldr	r1, [pc, #56]	; (800d4a4 <MX_USB_HOST_Init+0x40>)
 800d46c:	480e      	ldr	r0, [pc, #56]	; (800d4a8 <MX_USB_HOST_Init+0x44>)
 800d46e:	f7fe fbcd 	bl	800bc0c <USBH_Init>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d001      	beq.n	800d47c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d478:	f7f5 f824 	bl	80024c4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 800d47c:	490b      	ldr	r1, [pc, #44]	; (800d4ac <MX_USB_HOST_Init+0x48>)
 800d47e:	480a      	ldr	r0, [pc, #40]	; (800d4a8 <MX_USB_HOST_Init+0x44>)
 800d480:	f7fe fc53 	bl	800bd2a <USBH_RegisterClass>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d001      	beq.n	800d48e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d48a:	f7f5 f81b 	bl	80024c4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d48e:	4806      	ldr	r0, [pc, #24]	; (800d4a8 <MX_USB_HOST_Init+0x44>)
 800d490:	f7fe fcd8 	bl	800be44 <USBH_Start>
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d001      	beq.n	800d49e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d49a:	f7f5 f813 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d49e:	bf00      	nop
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	0800d4c5 	.word	0x0800d4c5
 800d4a8:	20010dcc 	.word	0x20010dcc
 800d4ac:	20000008 	.word	0x20000008

0800d4b0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d4b4:	4802      	ldr	r0, [pc, #8]	; (800d4c0 <MX_USB_HOST_Process+0x10>)
 800d4b6:	f7fe fcd5 	bl	800be64 <USBH_Process>
}
 800d4ba:	bf00      	nop
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	20010dcc 	.word	0x20010dcc

0800d4c4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d4d0:	78fb      	ldrb	r3, [r7, #3]
 800d4d2:	3b01      	subs	r3, #1
 800d4d4:	2b04      	cmp	r3, #4
 800d4d6:	d819      	bhi.n	800d50c <USBH_UserProcess+0x48>
 800d4d8:	a201      	add	r2, pc, #4	; (adr r2, 800d4e0 <USBH_UserProcess+0x1c>)
 800d4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4de:	bf00      	nop
 800d4e0:	0800d50d 	.word	0x0800d50d
 800d4e4:	0800d4fd 	.word	0x0800d4fd
 800d4e8:	0800d50d 	.word	0x0800d50d
 800d4ec:	0800d505 	.word	0x0800d505
 800d4f0:	0800d4f5 	.word	0x0800d4f5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d4f4:	4b09      	ldr	r3, [pc, #36]	; (800d51c <USBH_UserProcess+0x58>)
 800d4f6:	2203      	movs	r2, #3
 800d4f8:	701a      	strb	r2, [r3, #0]
  break;
 800d4fa:	e008      	b.n	800d50e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d4fc:	4b07      	ldr	r3, [pc, #28]	; (800d51c <USBH_UserProcess+0x58>)
 800d4fe:	2202      	movs	r2, #2
 800d500:	701a      	strb	r2, [r3, #0]
  break;
 800d502:	e004      	b.n	800d50e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d504:	4b05      	ldr	r3, [pc, #20]	; (800d51c <USBH_UserProcess+0x58>)
 800d506:	2201      	movs	r2, #1
 800d508:	701a      	strb	r2, [r3, #0]
  break;
 800d50a:	e000      	b.n	800d50e <USBH_UserProcess+0x4a>

  default:
  break;
 800d50c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d50e:	bf00      	nop
 800d510:	370c      	adds	r7, #12
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	20011274 	.word	0x20011274

0800d520 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b08a      	sub	sp, #40	; 0x28
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d528:	f107 0314 	add.w	r3, r7, #20
 800d52c:	2200      	movs	r2, #0
 800d52e:	601a      	str	r2, [r3, #0]
 800d530:	605a      	str	r2, [r3, #4]
 800d532:	609a      	str	r2, [r3, #8]
 800d534:	60da      	str	r2, [r3, #12]
 800d536:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d540:	d147      	bne.n	800d5d2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d542:	2300      	movs	r3, #0
 800d544:	613b      	str	r3, [r7, #16]
 800d546:	4b25      	ldr	r3, [pc, #148]	; (800d5dc <HAL_HCD_MspInit+0xbc>)
 800d548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d54a:	4a24      	ldr	r2, [pc, #144]	; (800d5dc <HAL_HCD_MspInit+0xbc>)
 800d54c:	f043 0301 	orr.w	r3, r3, #1
 800d550:	6313      	str	r3, [r2, #48]	; 0x30
 800d552:	4b22      	ldr	r3, [pc, #136]	; (800d5dc <HAL_HCD_MspInit+0xbc>)
 800d554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d556:	f003 0301 	and.w	r3, r3, #1
 800d55a:	613b      	str	r3, [r7, #16]
 800d55c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d55e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d564:	2300      	movs	r3, #0
 800d566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d568:	2300      	movs	r3, #0
 800d56a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d56c:	f107 0314 	add.w	r3, r7, #20
 800d570:	4619      	mov	r1, r3
 800d572:	481b      	ldr	r0, [pc, #108]	; (800d5e0 <HAL_HCD_MspInit+0xc0>)
 800d574:	f7f8 fcf4 	bl	8005f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d578:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d57c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d57e:	2302      	movs	r3, #2
 800d580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d582:	2300      	movs	r3, #0
 800d584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d586:	2300      	movs	r3, #0
 800d588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d58a:	230a      	movs	r3, #10
 800d58c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d58e:	f107 0314 	add.w	r3, r7, #20
 800d592:	4619      	mov	r1, r3
 800d594:	4812      	ldr	r0, [pc, #72]	; (800d5e0 <HAL_HCD_MspInit+0xc0>)
 800d596:	f7f8 fce3 	bl	8005f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d59a:	4b10      	ldr	r3, [pc, #64]	; (800d5dc <HAL_HCD_MspInit+0xbc>)
 800d59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59e:	4a0f      	ldr	r2, [pc, #60]	; (800d5dc <HAL_HCD_MspInit+0xbc>)
 800d5a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5a4:	6353      	str	r3, [r2, #52]	; 0x34
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	60fb      	str	r3, [r7, #12]
 800d5aa:	4b0c      	ldr	r3, [pc, #48]	; (800d5dc <HAL_HCD_MspInit+0xbc>)
 800d5ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ae:	4a0b      	ldr	r2, [pc, #44]	; (800d5dc <HAL_HCD_MspInit+0xbc>)
 800d5b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5b4:	6453      	str	r3, [r2, #68]	; 0x44
 800d5b6:	4b09      	ldr	r3, [pc, #36]	; (800d5dc <HAL_HCD_MspInit+0xbc>)
 800d5b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5be:	60fb      	str	r3, [r7, #12]
 800d5c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	2100      	movs	r1, #0
 800d5c6:	2043      	movs	r0, #67	; 0x43
 800d5c8:	f7f8 f923 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d5cc:	2043      	movs	r0, #67	; 0x43
 800d5ce:	f7f8 f93c 	bl	800584a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d5d2:	bf00      	nop
 800d5d4:	3728      	adds	r7, #40	; 0x28
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	40023800 	.word	0x40023800
 800d5e0:	40020000 	.word	0x40020000

0800d5e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7ff f817 	bl	800c626 <USBH_LL_IncTimer>
}
 800d5f8:	bf00      	nop
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d60e:	4618      	mov	r0, r3
 800d610:	f7ff f84f 	bl	800c6b2 <USBH_LL_Connect>
}
 800d614:	bf00      	nop
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7ff f858 	bl	800c6e0 <USBH_LL_Disconnect>
}
 800d630:	bf00      	nop
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	460b      	mov	r3, r1
 800d642:	70fb      	strb	r3, [r7, #3]
 800d644:	4613      	mov	r3, r2
 800d646:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d648:	bf00      	nop
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d662:	4618      	mov	r0, r3
 800d664:	f7ff f809 	bl	800c67a <USBH_LL_PortEnabled>
}
 800d668:	bf00      	nop
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d67e:	4618      	mov	r0, r3
 800d680:	f7ff f809 	bl	800c696 <USBH_LL_PortDisabled>
}
 800d684:	bf00      	nop
 800d686:	3708      	adds	r7, #8
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d12a      	bne.n	800d6f4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d69e:	4a18      	ldr	r2, [pc, #96]	; (800d700 <USBH_LL_Init+0x74>)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4a15      	ldr	r2, [pc, #84]	; (800d700 <USBH_LL_Init+0x74>)
 800d6aa:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d6ae:	4b14      	ldr	r3, [pc, #80]	; (800d700 <USBH_LL_Init+0x74>)
 800d6b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d6b4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d6b6:	4b12      	ldr	r3, [pc, #72]	; (800d700 <USBH_LL_Init+0x74>)
 800d6b8:	2208      	movs	r2, #8
 800d6ba:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d6bc:	4b10      	ldr	r3, [pc, #64]	; (800d700 <USBH_LL_Init+0x74>)
 800d6be:	2201      	movs	r2, #1
 800d6c0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d6c2:	4b0f      	ldr	r3, [pc, #60]	; (800d700 <USBH_LL_Init+0x74>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d6c8:	4b0d      	ldr	r3, [pc, #52]	; (800d700 <USBH_LL_Init+0x74>)
 800d6ca:	2202      	movs	r2, #2
 800d6cc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d6ce:	4b0c      	ldr	r3, [pc, #48]	; (800d700 <USBH_LL_Init+0x74>)
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d6d4:	480a      	ldr	r0, [pc, #40]	; (800d700 <USBH_LL_Init+0x74>)
 800d6d6:	f7f8 fe2b 	bl	8006330 <HAL_HCD_Init>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d001      	beq.n	800d6e4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d6e0:	f7f4 fef0 	bl	80024c4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d6e4:	4806      	ldr	r0, [pc, #24]	; (800d700 <USBH_LL_Init+0x74>)
 800d6e6:	f7f9 fa0e 	bl	8006b06 <HAL_HCD_GetCurrentFrame>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7fe ff8a 	bl	800c608 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d6f4:	2300      	movs	r3, #0
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	20011278 	.word	0x20011278

0800d704 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d70c:	2300      	movs	r3, #0
 800d70e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d710:	2300      	movs	r3, #0
 800d712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7f9 f97d 	bl	8006a1a <HAL_HCD_Start>
 800d720:	4603      	mov	r3, r0
 800d722:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d724:	7bfb      	ldrb	r3, [r7, #15]
 800d726:	4618      	mov	r0, r3
 800d728:	f000 f95c 	bl	800d9e4 <USBH_Get_USB_Status>
 800d72c:	4603      	mov	r3, r0
 800d72e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d730:	7bbb      	ldrb	r3, [r7, #14]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b084      	sub	sp, #16
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d742:	2300      	movs	r3, #0
 800d744:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d746:	2300      	movs	r3, #0
 800d748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d750:	4618      	mov	r0, r3
 800d752:	f7f9 f985 	bl	8006a60 <HAL_HCD_Stop>
 800d756:	4603      	mov	r3, r0
 800d758:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d75a:	7bfb      	ldrb	r3, [r7, #15]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f000 f941 	bl	800d9e4 <USBH_Get_USB_Status>
 800d762:	4603      	mov	r3, r0
 800d764:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d766:	7bbb      	ldrb	r3, [r7, #14]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3710      	adds	r7, #16
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d778:	2301      	movs	r3, #1
 800d77a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d782:	4618      	mov	r0, r3
 800d784:	f7f9 f9cd 	bl	8006b22 <HAL_HCD_GetCurrentSpeed>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b02      	cmp	r3, #2
 800d78c:	d00c      	beq.n	800d7a8 <USBH_LL_GetSpeed+0x38>
 800d78e:	2b02      	cmp	r3, #2
 800d790:	d80d      	bhi.n	800d7ae <USBH_LL_GetSpeed+0x3e>
 800d792:	2b00      	cmp	r3, #0
 800d794:	d002      	beq.n	800d79c <USBH_LL_GetSpeed+0x2c>
 800d796:	2b01      	cmp	r3, #1
 800d798:	d003      	beq.n	800d7a2 <USBH_LL_GetSpeed+0x32>
 800d79a:	e008      	b.n	800d7ae <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d79c:	2300      	movs	r3, #0
 800d79e:	73fb      	strb	r3, [r7, #15]
    break;
 800d7a0:	e008      	b.n	800d7b4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d7a6:	e005      	b.n	800d7b4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d7a8:	2302      	movs	r3, #2
 800d7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ac:	e002      	b.n	800d7b4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800d7b2:	bf00      	nop
  }
  return  speed;
 800d7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b084      	sub	sp, #16
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7f9 f960 	bl	8006a9a <HAL_HCD_ResetPort>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d7de:	7bfb      	ldrb	r3, [r7, #15]
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f000 f8ff 	bl	800d9e4 <USBH_Get_USB_Status>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3710      	adds	r7, #16
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d806:	78fa      	ldrb	r2, [r7, #3]
 800d808:	4611      	mov	r1, r2
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7f9 f967 	bl	8006ade <HAL_HCD_HC_GetXferCount>
 800d810:	4603      	mov	r3, r0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3708      	adds	r7, #8
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d81a:	b590      	push	{r4, r7, lr}
 800d81c:	b089      	sub	sp, #36	; 0x24
 800d81e:	af04      	add	r7, sp, #16
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	4608      	mov	r0, r1
 800d824:	4611      	mov	r1, r2
 800d826:	461a      	mov	r2, r3
 800d828:	4603      	mov	r3, r0
 800d82a:	70fb      	strb	r3, [r7, #3]
 800d82c:	460b      	mov	r3, r1
 800d82e:	70bb      	strb	r3, [r7, #2]
 800d830:	4613      	mov	r3, r2
 800d832:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d834:	2300      	movs	r3, #0
 800d836:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d838:	2300      	movs	r3, #0
 800d83a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800d842:	787c      	ldrb	r4, [r7, #1]
 800d844:	78ba      	ldrb	r2, [r7, #2]
 800d846:	78f9      	ldrb	r1, [r7, #3]
 800d848:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d84a:	9302      	str	r3, [sp, #8]
 800d84c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d850:	9301      	str	r3, [sp, #4]
 800d852:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d856:	9300      	str	r3, [sp, #0]
 800d858:	4623      	mov	r3, r4
 800d85a:	f7f8 fdcb 	bl	80063f4 <HAL_HCD_HC_Init>
 800d85e:	4603      	mov	r3, r0
 800d860:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d862:	7bfb      	ldrb	r3, [r7, #15]
 800d864:	4618      	mov	r0, r3
 800d866:	f000 f8bd 	bl	800d9e4 <USBH_Get_USB_Status>
 800d86a:	4603      	mov	r3, r0
 800d86c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d86e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d870:	4618      	mov	r0, r3
 800d872:	3714      	adds	r7, #20
 800d874:	46bd      	mov	sp, r7
 800d876:	bd90      	pop	{r4, r7, pc}

0800d878 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	460b      	mov	r3, r1
 800d882:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d884:	2300      	movs	r3, #0
 800d886:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d888:	2300      	movs	r3, #0
 800d88a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d892:	78fa      	ldrb	r2, [r7, #3]
 800d894:	4611      	mov	r1, r2
 800d896:	4618      	mov	r0, r3
 800d898:	f7f8 fe3b 	bl	8006512 <HAL_HCD_HC_Halt>
 800d89c:	4603      	mov	r3, r0
 800d89e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d8a0:	7bfb      	ldrb	r3, [r7, #15]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f000 f89e 	bl	800d9e4 <USBH_Get_USB_Status>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3710      	adds	r7, #16
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}

0800d8b6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d8b6:	b590      	push	{r4, r7, lr}
 800d8b8:	b089      	sub	sp, #36	; 0x24
 800d8ba:	af04      	add	r7, sp, #16
 800d8bc:	6078      	str	r0, [r7, #4]
 800d8be:	4608      	mov	r0, r1
 800d8c0:	4611      	mov	r1, r2
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	70fb      	strb	r3, [r7, #3]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	70bb      	strb	r3, [r7, #2]
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800d8de:	787c      	ldrb	r4, [r7, #1]
 800d8e0:	78ba      	ldrb	r2, [r7, #2]
 800d8e2:	78f9      	ldrb	r1, [r7, #3]
 800d8e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d8e8:	9303      	str	r3, [sp, #12]
 800d8ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d8ec:	9302      	str	r3, [sp, #8]
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f0:	9301      	str	r3, [sp, #4]
 800d8f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8f6:	9300      	str	r3, [sp, #0]
 800d8f8:	4623      	mov	r3, r4
 800d8fa:	f7f8 fe2d 	bl	8006558 <HAL_HCD_HC_SubmitRequest>
 800d8fe:	4603      	mov	r3, r0
 800d900:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d902:	7bfb      	ldrb	r3, [r7, #15]
 800d904:	4618      	mov	r0, r3
 800d906:	f000 f86d 	bl	800d9e4 <USBH_Get_USB_Status>
 800d90a:	4603      	mov	r3, r0
 800d90c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d90e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3714      	adds	r7, #20
 800d914:	46bd      	mov	sp, r7
 800d916:	bd90      	pop	{r4, r7, pc}

0800d918 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	460b      	mov	r3, r1
 800d922:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d92a:	78fa      	ldrb	r2, [r7, #3]
 800d92c:	4611      	mov	r1, r2
 800d92e:	4618      	mov	r0, r3
 800d930:	f7f9 f8c1 	bl	8006ab6 <HAL_HCD_HC_GetURBState>
 800d934:	4603      	mov	r3, r0
}
 800d936:	4618      	mov	r0, r3
 800d938:	3708      	adds	r7, #8
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}

0800d93e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d93e:	b580      	push	{r7, lr}
 800d940:	b082      	sub	sp, #8
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
 800d946:	460b      	mov	r3, r1
 800d948:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800d950:	2b01      	cmp	r3, #1
 800d952:	d103      	bne.n	800d95c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d954:	78fb      	ldrb	r3, [r7, #3]
 800d956:	4618      	mov	r0, r3
 800d958:	f000 f870 	bl	800da3c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d95c:	20c8      	movs	r0, #200	; 0xc8
 800d95e:	f7f7 f937 	bl	8004bd0 <HAL_Delay>
  return USBH_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	460b      	mov	r3, r1
 800d976:	70fb      	strb	r3, [r7, #3]
 800d978:	4613      	mov	r3, r2
 800d97a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d982:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d984:	78fb      	ldrb	r3, [r7, #3]
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	212c      	movs	r1, #44	; 0x2c
 800d98a:	fb01 f303 	mul.w	r3, r1, r3
 800d98e:	4413      	add	r3, r2
 800d990:	333b      	adds	r3, #59	; 0x3b
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d009      	beq.n	800d9ac <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d998:	78fb      	ldrb	r3, [r7, #3]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	212c      	movs	r1, #44	; 0x2c
 800d99e:	fb01 f303 	mul.w	r3, r1, r3
 800d9a2:	4413      	add	r3, r2
 800d9a4:	3354      	adds	r3, #84	; 0x54
 800d9a6:	78ba      	ldrb	r2, [r7, #2]
 800d9a8:	701a      	strb	r2, [r3, #0]
 800d9aa:	e008      	b.n	800d9be <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d9ac:	78fb      	ldrb	r3, [r7, #3]
 800d9ae:	68fa      	ldr	r2, [r7, #12]
 800d9b0:	212c      	movs	r1, #44	; 0x2c
 800d9b2:	fb01 f303 	mul.w	r3, r1, r3
 800d9b6:	4413      	add	r3, r2
 800d9b8:	3355      	adds	r3, #85	; 0x55
 800d9ba:	78ba      	ldrb	r2, [r7, #2]
 800d9bc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3714      	adds	r7, #20
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7f7 f8fb 	bl	8004bd0 <HAL_Delay>
}
 800d9da:	bf00      	nop
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
	...

0800d9e4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b085      	sub	sp, #20
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d9f2:	79fb      	ldrb	r3, [r7, #7]
 800d9f4:	2b03      	cmp	r3, #3
 800d9f6:	d817      	bhi.n	800da28 <USBH_Get_USB_Status+0x44>
 800d9f8:	a201      	add	r2, pc, #4	; (adr r2, 800da00 <USBH_Get_USB_Status+0x1c>)
 800d9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9fe:	bf00      	nop
 800da00:	0800da11 	.word	0x0800da11
 800da04:	0800da17 	.word	0x0800da17
 800da08:	0800da1d 	.word	0x0800da1d
 800da0c:	0800da23 	.word	0x0800da23
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	73fb      	strb	r3, [r7, #15]
    break;
 800da14:	e00b      	b.n	800da2e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800da16:	2302      	movs	r3, #2
 800da18:	73fb      	strb	r3, [r7, #15]
    break;
 800da1a:	e008      	b.n	800da2e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800da1c:	2301      	movs	r3, #1
 800da1e:	73fb      	strb	r3, [r7, #15]
    break;
 800da20:	e005      	b.n	800da2e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800da22:	2302      	movs	r3, #2
 800da24:	73fb      	strb	r3, [r7, #15]
    break;
 800da26:	e002      	b.n	800da2e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800da28:	2302      	movs	r3, #2
 800da2a:	73fb      	strb	r3, [r7, #15]
    break;
 800da2c:	bf00      	nop
  }
  return usb_status;
 800da2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da30:	4618      	mov	r0, r3
 800da32:	3714      	adds	r7, #20
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	4603      	mov	r3, r0
 800da44:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800da46:	79fb      	ldrb	r3, [r7, #7]
 800da48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800da4a:	79fb      	ldrb	r3, [r7, #7]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d102      	bne.n	800da56 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800da50:	2300      	movs	r3, #0
 800da52:	73fb      	strb	r3, [r7, #15]
 800da54:	e001      	b.n	800da5a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800da56:	2301      	movs	r3, #1
 800da58:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800da5a:	7bfb      	ldrb	r3, [r7, #15]
 800da5c:	461a      	mov	r2, r3
 800da5e:	2101      	movs	r1, #1
 800da60:	4803      	ldr	r0, [pc, #12]	; (800da70 <MX_DriverVbusFS+0x34>)
 800da62:	f7f8 fc19 	bl	8006298 <HAL_GPIO_WritePin>
}
 800da66:	bf00      	nop
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	40020800 	.word	0x40020800

0800da74 <__errno>:
 800da74:	4b01      	ldr	r3, [pc, #4]	; (800da7c <__errno+0x8>)
 800da76:	6818      	ldr	r0, [r3, #0]
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	2000005c 	.word	0x2000005c

0800da80 <__libc_init_array>:
 800da80:	b570      	push	{r4, r5, r6, lr}
 800da82:	4d0d      	ldr	r5, [pc, #52]	; (800dab8 <__libc_init_array+0x38>)
 800da84:	4c0d      	ldr	r4, [pc, #52]	; (800dabc <__libc_init_array+0x3c>)
 800da86:	1b64      	subs	r4, r4, r5
 800da88:	10a4      	asrs	r4, r4, #2
 800da8a:	2600      	movs	r6, #0
 800da8c:	42a6      	cmp	r6, r4
 800da8e:	d109      	bne.n	800daa4 <__libc_init_array+0x24>
 800da90:	4d0b      	ldr	r5, [pc, #44]	; (800dac0 <__libc_init_array+0x40>)
 800da92:	4c0c      	ldr	r4, [pc, #48]	; (800dac4 <__libc_init_array+0x44>)
 800da94:	f003 f916 	bl	8010cc4 <_init>
 800da98:	1b64      	subs	r4, r4, r5
 800da9a:	10a4      	asrs	r4, r4, #2
 800da9c:	2600      	movs	r6, #0
 800da9e:	42a6      	cmp	r6, r4
 800daa0:	d105      	bne.n	800daae <__libc_init_array+0x2e>
 800daa2:	bd70      	pop	{r4, r5, r6, pc}
 800daa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800daa8:	4798      	blx	r3
 800daaa:	3601      	adds	r6, #1
 800daac:	e7ee      	b.n	800da8c <__libc_init_array+0xc>
 800daae:	f855 3b04 	ldr.w	r3, [r5], #4
 800dab2:	4798      	blx	r3
 800dab4:	3601      	adds	r6, #1
 800dab6:	e7f2      	b.n	800da9e <__libc_init_array+0x1e>
 800dab8:	08011300 	.word	0x08011300
 800dabc:	08011300 	.word	0x08011300
 800dac0:	08011300 	.word	0x08011300
 800dac4:	08011304 	.word	0x08011304

0800dac8 <malloc>:
 800dac8:	4b02      	ldr	r3, [pc, #8]	; (800dad4 <malloc+0xc>)
 800daca:	4601      	mov	r1, r0
 800dacc:	6818      	ldr	r0, [r3, #0]
 800dace:	f000 b88d 	b.w	800dbec <_malloc_r>
 800dad2:	bf00      	nop
 800dad4:	2000005c 	.word	0x2000005c

0800dad8 <free>:
 800dad8:	4b02      	ldr	r3, [pc, #8]	; (800dae4 <free+0xc>)
 800dada:	4601      	mov	r1, r0
 800dadc:	6818      	ldr	r0, [r3, #0]
 800dade:	f000 b819 	b.w	800db14 <_free_r>
 800dae2:	bf00      	nop
 800dae4:	2000005c 	.word	0x2000005c

0800dae8 <memcpy>:
 800dae8:	440a      	add	r2, r1
 800daea:	4291      	cmp	r1, r2
 800daec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800daf0:	d100      	bne.n	800daf4 <memcpy+0xc>
 800daf2:	4770      	bx	lr
 800daf4:	b510      	push	{r4, lr}
 800daf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dafa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dafe:	4291      	cmp	r1, r2
 800db00:	d1f9      	bne.n	800daf6 <memcpy+0xe>
 800db02:	bd10      	pop	{r4, pc}

0800db04 <memset>:
 800db04:	4402      	add	r2, r0
 800db06:	4603      	mov	r3, r0
 800db08:	4293      	cmp	r3, r2
 800db0a:	d100      	bne.n	800db0e <memset+0xa>
 800db0c:	4770      	bx	lr
 800db0e:	f803 1b01 	strb.w	r1, [r3], #1
 800db12:	e7f9      	b.n	800db08 <memset+0x4>

0800db14 <_free_r>:
 800db14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db16:	2900      	cmp	r1, #0
 800db18:	d044      	beq.n	800dba4 <_free_r+0x90>
 800db1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db1e:	9001      	str	r0, [sp, #4]
 800db20:	2b00      	cmp	r3, #0
 800db22:	f1a1 0404 	sub.w	r4, r1, #4
 800db26:	bfb8      	it	lt
 800db28:	18e4      	addlt	r4, r4, r3
 800db2a:	f000 f8e3 	bl	800dcf4 <__malloc_lock>
 800db2e:	4a1e      	ldr	r2, [pc, #120]	; (800dba8 <_free_r+0x94>)
 800db30:	9801      	ldr	r0, [sp, #4]
 800db32:	6813      	ldr	r3, [r2, #0]
 800db34:	b933      	cbnz	r3, 800db44 <_free_r+0x30>
 800db36:	6063      	str	r3, [r4, #4]
 800db38:	6014      	str	r4, [r2, #0]
 800db3a:	b003      	add	sp, #12
 800db3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db40:	f000 b8de 	b.w	800dd00 <__malloc_unlock>
 800db44:	42a3      	cmp	r3, r4
 800db46:	d908      	bls.n	800db5a <_free_r+0x46>
 800db48:	6825      	ldr	r5, [r4, #0]
 800db4a:	1961      	adds	r1, r4, r5
 800db4c:	428b      	cmp	r3, r1
 800db4e:	bf01      	itttt	eq
 800db50:	6819      	ldreq	r1, [r3, #0]
 800db52:	685b      	ldreq	r3, [r3, #4]
 800db54:	1949      	addeq	r1, r1, r5
 800db56:	6021      	streq	r1, [r4, #0]
 800db58:	e7ed      	b.n	800db36 <_free_r+0x22>
 800db5a:	461a      	mov	r2, r3
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	b10b      	cbz	r3, 800db64 <_free_r+0x50>
 800db60:	42a3      	cmp	r3, r4
 800db62:	d9fa      	bls.n	800db5a <_free_r+0x46>
 800db64:	6811      	ldr	r1, [r2, #0]
 800db66:	1855      	adds	r5, r2, r1
 800db68:	42a5      	cmp	r5, r4
 800db6a:	d10b      	bne.n	800db84 <_free_r+0x70>
 800db6c:	6824      	ldr	r4, [r4, #0]
 800db6e:	4421      	add	r1, r4
 800db70:	1854      	adds	r4, r2, r1
 800db72:	42a3      	cmp	r3, r4
 800db74:	6011      	str	r1, [r2, #0]
 800db76:	d1e0      	bne.n	800db3a <_free_r+0x26>
 800db78:	681c      	ldr	r4, [r3, #0]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	6053      	str	r3, [r2, #4]
 800db7e:	4421      	add	r1, r4
 800db80:	6011      	str	r1, [r2, #0]
 800db82:	e7da      	b.n	800db3a <_free_r+0x26>
 800db84:	d902      	bls.n	800db8c <_free_r+0x78>
 800db86:	230c      	movs	r3, #12
 800db88:	6003      	str	r3, [r0, #0]
 800db8a:	e7d6      	b.n	800db3a <_free_r+0x26>
 800db8c:	6825      	ldr	r5, [r4, #0]
 800db8e:	1961      	adds	r1, r4, r5
 800db90:	428b      	cmp	r3, r1
 800db92:	bf04      	itt	eq
 800db94:	6819      	ldreq	r1, [r3, #0]
 800db96:	685b      	ldreq	r3, [r3, #4]
 800db98:	6063      	str	r3, [r4, #4]
 800db9a:	bf04      	itt	eq
 800db9c:	1949      	addeq	r1, r1, r5
 800db9e:	6021      	streq	r1, [r4, #0]
 800dba0:	6054      	str	r4, [r2, #4]
 800dba2:	e7ca      	b.n	800db3a <_free_r+0x26>
 800dba4:	b003      	add	sp, #12
 800dba6:	bd30      	pop	{r4, r5, pc}
 800dba8:	2001157c 	.word	0x2001157c

0800dbac <sbrk_aligned>:
 800dbac:	b570      	push	{r4, r5, r6, lr}
 800dbae:	4e0e      	ldr	r6, [pc, #56]	; (800dbe8 <sbrk_aligned+0x3c>)
 800dbb0:	460c      	mov	r4, r1
 800dbb2:	6831      	ldr	r1, [r6, #0]
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	b911      	cbnz	r1, 800dbbe <sbrk_aligned+0x12>
 800dbb8:	f000 f88c 	bl	800dcd4 <_sbrk_r>
 800dbbc:	6030      	str	r0, [r6, #0]
 800dbbe:	4621      	mov	r1, r4
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	f000 f887 	bl	800dcd4 <_sbrk_r>
 800dbc6:	1c43      	adds	r3, r0, #1
 800dbc8:	d00a      	beq.n	800dbe0 <sbrk_aligned+0x34>
 800dbca:	1cc4      	adds	r4, r0, #3
 800dbcc:	f024 0403 	bic.w	r4, r4, #3
 800dbd0:	42a0      	cmp	r0, r4
 800dbd2:	d007      	beq.n	800dbe4 <sbrk_aligned+0x38>
 800dbd4:	1a21      	subs	r1, r4, r0
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	f000 f87c 	bl	800dcd4 <_sbrk_r>
 800dbdc:	3001      	adds	r0, #1
 800dbde:	d101      	bne.n	800dbe4 <sbrk_aligned+0x38>
 800dbe0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	bd70      	pop	{r4, r5, r6, pc}
 800dbe8:	20011580 	.word	0x20011580

0800dbec <_malloc_r>:
 800dbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf0:	1ccd      	adds	r5, r1, #3
 800dbf2:	f025 0503 	bic.w	r5, r5, #3
 800dbf6:	3508      	adds	r5, #8
 800dbf8:	2d0c      	cmp	r5, #12
 800dbfa:	bf38      	it	cc
 800dbfc:	250c      	movcc	r5, #12
 800dbfe:	2d00      	cmp	r5, #0
 800dc00:	4607      	mov	r7, r0
 800dc02:	db01      	blt.n	800dc08 <_malloc_r+0x1c>
 800dc04:	42a9      	cmp	r1, r5
 800dc06:	d905      	bls.n	800dc14 <_malloc_r+0x28>
 800dc08:	230c      	movs	r3, #12
 800dc0a:	603b      	str	r3, [r7, #0]
 800dc0c:	2600      	movs	r6, #0
 800dc0e:	4630      	mov	r0, r6
 800dc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc14:	4e2e      	ldr	r6, [pc, #184]	; (800dcd0 <_malloc_r+0xe4>)
 800dc16:	f000 f86d 	bl	800dcf4 <__malloc_lock>
 800dc1a:	6833      	ldr	r3, [r6, #0]
 800dc1c:	461c      	mov	r4, r3
 800dc1e:	bb34      	cbnz	r4, 800dc6e <_malloc_r+0x82>
 800dc20:	4629      	mov	r1, r5
 800dc22:	4638      	mov	r0, r7
 800dc24:	f7ff ffc2 	bl	800dbac <sbrk_aligned>
 800dc28:	1c43      	adds	r3, r0, #1
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	d14d      	bne.n	800dcca <_malloc_r+0xde>
 800dc2e:	6834      	ldr	r4, [r6, #0]
 800dc30:	4626      	mov	r6, r4
 800dc32:	2e00      	cmp	r6, #0
 800dc34:	d140      	bne.n	800dcb8 <_malloc_r+0xcc>
 800dc36:	6823      	ldr	r3, [r4, #0]
 800dc38:	4631      	mov	r1, r6
 800dc3a:	4638      	mov	r0, r7
 800dc3c:	eb04 0803 	add.w	r8, r4, r3
 800dc40:	f000 f848 	bl	800dcd4 <_sbrk_r>
 800dc44:	4580      	cmp	r8, r0
 800dc46:	d13a      	bne.n	800dcbe <_malloc_r+0xd2>
 800dc48:	6821      	ldr	r1, [r4, #0]
 800dc4a:	3503      	adds	r5, #3
 800dc4c:	1a6d      	subs	r5, r5, r1
 800dc4e:	f025 0503 	bic.w	r5, r5, #3
 800dc52:	3508      	adds	r5, #8
 800dc54:	2d0c      	cmp	r5, #12
 800dc56:	bf38      	it	cc
 800dc58:	250c      	movcc	r5, #12
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	4638      	mov	r0, r7
 800dc5e:	f7ff ffa5 	bl	800dbac <sbrk_aligned>
 800dc62:	3001      	adds	r0, #1
 800dc64:	d02b      	beq.n	800dcbe <_malloc_r+0xd2>
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	442b      	add	r3, r5
 800dc6a:	6023      	str	r3, [r4, #0]
 800dc6c:	e00e      	b.n	800dc8c <_malloc_r+0xa0>
 800dc6e:	6822      	ldr	r2, [r4, #0]
 800dc70:	1b52      	subs	r2, r2, r5
 800dc72:	d41e      	bmi.n	800dcb2 <_malloc_r+0xc6>
 800dc74:	2a0b      	cmp	r2, #11
 800dc76:	d916      	bls.n	800dca6 <_malloc_r+0xba>
 800dc78:	1961      	adds	r1, r4, r5
 800dc7a:	42a3      	cmp	r3, r4
 800dc7c:	6025      	str	r5, [r4, #0]
 800dc7e:	bf18      	it	ne
 800dc80:	6059      	strne	r1, [r3, #4]
 800dc82:	6863      	ldr	r3, [r4, #4]
 800dc84:	bf08      	it	eq
 800dc86:	6031      	streq	r1, [r6, #0]
 800dc88:	5162      	str	r2, [r4, r5]
 800dc8a:	604b      	str	r3, [r1, #4]
 800dc8c:	4638      	mov	r0, r7
 800dc8e:	f104 060b 	add.w	r6, r4, #11
 800dc92:	f000 f835 	bl	800dd00 <__malloc_unlock>
 800dc96:	f026 0607 	bic.w	r6, r6, #7
 800dc9a:	1d23      	adds	r3, r4, #4
 800dc9c:	1af2      	subs	r2, r6, r3
 800dc9e:	d0b6      	beq.n	800dc0e <_malloc_r+0x22>
 800dca0:	1b9b      	subs	r3, r3, r6
 800dca2:	50a3      	str	r3, [r4, r2]
 800dca4:	e7b3      	b.n	800dc0e <_malloc_r+0x22>
 800dca6:	6862      	ldr	r2, [r4, #4]
 800dca8:	42a3      	cmp	r3, r4
 800dcaa:	bf0c      	ite	eq
 800dcac:	6032      	streq	r2, [r6, #0]
 800dcae:	605a      	strne	r2, [r3, #4]
 800dcb0:	e7ec      	b.n	800dc8c <_malloc_r+0xa0>
 800dcb2:	4623      	mov	r3, r4
 800dcb4:	6864      	ldr	r4, [r4, #4]
 800dcb6:	e7b2      	b.n	800dc1e <_malloc_r+0x32>
 800dcb8:	4634      	mov	r4, r6
 800dcba:	6876      	ldr	r6, [r6, #4]
 800dcbc:	e7b9      	b.n	800dc32 <_malloc_r+0x46>
 800dcbe:	230c      	movs	r3, #12
 800dcc0:	603b      	str	r3, [r7, #0]
 800dcc2:	4638      	mov	r0, r7
 800dcc4:	f000 f81c 	bl	800dd00 <__malloc_unlock>
 800dcc8:	e7a1      	b.n	800dc0e <_malloc_r+0x22>
 800dcca:	6025      	str	r5, [r4, #0]
 800dccc:	e7de      	b.n	800dc8c <_malloc_r+0xa0>
 800dcce:	bf00      	nop
 800dcd0:	2001157c 	.word	0x2001157c

0800dcd4 <_sbrk_r>:
 800dcd4:	b538      	push	{r3, r4, r5, lr}
 800dcd6:	4d06      	ldr	r5, [pc, #24]	; (800dcf0 <_sbrk_r+0x1c>)
 800dcd8:	2300      	movs	r3, #0
 800dcda:	4604      	mov	r4, r0
 800dcdc:	4608      	mov	r0, r1
 800dcde:	602b      	str	r3, [r5, #0]
 800dce0:	f7f5 fe8e 	bl	8003a00 <_sbrk>
 800dce4:	1c43      	adds	r3, r0, #1
 800dce6:	d102      	bne.n	800dcee <_sbrk_r+0x1a>
 800dce8:	682b      	ldr	r3, [r5, #0]
 800dcea:	b103      	cbz	r3, 800dcee <_sbrk_r+0x1a>
 800dcec:	6023      	str	r3, [r4, #0]
 800dcee:	bd38      	pop	{r3, r4, r5, pc}
 800dcf0:	20011584 	.word	0x20011584

0800dcf4 <__malloc_lock>:
 800dcf4:	4801      	ldr	r0, [pc, #4]	; (800dcfc <__malloc_lock+0x8>)
 800dcf6:	f000 b809 	b.w	800dd0c <__retarget_lock_acquire_recursive>
 800dcfa:	bf00      	nop
 800dcfc:	20011588 	.word	0x20011588

0800dd00 <__malloc_unlock>:
 800dd00:	4801      	ldr	r0, [pc, #4]	; (800dd08 <__malloc_unlock+0x8>)
 800dd02:	f000 b804 	b.w	800dd0e <__retarget_lock_release_recursive>
 800dd06:	bf00      	nop
 800dd08:	20011588 	.word	0x20011588

0800dd0c <__retarget_lock_acquire_recursive>:
 800dd0c:	4770      	bx	lr

0800dd0e <__retarget_lock_release_recursive>:
 800dd0e:	4770      	bx	lr

0800dd10 <floor>:
 800dd10:	ec51 0b10 	vmov	r0, r1, d0
 800dd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800dd1c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800dd20:	2e13      	cmp	r6, #19
 800dd22:	ee10 5a10 	vmov	r5, s0
 800dd26:	ee10 8a10 	vmov	r8, s0
 800dd2a:	460c      	mov	r4, r1
 800dd2c:	dc32      	bgt.n	800dd94 <floor+0x84>
 800dd2e:	2e00      	cmp	r6, #0
 800dd30:	da14      	bge.n	800dd5c <floor+0x4c>
 800dd32:	a333      	add	r3, pc, #204	; (adr r3, 800de00 <floor+0xf0>)
 800dd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd38:	f7f2 fa4c 	bl	80001d4 <__adddf3>
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	2300      	movs	r3, #0
 800dd40:	f7f2 fe8e 	bl	8000a60 <__aeabi_dcmpgt>
 800dd44:	b138      	cbz	r0, 800dd56 <floor+0x46>
 800dd46:	2c00      	cmp	r4, #0
 800dd48:	da57      	bge.n	800ddfa <floor+0xea>
 800dd4a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dd4e:	431d      	orrs	r5, r3
 800dd50:	d001      	beq.n	800dd56 <floor+0x46>
 800dd52:	4c2d      	ldr	r4, [pc, #180]	; (800de08 <floor+0xf8>)
 800dd54:	2500      	movs	r5, #0
 800dd56:	4621      	mov	r1, r4
 800dd58:	4628      	mov	r0, r5
 800dd5a:	e025      	b.n	800dda8 <floor+0x98>
 800dd5c:	4f2b      	ldr	r7, [pc, #172]	; (800de0c <floor+0xfc>)
 800dd5e:	4137      	asrs	r7, r6
 800dd60:	ea01 0307 	and.w	r3, r1, r7
 800dd64:	4303      	orrs	r3, r0
 800dd66:	d01f      	beq.n	800dda8 <floor+0x98>
 800dd68:	a325      	add	r3, pc, #148	; (adr r3, 800de00 <floor+0xf0>)
 800dd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6e:	f7f2 fa31 	bl	80001d4 <__adddf3>
 800dd72:	2200      	movs	r2, #0
 800dd74:	2300      	movs	r3, #0
 800dd76:	f7f2 fe73 	bl	8000a60 <__aeabi_dcmpgt>
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	d0eb      	beq.n	800dd56 <floor+0x46>
 800dd7e:	2c00      	cmp	r4, #0
 800dd80:	bfbe      	ittt	lt
 800dd82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dd86:	fa43 f606 	asrlt.w	r6, r3, r6
 800dd8a:	19a4      	addlt	r4, r4, r6
 800dd8c:	ea24 0407 	bic.w	r4, r4, r7
 800dd90:	2500      	movs	r5, #0
 800dd92:	e7e0      	b.n	800dd56 <floor+0x46>
 800dd94:	2e33      	cmp	r6, #51	; 0x33
 800dd96:	dd0b      	ble.n	800ddb0 <floor+0xa0>
 800dd98:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dd9c:	d104      	bne.n	800dda8 <floor+0x98>
 800dd9e:	ee10 2a10 	vmov	r2, s0
 800dda2:	460b      	mov	r3, r1
 800dda4:	f7f2 fa16 	bl	80001d4 <__adddf3>
 800dda8:	ec41 0b10 	vmov	d0, r0, r1
 800ddac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ddb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddb8:	fa23 f707 	lsr.w	r7, r3, r7
 800ddbc:	4207      	tst	r7, r0
 800ddbe:	d0f3      	beq.n	800dda8 <floor+0x98>
 800ddc0:	a30f      	add	r3, pc, #60	; (adr r3, 800de00 <floor+0xf0>)
 800ddc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc6:	f7f2 fa05 	bl	80001d4 <__adddf3>
 800ddca:	2200      	movs	r2, #0
 800ddcc:	2300      	movs	r3, #0
 800ddce:	f7f2 fe47 	bl	8000a60 <__aeabi_dcmpgt>
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	d0bf      	beq.n	800dd56 <floor+0x46>
 800ddd6:	2c00      	cmp	r4, #0
 800ddd8:	da02      	bge.n	800dde0 <floor+0xd0>
 800ddda:	2e14      	cmp	r6, #20
 800dddc:	d103      	bne.n	800dde6 <floor+0xd6>
 800ddde:	3401      	adds	r4, #1
 800dde0:	ea25 0507 	bic.w	r5, r5, r7
 800dde4:	e7b7      	b.n	800dd56 <floor+0x46>
 800dde6:	2301      	movs	r3, #1
 800dde8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ddec:	fa03 f606 	lsl.w	r6, r3, r6
 800ddf0:	4435      	add	r5, r6
 800ddf2:	4545      	cmp	r5, r8
 800ddf4:	bf38      	it	cc
 800ddf6:	18e4      	addcc	r4, r4, r3
 800ddf8:	e7f2      	b.n	800dde0 <floor+0xd0>
 800ddfa:	2500      	movs	r5, #0
 800ddfc:	462c      	mov	r4, r5
 800ddfe:	e7aa      	b.n	800dd56 <floor+0x46>
 800de00:	8800759c 	.word	0x8800759c
 800de04:	7e37e43c 	.word	0x7e37e43c
 800de08:	bff00000 	.word	0xbff00000
 800de0c:	000fffff 	.word	0x000fffff

0800de10 <sin>:
 800de10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de12:	ec53 2b10 	vmov	r2, r3, d0
 800de16:	4828      	ldr	r0, [pc, #160]	; (800deb8 <sin+0xa8>)
 800de18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800de1c:	4281      	cmp	r1, r0
 800de1e:	dc07      	bgt.n	800de30 <sin+0x20>
 800de20:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800deb0 <sin+0xa0>
 800de24:	2000      	movs	r0, #0
 800de26:	b005      	add	sp, #20
 800de28:	f85d eb04 	ldr.w	lr, [sp], #4
 800de2c:	f002 b9b8 	b.w	80101a0 <__kernel_sin>
 800de30:	4822      	ldr	r0, [pc, #136]	; (800debc <sin+0xac>)
 800de32:	4281      	cmp	r1, r0
 800de34:	dd09      	ble.n	800de4a <sin+0x3a>
 800de36:	ee10 0a10 	vmov	r0, s0
 800de3a:	4619      	mov	r1, r3
 800de3c:	f7f2 f9c8 	bl	80001d0 <__aeabi_dsub>
 800de40:	ec41 0b10 	vmov	d0, r0, r1
 800de44:	b005      	add	sp, #20
 800de46:	f85d fb04 	ldr.w	pc, [sp], #4
 800de4a:	4668      	mov	r0, sp
 800de4c:	f000 fec4 	bl	800ebd8 <__ieee754_rem_pio2>
 800de50:	f000 0003 	and.w	r0, r0, #3
 800de54:	2801      	cmp	r0, #1
 800de56:	d00c      	beq.n	800de72 <sin+0x62>
 800de58:	2802      	cmp	r0, #2
 800de5a:	d011      	beq.n	800de80 <sin+0x70>
 800de5c:	b9f0      	cbnz	r0, 800de9c <sin+0x8c>
 800de5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de62:	ed9d 0b00 	vldr	d0, [sp]
 800de66:	2001      	movs	r0, #1
 800de68:	f002 f99a 	bl	80101a0 <__kernel_sin>
 800de6c:	ec51 0b10 	vmov	r0, r1, d0
 800de70:	e7e6      	b.n	800de40 <sin+0x30>
 800de72:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de76:	ed9d 0b00 	vldr	d0, [sp]
 800de7a:	f001 fd79 	bl	800f970 <__kernel_cos>
 800de7e:	e7f5      	b.n	800de6c <sin+0x5c>
 800de80:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de84:	ed9d 0b00 	vldr	d0, [sp]
 800de88:	2001      	movs	r0, #1
 800de8a:	f002 f989 	bl	80101a0 <__kernel_sin>
 800de8e:	ec53 2b10 	vmov	r2, r3, d0
 800de92:	ee10 0a10 	vmov	r0, s0
 800de96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800de9a:	e7d1      	b.n	800de40 <sin+0x30>
 800de9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dea0:	ed9d 0b00 	vldr	d0, [sp]
 800dea4:	f001 fd64 	bl	800f970 <__kernel_cos>
 800dea8:	e7f1      	b.n	800de8e <sin+0x7e>
 800deaa:	bf00      	nop
 800deac:	f3af 8000 	nop.w
	...
 800deb8:	3fe921fb 	.word	0x3fe921fb
 800debc:	7fefffff 	.word	0x7fefffff

0800dec0 <cosf>:
 800dec0:	ee10 3a10 	vmov	r3, s0
 800dec4:	b507      	push	{r0, r1, r2, lr}
 800dec6:	4a1e      	ldr	r2, [pc, #120]	; (800df40 <cosf+0x80>)
 800dec8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800decc:	4293      	cmp	r3, r2
 800dece:	dc06      	bgt.n	800dede <cosf+0x1e>
 800ded0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800df44 <cosf+0x84>
 800ded4:	b003      	add	sp, #12
 800ded6:	f85d eb04 	ldr.w	lr, [sp], #4
 800deda:	f002 ba1f 	b.w	801031c <__kernel_cosf>
 800dede:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dee2:	db04      	blt.n	800deee <cosf+0x2e>
 800dee4:	ee30 0a40 	vsub.f32	s0, s0, s0
 800dee8:	b003      	add	sp, #12
 800deea:	f85d fb04 	ldr.w	pc, [sp], #4
 800deee:	4668      	mov	r0, sp
 800def0:	f001 fbfe 	bl	800f6f0 <__ieee754_rem_pio2f>
 800def4:	f000 0003 	and.w	r0, r0, #3
 800def8:	2801      	cmp	r0, #1
 800defa:	d009      	beq.n	800df10 <cosf+0x50>
 800defc:	2802      	cmp	r0, #2
 800defe:	d010      	beq.n	800df22 <cosf+0x62>
 800df00:	b9b0      	cbnz	r0, 800df30 <cosf+0x70>
 800df02:	eddd 0a01 	vldr	s1, [sp, #4]
 800df06:	ed9d 0a00 	vldr	s0, [sp]
 800df0a:	f002 fa07 	bl	801031c <__kernel_cosf>
 800df0e:	e7eb      	b.n	800dee8 <cosf+0x28>
 800df10:	eddd 0a01 	vldr	s1, [sp, #4]
 800df14:	ed9d 0a00 	vldr	s0, [sp]
 800df18:	f002 fcd6 	bl	80108c8 <__kernel_sinf>
 800df1c:	eeb1 0a40 	vneg.f32	s0, s0
 800df20:	e7e2      	b.n	800dee8 <cosf+0x28>
 800df22:	eddd 0a01 	vldr	s1, [sp, #4]
 800df26:	ed9d 0a00 	vldr	s0, [sp]
 800df2a:	f002 f9f7 	bl	801031c <__kernel_cosf>
 800df2e:	e7f5      	b.n	800df1c <cosf+0x5c>
 800df30:	eddd 0a01 	vldr	s1, [sp, #4]
 800df34:	ed9d 0a00 	vldr	s0, [sp]
 800df38:	2001      	movs	r0, #1
 800df3a:	f002 fcc5 	bl	80108c8 <__kernel_sinf>
 800df3e:	e7d3      	b.n	800dee8 <cosf+0x28>
 800df40:	3f490fd8 	.word	0x3f490fd8
 800df44:	00000000 	.word	0x00000000

0800df48 <roundf>:
 800df48:	ee10 0a10 	vmov	r0, s0
 800df4c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800df50:	3a7f      	subs	r2, #127	; 0x7f
 800df52:	2a16      	cmp	r2, #22
 800df54:	dc15      	bgt.n	800df82 <roundf+0x3a>
 800df56:	2a00      	cmp	r2, #0
 800df58:	da08      	bge.n	800df6c <roundf+0x24>
 800df5a:	3201      	adds	r2, #1
 800df5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800df60:	d101      	bne.n	800df66 <roundf+0x1e>
 800df62:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800df66:	ee00 3a10 	vmov	s0, r3
 800df6a:	4770      	bx	lr
 800df6c:	4907      	ldr	r1, [pc, #28]	; (800df8c <roundf+0x44>)
 800df6e:	4111      	asrs	r1, r2
 800df70:	4208      	tst	r0, r1
 800df72:	d0fa      	beq.n	800df6a <roundf+0x22>
 800df74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800df78:	4113      	asrs	r3, r2
 800df7a:	4403      	add	r3, r0
 800df7c:	ea23 0301 	bic.w	r3, r3, r1
 800df80:	e7f1      	b.n	800df66 <roundf+0x1e>
 800df82:	2a80      	cmp	r2, #128	; 0x80
 800df84:	d1f1      	bne.n	800df6a <roundf+0x22>
 800df86:	ee30 0a00 	vadd.f32	s0, s0, s0
 800df8a:	4770      	bx	lr
 800df8c:	007fffff 	.word	0x007fffff

0800df90 <pow>:
 800df90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df92:	ed2d 8b02 	vpush	{d8}
 800df96:	eeb0 8a40 	vmov.f32	s16, s0
 800df9a:	eef0 8a60 	vmov.f32	s17, s1
 800df9e:	ec55 4b11 	vmov	r4, r5, d1
 800dfa2:	f000 f8e9 	bl	800e178 <__ieee754_pow>
 800dfa6:	4622      	mov	r2, r4
 800dfa8:	462b      	mov	r3, r5
 800dfaa:	4620      	mov	r0, r4
 800dfac:	4629      	mov	r1, r5
 800dfae:	ec57 6b10 	vmov	r6, r7, d0
 800dfb2:	f7f2 fd5f 	bl	8000a74 <__aeabi_dcmpun>
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	d13b      	bne.n	800e032 <pow+0xa2>
 800dfba:	ec51 0b18 	vmov	r0, r1, d8
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	f7f2 fd25 	bl	8000a10 <__aeabi_dcmpeq>
 800dfc6:	b1b8      	cbz	r0, 800dff8 <pow+0x68>
 800dfc8:	2200      	movs	r2, #0
 800dfca:	2300      	movs	r3, #0
 800dfcc:	4620      	mov	r0, r4
 800dfce:	4629      	mov	r1, r5
 800dfd0:	f7f2 fd1e 	bl	8000a10 <__aeabi_dcmpeq>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d146      	bne.n	800e066 <pow+0xd6>
 800dfd8:	ec45 4b10 	vmov	d0, r4, r5
 800dfdc:	f002 fd17 	bl	8010a0e <finite>
 800dfe0:	b338      	cbz	r0, 800e032 <pow+0xa2>
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	4629      	mov	r1, r5
 800dfea:	f7f2 fd1b 	bl	8000a24 <__aeabi_dcmplt>
 800dfee:	b300      	cbz	r0, 800e032 <pow+0xa2>
 800dff0:	f7ff fd40 	bl	800da74 <__errno>
 800dff4:	2322      	movs	r3, #34	; 0x22
 800dff6:	e01b      	b.n	800e030 <pow+0xa0>
 800dff8:	ec47 6b10 	vmov	d0, r6, r7
 800dffc:	f002 fd07 	bl	8010a0e <finite>
 800e000:	b9e0      	cbnz	r0, 800e03c <pow+0xac>
 800e002:	eeb0 0a48 	vmov.f32	s0, s16
 800e006:	eef0 0a68 	vmov.f32	s1, s17
 800e00a:	f002 fd00 	bl	8010a0e <finite>
 800e00e:	b1a8      	cbz	r0, 800e03c <pow+0xac>
 800e010:	ec45 4b10 	vmov	d0, r4, r5
 800e014:	f002 fcfb 	bl	8010a0e <finite>
 800e018:	b180      	cbz	r0, 800e03c <pow+0xac>
 800e01a:	4632      	mov	r2, r6
 800e01c:	463b      	mov	r3, r7
 800e01e:	4630      	mov	r0, r6
 800e020:	4639      	mov	r1, r7
 800e022:	f7f2 fd27 	bl	8000a74 <__aeabi_dcmpun>
 800e026:	2800      	cmp	r0, #0
 800e028:	d0e2      	beq.n	800dff0 <pow+0x60>
 800e02a:	f7ff fd23 	bl	800da74 <__errno>
 800e02e:	2321      	movs	r3, #33	; 0x21
 800e030:	6003      	str	r3, [r0, #0]
 800e032:	ecbd 8b02 	vpop	{d8}
 800e036:	ec47 6b10 	vmov	d0, r6, r7
 800e03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e03c:	2200      	movs	r2, #0
 800e03e:	2300      	movs	r3, #0
 800e040:	4630      	mov	r0, r6
 800e042:	4639      	mov	r1, r7
 800e044:	f7f2 fce4 	bl	8000a10 <__aeabi_dcmpeq>
 800e048:	2800      	cmp	r0, #0
 800e04a:	d0f2      	beq.n	800e032 <pow+0xa2>
 800e04c:	eeb0 0a48 	vmov.f32	s0, s16
 800e050:	eef0 0a68 	vmov.f32	s1, s17
 800e054:	f002 fcdb 	bl	8010a0e <finite>
 800e058:	2800      	cmp	r0, #0
 800e05a:	d0ea      	beq.n	800e032 <pow+0xa2>
 800e05c:	ec45 4b10 	vmov	d0, r4, r5
 800e060:	f002 fcd5 	bl	8010a0e <finite>
 800e064:	e7c3      	b.n	800dfee <pow+0x5e>
 800e066:	4f01      	ldr	r7, [pc, #4]	; (800e06c <pow+0xdc>)
 800e068:	2600      	movs	r6, #0
 800e06a:	e7e2      	b.n	800e032 <pow+0xa2>
 800e06c:	3ff00000 	.word	0x3ff00000

0800e070 <sqrt>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	ed2d 8b02 	vpush	{d8}
 800e076:	ec55 4b10 	vmov	r4, r5, d0
 800e07a:	f000 ffb9 	bl	800eff0 <__ieee754_sqrt>
 800e07e:	4622      	mov	r2, r4
 800e080:	462b      	mov	r3, r5
 800e082:	4620      	mov	r0, r4
 800e084:	4629      	mov	r1, r5
 800e086:	eeb0 8a40 	vmov.f32	s16, s0
 800e08a:	eef0 8a60 	vmov.f32	s17, s1
 800e08e:	f7f2 fcf1 	bl	8000a74 <__aeabi_dcmpun>
 800e092:	b990      	cbnz	r0, 800e0ba <sqrt+0x4a>
 800e094:	2200      	movs	r2, #0
 800e096:	2300      	movs	r3, #0
 800e098:	4620      	mov	r0, r4
 800e09a:	4629      	mov	r1, r5
 800e09c:	f7f2 fcc2 	bl	8000a24 <__aeabi_dcmplt>
 800e0a0:	b158      	cbz	r0, 800e0ba <sqrt+0x4a>
 800e0a2:	f7ff fce7 	bl	800da74 <__errno>
 800e0a6:	2321      	movs	r3, #33	; 0x21
 800e0a8:	6003      	str	r3, [r0, #0]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	4610      	mov	r0, r2
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	f7f2 fb6f 	bl	8000794 <__aeabi_ddiv>
 800e0b6:	ec41 0b18 	vmov	d8, r0, r1
 800e0ba:	eeb0 0a48 	vmov.f32	s0, s16
 800e0be:	eef0 0a68 	vmov.f32	s1, s17
 800e0c2:	ecbd 8b02 	vpop	{d8}
 800e0c6:	bd38      	pop	{r3, r4, r5, pc}

0800e0c8 <powf>:
 800e0c8:	b508      	push	{r3, lr}
 800e0ca:	ed2d 8b04 	vpush	{d8-d9}
 800e0ce:	eeb0 8a60 	vmov.f32	s16, s1
 800e0d2:	eeb0 9a40 	vmov.f32	s18, s0
 800e0d6:	f001 f83d 	bl	800f154 <__ieee754_powf>
 800e0da:	eeb4 8a48 	vcmp.f32	s16, s16
 800e0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e2:	eef0 8a40 	vmov.f32	s17, s0
 800e0e6:	d63e      	bvs.n	800e166 <powf+0x9e>
 800e0e8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f0:	d112      	bne.n	800e118 <powf+0x50>
 800e0f2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0fa:	d039      	beq.n	800e170 <powf+0xa8>
 800e0fc:	eeb0 0a48 	vmov.f32	s0, s16
 800e100:	f002 fd1f 	bl	8010b42 <finitef>
 800e104:	b378      	cbz	r0, 800e166 <powf+0x9e>
 800e106:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e10e:	d52a      	bpl.n	800e166 <powf+0x9e>
 800e110:	f7ff fcb0 	bl	800da74 <__errno>
 800e114:	2322      	movs	r3, #34	; 0x22
 800e116:	e014      	b.n	800e142 <powf+0x7a>
 800e118:	f002 fd13 	bl	8010b42 <finitef>
 800e11c:	b998      	cbnz	r0, 800e146 <powf+0x7e>
 800e11e:	eeb0 0a49 	vmov.f32	s0, s18
 800e122:	f002 fd0e 	bl	8010b42 <finitef>
 800e126:	b170      	cbz	r0, 800e146 <powf+0x7e>
 800e128:	eeb0 0a48 	vmov.f32	s0, s16
 800e12c:	f002 fd09 	bl	8010b42 <finitef>
 800e130:	b148      	cbz	r0, 800e146 <powf+0x7e>
 800e132:	eef4 8a68 	vcmp.f32	s17, s17
 800e136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e13a:	d7e9      	bvc.n	800e110 <powf+0x48>
 800e13c:	f7ff fc9a 	bl	800da74 <__errno>
 800e140:	2321      	movs	r3, #33	; 0x21
 800e142:	6003      	str	r3, [r0, #0]
 800e144:	e00f      	b.n	800e166 <powf+0x9e>
 800e146:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e14e:	d10a      	bne.n	800e166 <powf+0x9e>
 800e150:	eeb0 0a49 	vmov.f32	s0, s18
 800e154:	f002 fcf5 	bl	8010b42 <finitef>
 800e158:	b128      	cbz	r0, 800e166 <powf+0x9e>
 800e15a:	eeb0 0a48 	vmov.f32	s0, s16
 800e15e:	f002 fcf0 	bl	8010b42 <finitef>
 800e162:	2800      	cmp	r0, #0
 800e164:	d1d4      	bne.n	800e110 <powf+0x48>
 800e166:	eeb0 0a68 	vmov.f32	s0, s17
 800e16a:	ecbd 8b04 	vpop	{d8-d9}
 800e16e:	bd08      	pop	{r3, pc}
 800e170:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800e174:	e7f7      	b.n	800e166 <powf+0x9e>
	...

0800e178 <__ieee754_pow>:
 800e178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17c:	ed2d 8b06 	vpush	{d8-d10}
 800e180:	b089      	sub	sp, #36	; 0x24
 800e182:	ed8d 1b00 	vstr	d1, [sp]
 800e186:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e18a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e18e:	ea58 0102 	orrs.w	r1, r8, r2
 800e192:	ec57 6b10 	vmov	r6, r7, d0
 800e196:	d115      	bne.n	800e1c4 <__ieee754_pow+0x4c>
 800e198:	19b3      	adds	r3, r6, r6
 800e19a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e19e:	4152      	adcs	r2, r2
 800e1a0:	4299      	cmp	r1, r3
 800e1a2:	4b89      	ldr	r3, [pc, #548]	; (800e3c8 <__ieee754_pow+0x250>)
 800e1a4:	4193      	sbcs	r3, r2
 800e1a6:	f080 84d2 	bcs.w	800eb4e <__ieee754_pow+0x9d6>
 800e1aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	4639      	mov	r1, r7
 800e1b2:	f7f2 f80f 	bl	80001d4 <__adddf3>
 800e1b6:	ec41 0b10 	vmov	d0, r0, r1
 800e1ba:	b009      	add	sp, #36	; 0x24
 800e1bc:	ecbd 8b06 	vpop	{d8-d10}
 800e1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c4:	4b81      	ldr	r3, [pc, #516]	; (800e3cc <__ieee754_pow+0x254>)
 800e1c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e1ca:	429c      	cmp	r4, r3
 800e1cc:	ee10 aa10 	vmov	sl, s0
 800e1d0:	463d      	mov	r5, r7
 800e1d2:	dc06      	bgt.n	800e1e2 <__ieee754_pow+0x6a>
 800e1d4:	d101      	bne.n	800e1da <__ieee754_pow+0x62>
 800e1d6:	2e00      	cmp	r6, #0
 800e1d8:	d1e7      	bne.n	800e1aa <__ieee754_pow+0x32>
 800e1da:	4598      	cmp	r8, r3
 800e1dc:	dc01      	bgt.n	800e1e2 <__ieee754_pow+0x6a>
 800e1de:	d10f      	bne.n	800e200 <__ieee754_pow+0x88>
 800e1e0:	b172      	cbz	r2, 800e200 <__ieee754_pow+0x88>
 800e1e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e1e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e1ea:	ea55 050a 	orrs.w	r5, r5, sl
 800e1ee:	d1dc      	bne.n	800e1aa <__ieee754_pow+0x32>
 800e1f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e1f4:	18db      	adds	r3, r3, r3
 800e1f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e1fa:	4152      	adcs	r2, r2
 800e1fc:	429d      	cmp	r5, r3
 800e1fe:	e7d0      	b.n	800e1a2 <__ieee754_pow+0x2a>
 800e200:	2d00      	cmp	r5, #0
 800e202:	da3b      	bge.n	800e27c <__ieee754_pow+0x104>
 800e204:	4b72      	ldr	r3, [pc, #456]	; (800e3d0 <__ieee754_pow+0x258>)
 800e206:	4598      	cmp	r8, r3
 800e208:	dc51      	bgt.n	800e2ae <__ieee754_pow+0x136>
 800e20a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e20e:	4598      	cmp	r8, r3
 800e210:	f340 84ac 	ble.w	800eb6c <__ieee754_pow+0x9f4>
 800e214:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e218:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e21c:	2b14      	cmp	r3, #20
 800e21e:	dd0f      	ble.n	800e240 <__ieee754_pow+0xc8>
 800e220:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e224:	fa22 f103 	lsr.w	r1, r2, r3
 800e228:	fa01 f303 	lsl.w	r3, r1, r3
 800e22c:	4293      	cmp	r3, r2
 800e22e:	f040 849d 	bne.w	800eb6c <__ieee754_pow+0x9f4>
 800e232:	f001 0101 	and.w	r1, r1, #1
 800e236:	f1c1 0302 	rsb	r3, r1, #2
 800e23a:	9304      	str	r3, [sp, #16]
 800e23c:	b182      	cbz	r2, 800e260 <__ieee754_pow+0xe8>
 800e23e:	e05f      	b.n	800e300 <__ieee754_pow+0x188>
 800e240:	2a00      	cmp	r2, #0
 800e242:	d15b      	bne.n	800e2fc <__ieee754_pow+0x184>
 800e244:	f1c3 0314 	rsb	r3, r3, #20
 800e248:	fa48 f103 	asr.w	r1, r8, r3
 800e24c:	fa01 f303 	lsl.w	r3, r1, r3
 800e250:	4543      	cmp	r3, r8
 800e252:	f040 8488 	bne.w	800eb66 <__ieee754_pow+0x9ee>
 800e256:	f001 0101 	and.w	r1, r1, #1
 800e25a:	f1c1 0302 	rsb	r3, r1, #2
 800e25e:	9304      	str	r3, [sp, #16]
 800e260:	4b5c      	ldr	r3, [pc, #368]	; (800e3d4 <__ieee754_pow+0x25c>)
 800e262:	4598      	cmp	r8, r3
 800e264:	d132      	bne.n	800e2cc <__ieee754_pow+0x154>
 800e266:	f1b9 0f00 	cmp.w	r9, #0
 800e26a:	f280 8478 	bge.w	800eb5e <__ieee754_pow+0x9e6>
 800e26e:	4959      	ldr	r1, [pc, #356]	; (800e3d4 <__ieee754_pow+0x25c>)
 800e270:	4632      	mov	r2, r6
 800e272:	463b      	mov	r3, r7
 800e274:	2000      	movs	r0, #0
 800e276:	f7f2 fa8d 	bl	8000794 <__aeabi_ddiv>
 800e27a:	e79c      	b.n	800e1b6 <__ieee754_pow+0x3e>
 800e27c:	2300      	movs	r3, #0
 800e27e:	9304      	str	r3, [sp, #16]
 800e280:	2a00      	cmp	r2, #0
 800e282:	d13d      	bne.n	800e300 <__ieee754_pow+0x188>
 800e284:	4b51      	ldr	r3, [pc, #324]	; (800e3cc <__ieee754_pow+0x254>)
 800e286:	4598      	cmp	r8, r3
 800e288:	d1ea      	bne.n	800e260 <__ieee754_pow+0xe8>
 800e28a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e28e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e292:	ea53 030a 	orrs.w	r3, r3, sl
 800e296:	f000 845a 	beq.w	800eb4e <__ieee754_pow+0x9d6>
 800e29a:	4b4f      	ldr	r3, [pc, #316]	; (800e3d8 <__ieee754_pow+0x260>)
 800e29c:	429c      	cmp	r4, r3
 800e29e:	dd08      	ble.n	800e2b2 <__ieee754_pow+0x13a>
 800e2a0:	f1b9 0f00 	cmp.w	r9, #0
 800e2a4:	f2c0 8457 	blt.w	800eb56 <__ieee754_pow+0x9de>
 800e2a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2ac:	e783      	b.n	800e1b6 <__ieee754_pow+0x3e>
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	e7e5      	b.n	800e27e <__ieee754_pow+0x106>
 800e2b2:	f1b9 0f00 	cmp.w	r9, #0
 800e2b6:	f04f 0000 	mov.w	r0, #0
 800e2ba:	f04f 0100 	mov.w	r1, #0
 800e2be:	f6bf af7a 	bge.w	800e1b6 <__ieee754_pow+0x3e>
 800e2c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e2c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e2ca:	e774      	b.n	800e1b6 <__ieee754_pow+0x3e>
 800e2cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e2d0:	d106      	bne.n	800e2e0 <__ieee754_pow+0x168>
 800e2d2:	4632      	mov	r2, r6
 800e2d4:	463b      	mov	r3, r7
 800e2d6:	4630      	mov	r0, r6
 800e2d8:	4639      	mov	r1, r7
 800e2da:	f7f2 f931 	bl	8000540 <__aeabi_dmul>
 800e2de:	e76a      	b.n	800e1b6 <__ieee754_pow+0x3e>
 800e2e0:	4b3e      	ldr	r3, [pc, #248]	; (800e3dc <__ieee754_pow+0x264>)
 800e2e2:	4599      	cmp	r9, r3
 800e2e4:	d10c      	bne.n	800e300 <__ieee754_pow+0x188>
 800e2e6:	2d00      	cmp	r5, #0
 800e2e8:	db0a      	blt.n	800e300 <__ieee754_pow+0x188>
 800e2ea:	ec47 6b10 	vmov	d0, r6, r7
 800e2ee:	b009      	add	sp, #36	; 0x24
 800e2f0:	ecbd 8b06 	vpop	{d8-d10}
 800e2f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f8:	f000 be7a 	b.w	800eff0 <__ieee754_sqrt>
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	9304      	str	r3, [sp, #16]
 800e300:	ec47 6b10 	vmov	d0, r6, r7
 800e304:	f002 fb7a 	bl	80109fc <fabs>
 800e308:	ec51 0b10 	vmov	r0, r1, d0
 800e30c:	f1ba 0f00 	cmp.w	sl, #0
 800e310:	d129      	bne.n	800e366 <__ieee754_pow+0x1ee>
 800e312:	b124      	cbz	r4, 800e31e <__ieee754_pow+0x1a6>
 800e314:	4b2f      	ldr	r3, [pc, #188]	; (800e3d4 <__ieee754_pow+0x25c>)
 800e316:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d123      	bne.n	800e366 <__ieee754_pow+0x1ee>
 800e31e:	f1b9 0f00 	cmp.w	r9, #0
 800e322:	da05      	bge.n	800e330 <__ieee754_pow+0x1b8>
 800e324:	4602      	mov	r2, r0
 800e326:	460b      	mov	r3, r1
 800e328:	2000      	movs	r0, #0
 800e32a:	492a      	ldr	r1, [pc, #168]	; (800e3d4 <__ieee754_pow+0x25c>)
 800e32c:	f7f2 fa32 	bl	8000794 <__aeabi_ddiv>
 800e330:	2d00      	cmp	r5, #0
 800e332:	f6bf af40 	bge.w	800e1b6 <__ieee754_pow+0x3e>
 800e336:	9b04      	ldr	r3, [sp, #16]
 800e338:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e33c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e340:	4323      	orrs	r3, r4
 800e342:	d108      	bne.n	800e356 <__ieee754_pow+0x1de>
 800e344:	4602      	mov	r2, r0
 800e346:	460b      	mov	r3, r1
 800e348:	4610      	mov	r0, r2
 800e34a:	4619      	mov	r1, r3
 800e34c:	f7f1 ff40 	bl	80001d0 <__aeabi_dsub>
 800e350:	4602      	mov	r2, r0
 800e352:	460b      	mov	r3, r1
 800e354:	e78f      	b.n	800e276 <__ieee754_pow+0xfe>
 800e356:	9b04      	ldr	r3, [sp, #16]
 800e358:	2b01      	cmp	r3, #1
 800e35a:	f47f af2c 	bne.w	800e1b6 <__ieee754_pow+0x3e>
 800e35e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e362:	4619      	mov	r1, r3
 800e364:	e727      	b.n	800e1b6 <__ieee754_pow+0x3e>
 800e366:	0feb      	lsrs	r3, r5, #31
 800e368:	3b01      	subs	r3, #1
 800e36a:	9306      	str	r3, [sp, #24]
 800e36c:	9a06      	ldr	r2, [sp, #24]
 800e36e:	9b04      	ldr	r3, [sp, #16]
 800e370:	4313      	orrs	r3, r2
 800e372:	d102      	bne.n	800e37a <__ieee754_pow+0x202>
 800e374:	4632      	mov	r2, r6
 800e376:	463b      	mov	r3, r7
 800e378:	e7e6      	b.n	800e348 <__ieee754_pow+0x1d0>
 800e37a:	4b19      	ldr	r3, [pc, #100]	; (800e3e0 <__ieee754_pow+0x268>)
 800e37c:	4598      	cmp	r8, r3
 800e37e:	f340 80fb 	ble.w	800e578 <__ieee754_pow+0x400>
 800e382:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e386:	4598      	cmp	r8, r3
 800e388:	4b13      	ldr	r3, [pc, #76]	; (800e3d8 <__ieee754_pow+0x260>)
 800e38a:	dd0c      	ble.n	800e3a6 <__ieee754_pow+0x22e>
 800e38c:	429c      	cmp	r4, r3
 800e38e:	dc0f      	bgt.n	800e3b0 <__ieee754_pow+0x238>
 800e390:	f1b9 0f00 	cmp.w	r9, #0
 800e394:	da0f      	bge.n	800e3b6 <__ieee754_pow+0x23e>
 800e396:	2000      	movs	r0, #0
 800e398:	b009      	add	sp, #36	; 0x24
 800e39a:	ecbd 8b06 	vpop	{d8-d10}
 800e39e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a2:	f002 bb00 	b.w	80109a6 <__math_oflow>
 800e3a6:	429c      	cmp	r4, r3
 800e3a8:	dbf2      	blt.n	800e390 <__ieee754_pow+0x218>
 800e3aa:	4b0a      	ldr	r3, [pc, #40]	; (800e3d4 <__ieee754_pow+0x25c>)
 800e3ac:	429c      	cmp	r4, r3
 800e3ae:	dd19      	ble.n	800e3e4 <__ieee754_pow+0x26c>
 800e3b0:	f1b9 0f00 	cmp.w	r9, #0
 800e3b4:	dcef      	bgt.n	800e396 <__ieee754_pow+0x21e>
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	b009      	add	sp, #36	; 0x24
 800e3ba:	ecbd 8b06 	vpop	{d8-d10}
 800e3be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c2:	f002 bae7 	b.w	8010994 <__math_uflow>
 800e3c6:	bf00      	nop
 800e3c8:	fff00000 	.word	0xfff00000
 800e3cc:	7ff00000 	.word	0x7ff00000
 800e3d0:	433fffff 	.word	0x433fffff
 800e3d4:	3ff00000 	.word	0x3ff00000
 800e3d8:	3fefffff 	.word	0x3fefffff
 800e3dc:	3fe00000 	.word	0x3fe00000
 800e3e0:	41e00000 	.word	0x41e00000
 800e3e4:	4b60      	ldr	r3, [pc, #384]	; (800e568 <__ieee754_pow+0x3f0>)
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f7f1 fef2 	bl	80001d0 <__aeabi_dsub>
 800e3ec:	a354      	add	r3, pc, #336	; (adr r3, 800e540 <__ieee754_pow+0x3c8>)
 800e3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	460d      	mov	r5, r1
 800e3f6:	f7f2 f8a3 	bl	8000540 <__aeabi_dmul>
 800e3fa:	a353      	add	r3, pc, #332	; (adr r3, 800e548 <__ieee754_pow+0x3d0>)
 800e3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e400:	4606      	mov	r6, r0
 800e402:	460f      	mov	r7, r1
 800e404:	4620      	mov	r0, r4
 800e406:	4629      	mov	r1, r5
 800e408:	f7f2 f89a 	bl	8000540 <__aeabi_dmul>
 800e40c:	4b57      	ldr	r3, [pc, #348]	; (800e56c <__ieee754_pow+0x3f4>)
 800e40e:	4682      	mov	sl, r0
 800e410:	468b      	mov	fp, r1
 800e412:	2200      	movs	r2, #0
 800e414:	4620      	mov	r0, r4
 800e416:	4629      	mov	r1, r5
 800e418:	f7f2 f892 	bl	8000540 <__aeabi_dmul>
 800e41c:	4602      	mov	r2, r0
 800e41e:	460b      	mov	r3, r1
 800e420:	a14b      	add	r1, pc, #300	; (adr r1, 800e550 <__ieee754_pow+0x3d8>)
 800e422:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e426:	f7f1 fed3 	bl	80001d0 <__aeabi_dsub>
 800e42a:	4622      	mov	r2, r4
 800e42c:	462b      	mov	r3, r5
 800e42e:	f7f2 f887 	bl	8000540 <__aeabi_dmul>
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	2000      	movs	r0, #0
 800e438:	494d      	ldr	r1, [pc, #308]	; (800e570 <__ieee754_pow+0x3f8>)
 800e43a:	f7f1 fec9 	bl	80001d0 <__aeabi_dsub>
 800e43e:	4622      	mov	r2, r4
 800e440:	4680      	mov	r8, r0
 800e442:	4689      	mov	r9, r1
 800e444:	462b      	mov	r3, r5
 800e446:	4620      	mov	r0, r4
 800e448:	4629      	mov	r1, r5
 800e44a:	f7f2 f879 	bl	8000540 <__aeabi_dmul>
 800e44e:	4602      	mov	r2, r0
 800e450:	460b      	mov	r3, r1
 800e452:	4640      	mov	r0, r8
 800e454:	4649      	mov	r1, r9
 800e456:	f7f2 f873 	bl	8000540 <__aeabi_dmul>
 800e45a:	a33f      	add	r3, pc, #252	; (adr r3, 800e558 <__ieee754_pow+0x3e0>)
 800e45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e460:	f7f2 f86e 	bl	8000540 <__aeabi_dmul>
 800e464:	4602      	mov	r2, r0
 800e466:	460b      	mov	r3, r1
 800e468:	4650      	mov	r0, sl
 800e46a:	4659      	mov	r1, fp
 800e46c:	f7f1 feb0 	bl	80001d0 <__aeabi_dsub>
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	4680      	mov	r8, r0
 800e476:	4689      	mov	r9, r1
 800e478:	4630      	mov	r0, r6
 800e47a:	4639      	mov	r1, r7
 800e47c:	f7f1 feaa 	bl	80001d4 <__adddf3>
 800e480:	2000      	movs	r0, #0
 800e482:	4632      	mov	r2, r6
 800e484:	463b      	mov	r3, r7
 800e486:	4604      	mov	r4, r0
 800e488:	460d      	mov	r5, r1
 800e48a:	f7f1 fea1 	bl	80001d0 <__aeabi_dsub>
 800e48e:	4602      	mov	r2, r0
 800e490:	460b      	mov	r3, r1
 800e492:	4640      	mov	r0, r8
 800e494:	4649      	mov	r1, r9
 800e496:	f7f1 fe9b 	bl	80001d0 <__aeabi_dsub>
 800e49a:	9b04      	ldr	r3, [sp, #16]
 800e49c:	9a06      	ldr	r2, [sp, #24]
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	4682      	mov	sl, r0
 800e4a4:	468b      	mov	fp, r1
 800e4a6:	f040 81e7 	bne.w	800e878 <__ieee754_pow+0x700>
 800e4aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e560 <__ieee754_pow+0x3e8>
 800e4ae:	eeb0 8a47 	vmov.f32	s16, s14
 800e4b2:	eef0 8a67 	vmov.f32	s17, s15
 800e4b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e4ba:	2600      	movs	r6, #0
 800e4bc:	4632      	mov	r2, r6
 800e4be:	463b      	mov	r3, r7
 800e4c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4c4:	f7f1 fe84 	bl	80001d0 <__aeabi_dsub>
 800e4c8:	4622      	mov	r2, r4
 800e4ca:	462b      	mov	r3, r5
 800e4cc:	f7f2 f838 	bl	8000540 <__aeabi_dmul>
 800e4d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4d4:	4680      	mov	r8, r0
 800e4d6:	4689      	mov	r9, r1
 800e4d8:	4650      	mov	r0, sl
 800e4da:	4659      	mov	r1, fp
 800e4dc:	f7f2 f830 	bl	8000540 <__aeabi_dmul>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4640      	mov	r0, r8
 800e4e6:	4649      	mov	r1, r9
 800e4e8:	f7f1 fe74 	bl	80001d4 <__adddf3>
 800e4ec:	4632      	mov	r2, r6
 800e4ee:	463b      	mov	r3, r7
 800e4f0:	4680      	mov	r8, r0
 800e4f2:	4689      	mov	r9, r1
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	f7f2 f822 	bl	8000540 <__aeabi_dmul>
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	4604      	mov	r4, r0
 800e500:	460d      	mov	r5, r1
 800e502:	4602      	mov	r2, r0
 800e504:	4649      	mov	r1, r9
 800e506:	4640      	mov	r0, r8
 800e508:	f7f1 fe64 	bl	80001d4 <__adddf3>
 800e50c:	4b19      	ldr	r3, [pc, #100]	; (800e574 <__ieee754_pow+0x3fc>)
 800e50e:	4299      	cmp	r1, r3
 800e510:	ec45 4b19 	vmov	d9, r4, r5
 800e514:	4606      	mov	r6, r0
 800e516:	460f      	mov	r7, r1
 800e518:	468b      	mov	fp, r1
 800e51a:	f340 82f1 	ble.w	800eb00 <__ieee754_pow+0x988>
 800e51e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e522:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e526:	4303      	orrs	r3, r0
 800e528:	f000 81e4 	beq.w	800e8f4 <__ieee754_pow+0x77c>
 800e52c:	ec51 0b18 	vmov	r0, r1, d8
 800e530:	2200      	movs	r2, #0
 800e532:	2300      	movs	r3, #0
 800e534:	f7f2 fa76 	bl	8000a24 <__aeabi_dcmplt>
 800e538:	3800      	subs	r0, #0
 800e53a:	bf18      	it	ne
 800e53c:	2001      	movne	r0, #1
 800e53e:	e72b      	b.n	800e398 <__ieee754_pow+0x220>
 800e540:	60000000 	.word	0x60000000
 800e544:	3ff71547 	.word	0x3ff71547
 800e548:	f85ddf44 	.word	0xf85ddf44
 800e54c:	3e54ae0b 	.word	0x3e54ae0b
 800e550:	55555555 	.word	0x55555555
 800e554:	3fd55555 	.word	0x3fd55555
 800e558:	652b82fe 	.word	0x652b82fe
 800e55c:	3ff71547 	.word	0x3ff71547
 800e560:	00000000 	.word	0x00000000
 800e564:	bff00000 	.word	0xbff00000
 800e568:	3ff00000 	.word	0x3ff00000
 800e56c:	3fd00000 	.word	0x3fd00000
 800e570:	3fe00000 	.word	0x3fe00000
 800e574:	408fffff 	.word	0x408fffff
 800e578:	4bd5      	ldr	r3, [pc, #852]	; (800e8d0 <__ieee754_pow+0x758>)
 800e57a:	402b      	ands	r3, r5
 800e57c:	2200      	movs	r2, #0
 800e57e:	b92b      	cbnz	r3, 800e58c <__ieee754_pow+0x414>
 800e580:	4bd4      	ldr	r3, [pc, #848]	; (800e8d4 <__ieee754_pow+0x75c>)
 800e582:	f7f1 ffdd 	bl	8000540 <__aeabi_dmul>
 800e586:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e58a:	460c      	mov	r4, r1
 800e58c:	1523      	asrs	r3, r4, #20
 800e58e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e592:	4413      	add	r3, r2
 800e594:	9305      	str	r3, [sp, #20]
 800e596:	4bd0      	ldr	r3, [pc, #832]	; (800e8d8 <__ieee754_pow+0x760>)
 800e598:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e59c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e5a0:	429c      	cmp	r4, r3
 800e5a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e5a6:	dd08      	ble.n	800e5ba <__ieee754_pow+0x442>
 800e5a8:	4bcc      	ldr	r3, [pc, #816]	; (800e8dc <__ieee754_pow+0x764>)
 800e5aa:	429c      	cmp	r4, r3
 800e5ac:	f340 8162 	ble.w	800e874 <__ieee754_pow+0x6fc>
 800e5b0:	9b05      	ldr	r3, [sp, #20]
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	9305      	str	r3, [sp, #20]
 800e5b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e5ba:	2400      	movs	r4, #0
 800e5bc:	00e3      	lsls	r3, r4, #3
 800e5be:	9307      	str	r3, [sp, #28]
 800e5c0:	4bc7      	ldr	r3, [pc, #796]	; (800e8e0 <__ieee754_pow+0x768>)
 800e5c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e5c6:	ed93 7b00 	vldr	d7, [r3]
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	ec53 2b17 	vmov	r2, r3, d7
 800e5d0:	eeb0 9a47 	vmov.f32	s18, s14
 800e5d4:	eef0 9a67 	vmov.f32	s19, s15
 800e5d8:	4682      	mov	sl, r0
 800e5da:	f7f1 fdf9 	bl	80001d0 <__aeabi_dsub>
 800e5de:	4652      	mov	r2, sl
 800e5e0:	4606      	mov	r6, r0
 800e5e2:	460f      	mov	r7, r1
 800e5e4:	462b      	mov	r3, r5
 800e5e6:	ec51 0b19 	vmov	r0, r1, d9
 800e5ea:	f7f1 fdf3 	bl	80001d4 <__adddf3>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	49bb      	ldr	r1, [pc, #748]	; (800e8e4 <__ieee754_pow+0x76c>)
 800e5f6:	f7f2 f8cd 	bl	8000794 <__aeabi_ddiv>
 800e5fa:	ec41 0b1a 	vmov	d10, r0, r1
 800e5fe:	4602      	mov	r2, r0
 800e600:	460b      	mov	r3, r1
 800e602:	4630      	mov	r0, r6
 800e604:	4639      	mov	r1, r7
 800e606:	f7f1 ff9b 	bl	8000540 <__aeabi_dmul>
 800e60a:	2300      	movs	r3, #0
 800e60c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e610:	9302      	str	r3, [sp, #8]
 800e612:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e616:	46ab      	mov	fp, r5
 800e618:	106d      	asrs	r5, r5, #1
 800e61a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e61e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e622:	ec41 0b18 	vmov	d8, r0, r1
 800e626:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e62a:	2200      	movs	r2, #0
 800e62c:	4640      	mov	r0, r8
 800e62e:	4649      	mov	r1, r9
 800e630:	4614      	mov	r4, r2
 800e632:	461d      	mov	r5, r3
 800e634:	f7f1 ff84 	bl	8000540 <__aeabi_dmul>
 800e638:	4602      	mov	r2, r0
 800e63a:	460b      	mov	r3, r1
 800e63c:	4630      	mov	r0, r6
 800e63e:	4639      	mov	r1, r7
 800e640:	f7f1 fdc6 	bl	80001d0 <__aeabi_dsub>
 800e644:	ec53 2b19 	vmov	r2, r3, d9
 800e648:	4606      	mov	r6, r0
 800e64a:	460f      	mov	r7, r1
 800e64c:	4620      	mov	r0, r4
 800e64e:	4629      	mov	r1, r5
 800e650:	f7f1 fdbe 	bl	80001d0 <__aeabi_dsub>
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	4650      	mov	r0, sl
 800e65a:	4659      	mov	r1, fp
 800e65c:	f7f1 fdb8 	bl	80001d0 <__aeabi_dsub>
 800e660:	4642      	mov	r2, r8
 800e662:	464b      	mov	r3, r9
 800e664:	f7f1 ff6c 	bl	8000540 <__aeabi_dmul>
 800e668:	4602      	mov	r2, r0
 800e66a:	460b      	mov	r3, r1
 800e66c:	4630      	mov	r0, r6
 800e66e:	4639      	mov	r1, r7
 800e670:	f7f1 fdae 	bl	80001d0 <__aeabi_dsub>
 800e674:	ec53 2b1a 	vmov	r2, r3, d10
 800e678:	f7f1 ff62 	bl	8000540 <__aeabi_dmul>
 800e67c:	ec53 2b18 	vmov	r2, r3, d8
 800e680:	ec41 0b19 	vmov	d9, r0, r1
 800e684:	ec51 0b18 	vmov	r0, r1, d8
 800e688:	f7f1 ff5a 	bl	8000540 <__aeabi_dmul>
 800e68c:	a37c      	add	r3, pc, #496	; (adr r3, 800e880 <__ieee754_pow+0x708>)
 800e68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e692:	4604      	mov	r4, r0
 800e694:	460d      	mov	r5, r1
 800e696:	f7f1 ff53 	bl	8000540 <__aeabi_dmul>
 800e69a:	a37b      	add	r3, pc, #492	; (adr r3, 800e888 <__ieee754_pow+0x710>)
 800e69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a0:	f7f1 fd98 	bl	80001d4 <__adddf3>
 800e6a4:	4622      	mov	r2, r4
 800e6a6:	462b      	mov	r3, r5
 800e6a8:	f7f1 ff4a 	bl	8000540 <__aeabi_dmul>
 800e6ac:	a378      	add	r3, pc, #480	; (adr r3, 800e890 <__ieee754_pow+0x718>)
 800e6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b2:	f7f1 fd8f 	bl	80001d4 <__adddf3>
 800e6b6:	4622      	mov	r2, r4
 800e6b8:	462b      	mov	r3, r5
 800e6ba:	f7f1 ff41 	bl	8000540 <__aeabi_dmul>
 800e6be:	a376      	add	r3, pc, #472	; (adr r3, 800e898 <__ieee754_pow+0x720>)
 800e6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c4:	f7f1 fd86 	bl	80001d4 <__adddf3>
 800e6c8:	4622      	mov	r2, r4
 800e6ca:	462b      	mov	r3, r5
 800e6cc:	f7f1 ff38 	bl	8000540 <__aeabi_dmul>
 800e6d0:	a373      	add	r3, pc, #460	; (adr r3, 800e8a0 <__ieee754_pow+0x728>)
 800e6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d6:	f7f1 fd7d 	bl	80001d4 <__adddf3>
 800e6da:	4622      	mov	r2, r4
 800e6dc:	462b      	mov	r3, r5
 800e6de:	f7f1 ff2f 	bl	8000540 <__aeabi_dmul>
 800e6e2:	a371      	add	r3, pc, #452	; (adr r3, 800e8a8 <__ieee754_pow+0x730>)
 800e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e8:	f7f1 fd74 	bl	80001d4 <__adddf3>
 800e6ec:	4622      	mov	r2, r4
 800e6ee:	4606      	mov	r6, r0
 800e6f0:	460f      	mov	r7, r1
 800e6f2:	462b      	mov	r3, r5
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	4629      	mov	r1, r5
 800e6f8:	f7f1 ff22 	bl	8000540 <__aeabi_dmul>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	4630      	mov	r0, r6
 800e702:	4639      	mov	r1, r7
 800e704:	f7f1 ff1c 	bl	8000540 <__aeabi_dmul>
 800e708:	4642      	mov	r2, r8
 800e70a:	4604      	mov	r4, r0
 800e70c:	460d      	mov	r5, r1
 800e70e:	464b      	mov	r3, r9
 800e710:	ec51 0b18 	vmov	r0, r1, d8
 800e714:	f7f1 fd5e 	bl	80001d4 <__adddf3>
 800e718:	ec53 2b19 	vmov	r2, r3, d9
 800e71c:	f7f1 ff10 	bl	8000540 <__aeabi_dmul>
 800e720:	4622      	mov	r2, r4
 800e722:	462b      	mov	r3, r5
 800e724:	f7f1 fd56 	bl	80001d4 <__adddf3>
 800e728:	4642      	mov	r2, r8
 800e72a:	4682      	mov	sl, r0
 800e72c:	468b      	mov	fp, r1
 800e72e:	464b      	mov	r3, r9
 800e730:	4640      	mov	r0, r8
 800e732:	4649      	mov	r1, r9
 800e734:	f7f1 ff04 	bl	8000540 <__aeabi_dmul>
 800e738:	4b6b      	ldr	r3, [pc, #428]	; (800e8e8 <__ieee754_pow+0x770>)
 800e73a:	2200      	movs	r2, #0
 800e73c:	4606      	mov	r6, r0
 800e73e:	460f      	mov	r7, r1
 800e740:	f7f1 fd48 	bl	80001d4 <__adddf3>
 800e744:	4652      	mov	r2, sl
 800e746:	465b      	mov	r3, fp
 800e748:	f7f1 fd44 	bl	80001d4 <__adddf3>
 800e74c:	2000      	movs	r0, #0
 800e74e:	4604      	mov	r4, r0
 800e750:	460d      	mov	r5, r1
 800e752:	4602      	mov	r2, r0
 800e754:	460b      	mov	r3, r1
 800e756:	4640      	mov	r0, r8
 800e758:	4649      	mov	r1, r9
 800e75a:	f7f1 fef1 	bl	8000540 <__aeabi_dmul>
 800e75e:	4b62      	ldr	r3, [pc, #392]	; (800e8e8 <__ieee754_pow+0x770>)
 800e760:	4680      	mov	r8, r0
 800e762:	4689      	mov	r9, r1
 800e764:	2200      	movs	r2, #0
 800e766:	4620      	mov	r0, r4
 800e768:	4629      	mov	r1, r5
 800e76a:	f7f1 fd31 	bl	80001d0 <__aeabi_dsub>
 800e76e:	4632      	mov	r2, r6
 800e770:	463b      	mov	r3, r7
 800e772:	f7f1 fd2d 	bl	80001d0 <__aeabi_dsub>
 800e776:	4602      	mov	r2, r0
 800e778:	460b      	mov	r3, r1
 800e77a:	4650      	mov	r0, sl
 800e77c:	4659      	mov	r1, fp
 800e77e:	f7f1 fd27 	bl	80001d0 <__aeabi_dsub>
 800e782:	ec53 2b18 	vmov	r2, r3, d8
 800e786:	f7f1 fedb 	bl	8000540 <__aeabi_dmul>
 800e78a:	4622      	mov	r2, r4
 800e78c:	4606      	mov	r6, r0
 800e78e:	460f      	mov	r7, r1
 800e790:	462b      	mov	r3, r5
 800e792:	ec51 0b19 	vmov	r0, r1, d9
 800e796:	f7f1 fed3 	bl	8000540 <__aeabi_dmul>
 800e79a:	4602      	mov	r2, r0
 800e79c:	460b      	mov	r3, r1
 800e79e:	4630      	mov	r0, r6
 800e7a0:	4639      	mov	r1, r7
 800e7a2:	f7f1 fd17 	bl	80001d4 <__adddf3>
 800e7a6:	4606      	mov	r6, r0
 800e7a8:	460f      	mov	r7, r1
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	4640      	mov	r0, r8
 800e7b0:	4649      	mov	r1, r9
 800e7b2:	f7f1 fd0f 	bl	80001d4 <__adddf3>
 800e7b6:	a33e      	add	r3, pc, #248	; (adr r3, 800e8b0 <__ieee754_pow+0x738>)
 800e7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7bc:	2000      	movs	r0, #0
 800e7be:	4604      	mov	r4, r0
 800e7c0:	460d      	mov	r5, r1
 800e7c2:	f7f1 febd 	bl	8000540 <__aeabi_dmul>
 800e7c6:	4642      	mov	r2, r8
 800e7c8:	ec41 0b18 	vmov	d8, r0, r1
 800e7cc:	464b      	mov	r3, r9
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	4629      	mov	r1, r5
 800e7d2:	f7f1 fcfd 	bl	80001d0 <__aeabi_dsub>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	460b      	mov	r3, r1
 800e7da:	4630      	mov	r0, r6
 800e7dc:	4639      	mov	r1, r7
 800e7de:	f7f1 fcf7 	bl	80001d0 <__aeabi_dsub>
 800e7e2:	a335      	add	r3, pc, #212	; (adr r3, 800e8b8 <__ieee754_pow+0x740>)
 800e7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e8:	f7f1 feaa 	bl	8000540 <__aeabi_dmul>
 800e7ec:	a334      	add	r3, pc, #208	; (adr r3, 800e8c0 <__ieee754_pow+0x748>)
 800e7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f2:	4606      	mov	r6, r0
 800e7f4:	460f      	mov	r7, r1
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	4629      	mov	r1, r5
 800e7fa:	f7f1 fea1 	bl	8000540 <__aeabi_dmul>
 800e7fe:	4602      	mov	r2, r0
 800e800:	460b      	mov	r3, r1
 800e802:	4630      	mov	r0, r6
 800e804:	4639      	mov	r1, r7
 800e806:	f7f1 fce5 	bl	80001d4 <__adddf3>
 800e80a:	9a07      	ldr	r2, [sp, #28]
 800e80c:	4b37      	ldr	r3, [pc, #220]	; (800e8ec <__ieee754_pow+0x774>)
 800e80e:	4413      	add	r3, r2
 800e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e814:	f7f1 fcde 	bl	80001d4 <__adddf3>
 800e818:	4682      	mov	sl, r0
 800e81a:	9805      	ldr	r0, [sp, #20]
 800e81c:	468b      	mov	fp, r1
 800e81e:	f7f1 fe25 	bl	800046c <__aeabi_i2d>
 800e822:	9a07      	ldr	r2, [sp, #28]
 800e824:	4b32      	ldr	r3, [pc, #200]	; (800e8f0 <__ieee754_pow+0x778>)
 800e826:	4413      	add	r3, r2
 800e828:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e82c:	4606      	mov	r6, r0
 800e82e:	460f      	mov	r7, r1
 800e830:	4652      	mov	r2, sl
 800e832:	465b      	mov	r3, fp
 800e834:	ec51 0b18 	vmov	r0, r1, d8
 800e838:	f7f1 fccc 	bl	80001d4 <__adddf3>
 800e83c:	4642      	mov	r2, r8
 800e83e:	464b      	mov	r3, r9
 800e840:	f7f1 fcc8 	bl	80001d4 <__adddf3>
 800e844:	4632      	mov	r2, r6
 800e846:	463b      	mov	r3, r7
 800e848:	f7f1 fcc4 	bl	80001d4 <__adddf3>
 800e84c:	2000      	movs	r0, #0
 800e84e:	4632      	mov	r2, r6
 800e850:	463b      	mov	r3, r7
 800e852:	4604      	mov	r4, r0
 800e854:	460d      	mov	r5, r1
 800e856:	f7f1 fcbb 	bl	80001d0 <__aeabi_dsub>
 800e85a:	4642      	mov	r2, r8
 800e85c:	464b      	mov	r3, r9
 800e85e:	f7f1 fcb7 	bl	80001d0 <__aeabi_dsub>
 800e862:	ec53 2b18 	vmov	r2, r3, d8
 800e866:	f7f1 fcb3 	bl	80001d0 <__aeabi_dsub>
 800e86a:	4602      	mov	r2, r0
 800e86c:	460b      	mov	r3, r1
 800e86e:	4650      	mov	r0, sl
 800e870:	4659      	mov	r1, fp
 800e872:	e610      	b.n	800e496 <__ieee754_pow+0x31e>
 800e874:	2401      	movs	r4, #1
 800e876:	e6a1      	b.n	800e5bc <__ieee754_pow+0x444>
 800e878:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e8c8 <__ieee754_pow+0x750>
 800e87c:	e617      	b.n	800e4ae <__ieee754_pow+0x336>
 800e87e:	bf00      	nop
 800e880:	4a454eef 	.word	0x4a454eef
 800e884:	3fca7e28 	.word	0x3fca7e28
 800e888:	93c9db65 	.word	0x93c9db65
 800e88c:	3fcd864a 	.word	0x3fcd864a
 800e890:	a91d4101 	.word	0xa91d4101
 800e894:	3fd17460 	.word	0x3fd17460
 800e898:	518f264d 	.word	0x518f264d
 800e89c:	3fd55555 	.word	0x3fd55555
 800e8a0:	db6fabff 	.word	0xdb6fabff
 800e8a4:	3fdb6db6 	.word	0x3fdb6db6
 800e8a8:	33333303 	.word	0x33333303
 800e8ac:	3fe33333 	.word	0x3fe33333
 800e8b0:	e0000000 	.word	0xe0000000
 800e8b4:	3feec709 	.word	0x3feec709
 800e8b8:	dc3a03fd 	.word	0xdc3a03fd
 800e8bc:	3feec709 	.word	0x3feec709
 800e8c0:	145b01f5 	.word	0x145b01f5
 800e8c4:	be3e2fe0 	.word	0xbe3e2fe0
 800e8c8:	00000000 	.word	0x00000000
 800e8cc:	3ff00000 	.word	0x3ff00000
 800e8d0:	7ff00000 	.word	0x7ff00000
 800e8d4:	43400000 	.word	0x43400000
 800e8d8:	0003988e 	.word	0x0003988e
 800e8dc:	000bb679 	.word	0x000bb679
 800e8e0:	08010d08 	.word	0x08010d08
 800e8e4:	3ff00000 	.word	0x3ff00000
 800e8e8:	40080000 	.word	0x40080000
 800e8ec:	08010d28 	.word	0x08010d28
 800e8f0:	08010d18 	.word	0x08010d18
 800e8f4:	a3b5      	add	r3, pc, #724	; (adr r3, 800ebcc <__ieee754_pow+0xa54>)
 800e8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fa:	4640      	mov	r0, r8
 800e8fc:	4649      	mov	r1, r9
 800e8fe:	f7f1 fc69 	bl	80001d4 <__adddf3>
 800e902:	4622      	mov	r2, r4
 800e904:	ec41 0b1a 	vmov	d10, r0, r1
 800e908:	462b      	mov	r3, r5
 800e90a:	4630      	mov	r0, r6
 800e90c:	4639      	mov	r1, r7
 800e90e:	f7f1 fc5f 	bl	80001d0 <__aeabi_dsub>
 800e912:	4602      	mov	r2, r0
 800e914:	460b      	mov	r3, r1
 800e916:	ec51 0b1a 	vmov	r0, r1, d10
 800e91a:	f7f2 f8a1 	bl	8000a60 <__aeabi_dcmpgt>
 800e91e:	2800      	cmp	r0, #0
 800e920:	f47f ae04 	bne.w	800e52c <__ieee754_pow+0x3b4>
 800e924:	4aa4      	ldr	r2, [pc, #656]	; (800ebb8 <__ieee754_pow+0xa40>)
 800e926:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e92a:	4293      	cmp	r3, r2
 800e92c:	f340 8108 	ble.w	800eb40 <__ieee754_pow+0x9c8>
 800e930:	151b      	asrs	r3, r3, #20
 800e932:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e936:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e93a:	fa4a f303 	asr.w	r3, sl, r3
 800e93e:	445b      	add	r3, fp
 800e940:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e944:	4e9d      	ldr	r6, [pc, #628]	; (800ebbc <__ieee754_pow+0xa44>)
 800e946:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e94a:	4116      	asrs	r6, r2
 800e94c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e950:	2000      	movs	r0, #0
 800e952:	ea23 0106 	bic.w	r1, r3, r6
 800e956:	f1c2 0214 	rsb	r2, r2, #20
 800e95a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e95e:	fa4a fa02 	asr.w	sl, sl, r2
 800e962:	f1bb 0f00 	cmp.w	fp, #0
 800e966:	4602      	mov	r2, r0
 800e968:	460b      	mov	r3, r1
 800e96a:	4620      	mov	r0, r4
 800e96c:	4629      	mov	r1, r5
 800e96e:	bfb8      	it	lt
 800e970:	f1ca 0a00 	rsblt	sl, sl, #0
 800e974:	f7f1 fc2c 	bl	80001d0 <__aeabi_dsub>
 800e978:	ec41 0b19 	vmov	d9, r0, r1
 800e97c:	4642      	mov	r2, r8
 800e97e:	464b      	mov	r3, r9
 800e980:	ec51 0b19 	vmov	r0, r1, d9
 800e984:	f7f1 fc26 	bl	80001d4 <__adddf3>
 800e988:	a37b      	add	r3, pc, #492	; (adr r3, 800eb78 <__ieee754_pow+0xa00>)
 800e98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98e:	2000      	movs	r0, #0
 800e990:	4604      	mov	r4, r0
 800e992:	460d      	mov	r5, r1
 800e994:	f7f1 fdd4 	bl	8000540 <__aeabi_dmul>
 800e998:	ec53 2b19 	vmov	r2, r3, d9
 800e99c:	4606      	mov	r6, r0
 800e99e:	460f      	mov	r7, r1
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	4629      	mov	r1, r5
 800e9a4:	f7f1 fc14 	bl	80001d0 <__aeabi_dsub>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	4640      	mov	r0, r8
 800e9ae:	4649      	mov	r1, r9
 800e9b0:	f7f1 fc0e 	bl	80001d0 <__aeabi_dsub>
 800e9b4:	a372      	add	r3, pc, #456	; (adr r3, 800eb80 <__ieee754_pow+0xa08>)
 800e9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ba:	f7f1 fdc1 	bl	8000540 <__aeabi_dmul>
 800e9be:	a372      	add	r3, pc, #456	; (adr r3, 800eb88 <__ieee754_pow+0xa10>)
 800e9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c4:	4680      	mov	r8, r0
 800e9c6:	4689      	mov	r9, r1
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	4629      	mov	r1, r5
 800e9cc:	f7f1 fdb8 	bl	8000540 <__aeabi_dmul>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	4640      	mov	r0, r8
 800e9d6:	4649      	mov	r1, r9
 800e9d8:	f7f1 fbfc 	bl	80001d4 <__adddf3>
 800e9dc:	4604      	mov	r4, r0
 800e9de:	460d      	mov	r5, r1
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	4639      	mov	r1, r7
 800e9e8:	f7f1 fbf4 	bl	80001d4 <__adddf3>
 800e9ec:	4632      	mov	r2, r6
 800e9ee:	463b      	mov	r3, r7
 800e9f0:	4680      	mov	r8, r0
 800e9f2:	4689      	mov	r9, r1
 800e9f4:	f7f1 fbec 	bl	80001d0 <__aeabi_dsub>
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	4629      	mov	r1, r5
 800ea00:	f7f1 fbe6 	bl	80001d0 <__aeabi_dsub>
 800ea04:	4642      	mov	r2, r8
 800ea06:	4606      	mov	r6, r0
 800ea08:	460f      	mov	r7, r1
 800ea0a:	464b      	mov	r3, r9
 800ea0c:	4640      	mov	r0, r8
 800ea0e:	4649      	mov	r1, r9
 800ea10:	f7f1 fd96 	bl	8000540 <__aeabi_dmul>
 800ea14:	a35e      	add	r3, pc, #376	; (adr r3, 800eb90 <__ieee754_pow+0xa18>)
 800ea16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	460d      	mov	r5, r1
 800ea1e:	f7f1 fd8f 	bl	8000540 <__aeabi_dmul>
 800ea22:	a35d      	add	r3, pc, #372	; (adr r3, 800eb98 <__ieee754_pow+0xa20>)
 800ea24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea28:	f7f1 fbd2 	bl	80001d0 <__aeabi_dsub>
 800ea2c:	4622      	mov	r2, r4
 800ea2e:	462b      	mov	r3, r5
 800ea30:	f7f1 fd86 	bl	8000540 <__aeabi_dmul>
 800ea34:	a35a      	add	r3, pc, #360	; (adr r3, 800eba0 <__ieee754_pow+0xa28>)
 800ea36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3a:	f7f1 fbcb 	bl	80001d4 <__adddf3>
 800ea3e:	4622      	mov	r2, r4
 800ea40:	462b      	mov	r3, r5
 800ea42:	f7f1 fd7d 	bl	8000540 <__aeabi_dmul>
 800ea46:	a358      	add	r3, pc, #352	; (adr r3, 800eba8 <__ieee754_pow+0xa30>)
 800ea48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4c:	f7f1 fbc0 	bl	80001d0 <__aeabi_dsub>
 800ea50:	4622      	mov	r2, r4
 800ea52:	462b      	mov	r3, r5
 800ea54:	f7f1 fd74 	bl	8000540 <__aeabi_dmul>
 800ea58:	a355      	add	r3, pc, #340	; (adr r3, 800ebb0 <__ieee754_pow+0xa38>)
 800ea5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5e:	f7f1 fbb9 	bl	80001d4 <__adddf3>
 800ea62:	4622      	mov	r2, r4
 800ea64:	462b      	mov	r3, r5
 800ea66:	f7f1 fd6b 	bl	8000540 <__aeabi_dmul>
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	4640      	mov	r0, r8
 800ea70:	4649      	mov	r1, r9
 800ea72:	f7f1 fbad 	bl	80001d0 <__aeabi_dsub>
 800ea76:	4604      	mov	r4, r0
 800ea78:	460d      	mov	r5, r1
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	4640      	mov	r0, r8
 800ea80:	4649      	mov	r1, r9
 800ea82:	f7f1 fd5d 	bl	8000540 <__aeabi_dmul>
 800ea86:	2200      	movs	r2, #0
 800ea88:	ec41 0b19 	vmov	d9, r0, r1
 800ea8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ea90:	4620      	mov	r0, r4
 800ea92:	4629      	mov	r1, r5
 800ea94:	f7f1 fb9c 	bl	80001d0 <__aeabi_dsub>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	ec51 0b19 	vmov	r0, r1, d9
 800eaa0:	f7f1 fe78 	bl	8000794 <__aeabi_ddiv>
 800eaa4:	4632      	mov	r2, r6
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	460d      	mov	r5, r1
 800eaaa:	463b      	mov	r3, r7
 800eaac:	4640      	mov	r0, r8
 800eaae:	4649      	mov	r1, r9
 800eab0:	f7f1 fd46 	bl	8000540 <__aeabi_dmul>
 800eab4:	4632      	mov	r2, r6
 800eab6:	463b      	mov	r3, r7
 800eab8:	f7f1 fb8c 	bl	80001d4 <__adddf3>
 800eabc:	4602      	mov	r2, r0
 800eabe:	460b      	mov	r3, r1
 800eac0:	4620      	mov	r0, r4
 800eac2:	4629      	mov	r1, r5
 800eac4:	f7f1 fb84 	bl	80001d0 <__aeabi_dsub>
 800eac8:	4642      	mov	r2, r8
 800eaca:	464b      	mov	r3, r9
 800eacc:	f7f1 fb80 	bl	80001d0 <__aeabi_dsub>
 800ead0:	460b      	mov	r3, r1
 800ead2:	4602      	mov	r2, r0
 800ead4:	493a      	ldr	r1, [pc, #232]	; (800ebc0 <__ieee754_pow+0xa48>)
 800ead6:	2000      	movs	r0, #0
 800ead8:	f7f1 fb7a 	bl	80001d0 <__aeabi_dsub>
 800eadc:	ec41 0b10 	vmov	d0, r0, r1
 800eae0:	ee10 3a90 	vmov	r3, s1
 800eae4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800eae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eaec:	da2b      	bge.n	800eb46 <__ieee754_pow+0x9ce>
 800eaee:	4650      	mov	r0, sl
 800eaf0:	f001 ff9a 	bl	8010a28 <scalbn>
 800eaf4:	ec51 0b10 	vmov	r0, r1, d0
 800eaf8:	ec53 2b18 	vmov	r2, r3, d8
 800eafc:	f7ff bbed 	b.w	800e2da <__ieee754_pow+0x162>
 800eb00:	4b30      	ldr	r3, [pc, #192]	; (800ebc4 <__ieee754_pow+0xa4c>)
 800eb02:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800eb06:	429e      	cmp	r6, r3
 800eb08:	f77f af0c 	ble.w	800e924 <__ieee754_pow+0x7ac>
 800eb0c:	4b2e      	ldr	r3, [pc, #184]	; (800ebc8 <__ieee754_pow+0xa50>)
 800eb0e:	440b      	add	r3, r1
 800eb10:	4303      	orrs	r3, r0
 800eb12:	d009      	beq.n	800eb28 <__ieee754_pow+0x9b0>
 800eb14:	ec51 0b18 	vmov	r0, r1, d8
 800eb18:	2200      	movs	r2, #0
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	f7f1 ff82 	bl	8000a24 <__aeabi_dcmplt>
 800eb20:	3800      	subs	r0, #0
 800eb22:	bf18      	it	ne
 800eb24:	2001      	movne	r0, #1
 800eb26:	e447      	b.n	800e3b8 <__ieee754_pow+0x240>
 800eb28:	4622      	mov	r2, r4
 800eb2a:	462b      	mov	r3, r5
 800eb2c:	f7f1 fb50 	bl	80001d0 <__aeabi_dsub>
 800eb30:	4642      	mov	r2, r8
 800eb32:	464b      	mov	r3, r9
 800eb34:	f7f1 ff8a 	bl	8000a4c <__aeabi_dcmpge>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	f43f aef3 	beq.w	800e924 <__ieee754_pow+0x7ac>
 800eb3e:	e7e9      	b.n	800eb14 <__ieee754_pow+0x99c>
 800eb40:	f04f 0a00 	mov.w	sl, #0
 800eb44:	e71a      	b.n	800e97c <__ieee754_pow+0x804>
 800eb46:	ec51 0b10 	vmov	r0, r1, d0
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	e7d4      	b.n	800eaf8 <__ieee754_pow+0x980>
 800eb4e:	491c      	ldr	r1, [pc, #112]	; (800ebc0 <__ieee754_pow+0xa48>)
 800eb50:	2000      	movs	r0, #0
 800eb52:	f7ff bb30 	b.w	800e1b6 <__ieee754_pow+0x3e>
 800eb56:	2000      	movs	r0, #0
 800eb58:	2100      	movs	r1, #0
 800eb5a:	f7ff bb2c 	b.w	800e1b6 <__ieee754_pow+0x3e>
 800eb5e:	4630      	mov	r0, r6
 800eb60:	4639      	mov	r1, r7
 800eb62:	f7ff bb28 	b.w	800e1b6 <__ieee754_pow+0x3e>
 800eb66:	9204      	str	r2, [sp, #16]
 800eb68:	f7ff bb7a 	b.w	800e260 <__ieee754_pow+0xe8>
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	f7ff bb64 	b.w	800e23a <__ieee754_pow+0xc2>
 800eb72:	bf00      	nop
 800eb74:	f3af 8000 	nop.w
 800eb78:	00000000 	.word	0x00000000
 800eb7c:	3fe62e43 	.word	0x3fe62e43
 800eb80:	fefa39ef 	.word	0xfefa39ef
 800eb84:	3fe62e42 	.word	0x3fe62e42
 800eb88:	0ca86c39 	.word	0x0ca86c39
 800eb8c:	be205c61 	.word	0xbe205c61
 800eb90:	72bea4d0 	.word	0x72bea4d0
 800eb94:	3e663769 	.word	0x3e663769
 800eb98:	c5d26bf1 	.word	0xc5d26bf1
 800eb9c:	3ebbbd41 	.word	0x3ebbbd41
 800eba0:	af25de2c 	.word	0xaf25de2c
 800eba4:	3f11566a 	.word	0x3f11566a
 800eba8:	16bebd93 	.word	0x16bebd93
 800ebac:	3f66c16c 	.word	0x3f66c16c
 800ebb0:	5555553e 	.word	0x5555553e
 800ebb4:	3fc55555 	.word	0x3fc55555
 800ebb8:	3fe00000 	.word	0x3fe00000
 800ebbc:	000fffff 	.word	0x000fffff
 800ebc0:	3ff00000 	.word	0x3ff00000
 800ebc4:	4090cbff 	.word	0x4090cbff
 800ebc8:	3f6f3400 	.word	0x3f6f3400
 800ebcc:	652b82fe 	.word	0x652b82fe
 800ebd0:	3c971547 	.word	0x3c971547
 800ebd4:	00000000 	.word	0x00000000

0800ebd8 <__ieee754_rem_pio2>:
 800ebd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebdc:	ed2d 8b02 	vpush	{d8}
 800ebe0:	ec55 4b10 	vmov	r4, r5, d0
 800ebe4:	4bca      	ldr	r3, [pc, #808]	; (800ef10 <__ieee754_rem_pio2+0x338>)
 800ebe6:	b08b      	sub	sp, #44	; 0x2c
 800ebe8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ebec:	4598      	cmp	r8, r3
 800ebee:	4682      	mov	sl, r0
 800ebf0:	9502      	str	r5, [sp, #8]
 800ebf2:	dc08      	bgt.n	800ec06 <__ieee754_rem_pio2+0x2e>
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	ed80 0b00 	vstr	d0, [r0]
 800ebfc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ec00:	f04f 0b00 	mov.w	fp, #0
 800ec04:	e028      	b.n	800ec58 <__ieee754_rem_pio2+0x80>
 800ec06:	4bc3      	ldr	r3, [pc, #780]	; (800ef14 <__ieee754_rem_pio2+0x33c>)
 800ec08:	4598      	cmp	r8, r3
 800ec0a:	dc78      	bgt.n	800ecfe <__ieee754_rem_pio2+0x126>
 800ec0c:	9b02      	ldr	r3, [sp, #8]
 800ec0e:	4ec2      	ldr	r6, [pc, #776]	; (800ef18 <__ieee754_rem_pio2+0x340>)
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	ee10 0a10 	vmov	r0, s0
 800ec16:	a3b0      	add	r3, pc, #704	; (adr r3, 800eed8 <__ieee754_rem_pio2+0x300>)
 800ec18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1c:	4629      	mov	r1, r5
 800ec1e:	dd39      	ble.n	800ec94 <__ieee754_rem_pio2+0xbc>
 800ec20:	f7f1 fad6 	bl	80001d0 <__aeabi_dsub>
 800ec24:	45b0      	cmp	r8, r6
 800ec26:	4604      	mov	r4, r0
 800ec28:	460d      	mov	r5, r1
 800ec2a:	d01b      	beq.n	800ec64 <__ieee754_rem_pio2+0x8c>
 800ec2c:	a3ac      	add	r3, pc, #688	; (adr r3, 800eee0 <__ieee754_rem_pio2+0x308>)
 800ec2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec32:	f7f1 facd 	bl	80001d0 <__aeabi_dsub>
 800ec36:	4602      	mov	r2, r0
 800ec38:	460b      	mov	r3, r1
 800ec3a:	e9ca 2300 	strd	r2, r3, [sl]
 800ec3e:	4620      	mov	r0, r4
 800ec40:	4629      	mov	r1, r5
 800ec42:	f7f1 fac5 	bl	80001d0 <__aeabi_dsub>
 800ec46:	a3a6      	add	r3, pc, #664	; (adr r3, 800eee0 <__ieee754_rem_pio2+0x308>)
 800ec48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4c:	f7f1 fac0 	bl	80001d0 <__aeabi_dsub>
 800ec50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec54:	f04f 0b01 	mov.w	fp, #1
 800ec58:	4658      	mov	r0, fp
 800ec5a:	b00b      	add	sp, #44	; 0x2c
 800ec5c:	ecbd 8b02 	vpop	{d8}
 800ec60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec64:	a3a0      	add	r3, pc, #640	; (adr r3, 800eee8 <__ieee754_rem_pio2+0x310>)
 800ec66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6a:	f7f1 fab1 	bl	80001d0 <__aeabi_dsub>
 800ec6e:	a3a0      	add	r3, pc, #640	; (adr r3, 800eef0 <__ieee754_rem_pio2+0x318>)
 800ec70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec74:	4604      	mov	r4, r0
 800ec76:	460d      	mov	r5, r1
 800ec78:	f7f1 faaa 	bl	80001d0 <__aeabi_dsub>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	460b      	mov	r3, r1
 800ec80:	e9ca 2300 	strd	r2, r3, [sl]
 800ec84:	4620      	mov	r0, r4
 800ec86:	4629      	mov	r1, r5
 800ec88:	f7f1 faa2 	bl	80001d0 <__aeabi_dsub>
 800ec8c:	a398      	add	r3, pc, #608	; (adr r3, 800eef0 <__ieee754_rem_pio2+0x318>)
 800ec8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec92:	e7db      	b.n	800ec4c <__ieee754_rem_pio2+0x74>
 800ec94:	f7f1 fa9e 	bl	80001d4 <__adddf3>
 800ec98:	45b0      	cmp	r8, r6
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	460d      	mov	r5, r1
 800ec9e:	d016      	beq.n	800ecce <__ieee754_rem_pio2+0xf6>
 800eca0:	a38f      	add	r3, pc, #572	; (adr r3, 800eee0 <__ieee754_rem_pio2+0x308>)
 800eca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca6:	f7f1 fa95 	bl	80001d4 <__adddf3>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	460b      	mov	r3, r1
 800ecae:	e9ca 2300 	strd	r2, r3, [sl]
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	4629      	mov	r1, r5
 800ecb6:	f7f1 fa8b 	bl	80001d0 <__aeabi_dsub>
 800ecba:	a389      	add	r3, pc, #548	; (adr r3, 800eee0 <__ieee754_rem_pio2+0x308>)
 800ecbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc0:	f7f1 fa88 	bl	80001d4 <__adddf3>
 800ecc4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ecc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eccc:	e7c4      	b.n	800ec58 <__ieee754_rem_pio2+0x80>
 800ecce:	a386      	add	r3, pc, #536	; (adr r3, 800eee8 <__ieee754_rem_pio2+0x310>)
 800ecd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd4:	f7f1 fa7e 	bl	80001d4 <__adddf3>
 800ecd8:	a385      	add	r3, pc, #532	; (adr r3, 800eef0 <__ieee754_rem_pio2+0x318>)
 800ecda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecde:	4604      	mov	r4, r0
 800ece0:	460d      	mov	r5, r1
 800ece2:	f7f1 fa77 	bl	80001d4 <__adddf3>
 800ece6:	4602      	mov	r2, r0
 800ece8:	460b      	mov	r3, r1
 800ecea:	e9ca 2300 	strd	r2, r3, [sl]
 800ecee:	4620      	mov	r0, r4
 800ecf0:	4629      	mov	r1, r5
 800ecf2:	f7f1 fa6d 	bl	80001d0 <__aeabi_dsub>
 800ecf6:	a37e      	add	r3, pc, #504	; (adr r3, 800eef0 <__ieee754_rem_pio2+0x318>)
 800ecf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfc:	e7e0      	b.n	800ecc0 <__ieee754_rem_pio2+0xe8>
 800ecfe:	4b87      	ldr	r3, [pc, #540]	; (800ef1c <__ieee754_rem_pio2+0x344>)
 800ed00:	4598      	cmp	r8, r3
 800ed02:	f300 80d9 	bgt.w	800eeb8 <__ieee754_rem_pio2+0x2e0>
 800ed06:	f001 fe79 	bl	80109fc <fabs>
 800ed0a:	ec55 4b10 	vmov	r4, r5, d0
 800ed0e:	ee10 0a10 	vmov	r0, s0
 800ed12:	a379      	add	r3, pc, #484	; (adr r3, 800eef8 <__ieee754_rem_pio2+0x320>)
 800ed14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed18:	4629      	mov	r1, r5
 800ed1a:	f7f1 fc11 	bl	8000540 <__aeabi_dmul>
 800ed1e:	4b80      	ldr	r3, [pc, #512]	; (800ef20 <__ieee754_rem_pio2+0x348>)
 800ed20:	2200      	movs	r2, #0
 800ed22:	f7f1 fa57 	bl	80001d4 <__adddf3>
 800ed26:	f7f1 febb 	bl	8000aa0 <__aeabi_d2iz>
 800ed2a:	4683      	mov	fp, r0
 800ed2c:	f7f1 fb9e 	bl	800046c <__aeabi_i2d>
 800ed30:	4602      	mov	r2, r0
 800ed32:	460b      	mov	r3, r1
 800ed34:	ec43 2b18 	vmov	d8, r2, r3
 800ed38:	a367      	add	r3, pc, #412	; (adr r3, 800eed8 <__ieee754_rem_pio2+0x300>)
 800ed3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3e:	f7f1 fbff 	bl	8000540 <__aeabi_dmul>
 800ed42:	4602      	mov	r2, r0
 800ed44:	460b      	mov	r3, r1
 800ed46:	4620      	mov	r0, r4
 800ed48:	4629      	mov	r1, r5
 800ed4a:	f7f1 fa41 	bl	80001d0 <__aeabi_dsub>
 800ed4e:	a364      	add	r3, pc, #400	; (adr r3, 800eee0 <__ieee754_rem_pio2+0x308>)
 800ed50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed54:	4606      	mov	r6, r0
 800ed56:	460f      	mov	r7, r1
 800ed58:	ec51 0b18 	vmov	r0, r1, d8
 800ed5c:	f7f1 fbf0 	bl	8000540 <__aeabi_dmul>
 800ed60:	f1bb 0f1f 	cmp.w	fp, #31
 800ed64:	4604      	mov	r4, r0
 800ed66:	460d      	mov	r5, r1
 800ed68:	dc0d      	bgt.n	800ed86 <__ieee754_rem_pio2+0x1ae>
 800ed6a:	4b6e      	ldr	r3, [pc, #440]	; (800ef24 <__ieee754_rem_pio2+0x34c>)
 800ed6c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800ed70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed74:	4543      	cmp	r3, r8
 800ed76:	d006      	beq.n	800ed86 <__ieee754_rem_pio2+0x1ae>
 800ed78:	4622      	mov	r2, r4
 800ed7a:	462b      	mov	r3, r5
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	4639      	mov	r1, r7
 800ed80:	f7f1 fa26 	bl	80001d0 <__aeabi_dsub>
 800ed84:	e00f      	b.n	800eda6 <__ieee754_rem_pio2+0x1ce>
 800ed86:	462b      	mov	r3, r5
 800ed88:	4622      	mov	r2, r4
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	4639      	mov	r1, r7
 800ed8e:	f7f1 fa1f 	bl	80001d0 <__aeabi_dsub>
 800ed92:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ed96:	9303      	str	r3, [sp, #12]
 800ed98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed9c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800eda0:	f1b8 0f10 	cmp.w	r8, #16
 800eda4:	dc02      	bgt.n	800edac <__ieee754_rem_pio2+0x1d4>
 800eda6:	e9ca 0100 	strd	r0, r1, [sl]
 800edaa:	e039      	b.n	800ee20 <__ieee754_rem_pio2+0x248>
 800edac:	a34e      	add	r3, pc, #312	; (adr r3, 800eee8 <__ieee754_rem_pio2+0x310>)
 800edae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb2:	ec51 0b18 	vmov	r0, r1, d8
 800edb6:	f7f1 fbc3 	bl	8000540 <__aeabi_dmul>
 800edba:	4604      	mov	r4, r0
 800edbc:	460d      	mov	r5, r1
 800edbe:	4602      	mov	r2, r0
 800edc0:	460b      	mov	r3, r1
 800edc2:	4630      	mov	r0, r6
 800edc4:	4639      	mov	r1, r7
 800edc6:	f7f1 fa03 	bl	80001d0 <__aeabi_dsub>
 800edca:	4602      	mov	r2, r0
 800edcc:	460b      	mov	r3, r1
 800edce:	4680      	mov	r8, r0
 800edd0:	4689      	mov	r9, r1
 800edd2:	4630      	mov	r0, r6
 800edd4:	4639      	mov	r1, r7
 800edd6:	f7f1 f9fb 	bl	80001d0 <__aeabi_dsub>
 800edda:	4622      	mov	r2, r4
 800eddc:	462b      	mov	r3, r5
 800edde:	f7f1 f9f7 	bl	80001d0 <__aeabi_dsub>
 800ede2:	a343      	add	r3, pc, #268	; (adr r3, 800eef0 <__ieee754_rem_pio2+0x318>)
 800ede4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede8:	4604      	mov	r4, r0
 800edea:	460d      	mov	r5, r1
 800edec:	ec51 0b18 	vmov	r0, r1, d8
 800edf0:	f7f1 fba6 	bl	8000540 <__aeabi_dmul>
 800edf4:	4622      	mov	r2, r4
 800edf6:	462b      	mov	r3, r5
 800edf8:	f7f1 f9ea 	bl	80001d0 <__aeabi_dsub>
 800edfc:	4602      	mov	r2, r0
 800edfe:	460b      	mov	r3, r1
 800ee00:	4604      	mov	r4, r0
 800ee02:	460d      	mov	r5, r1
 800ee04:	4640      	mov	r0, r8
 800ee06:	4649      	mov	r1, r9
 800ee08:	f7f1 f9e2 	bl	80001d0 <__aeabi_dsub>
 800ee0c:	9a03      	ldr	r2, [sp, #12]
 800ee0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ee12:	1ad3      	subs	r3, r2, r3
 800ee14:	2b31      	cmp	r3, #49	; 0x31
 800ee16:	dc24      	bgt.n	800ee62 <__ieee754_rem_pio2+0x28a>
 800ee18:	e9ca 0100 	strd	r0, r1, [sl]
 800ee1c:	4646      	mov	r6, r8
 800ee1e:	464f      	mov	r7, r9
 800ee20:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee24:	4630      	mov	r0, r6
 800ee26:	4642      	mov	r2, r8
 800ee28:	464b      	mov	r3, r9
 800ee2a:	4639      	mov	r1, r7
 800ee2c:	f7f1 f9d0 	bl	80001d0 <__aeabi_dsub>
 800ee30:	462b      	mov	r3, r5
 800ee32:	4622      	mov	r2, r4
 800ee34:	f7f1 f9cc 	bl	80001d0 <__aeabi_dsub>
 800ee38:	9b02      	ldr	r3, [sp, #8]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee40:	f6bf af0a 	bge.w	800ec58 <__ieee754_rem_pio2+0x80>
 800ee44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ee48:	f8ca 3004 	str.w	r3, [sl, #4]
 800ee4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee50:	f8ca 8000 	str.w	r8, [sl]
 800ee54:	f8ca 0008 	str.w	r0, [sl, #8]
 800ee58:	f8ca 300c 	str.w	r3, [sl, #12]
 800ee5c:	f1cb 0b00 	rsb	fp, fp, #0
 800ee60:	e6fa      	b.n	800ec58 <__ieee754_rem_pio2+0x80>
 800ee62:	a327      	add	r3, pc, #156	; (adr r3, 800ef00 <__ieee754_rem_pio2+0x328>)
 800ee64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee68:	ec51 0b18 	vmov	r0, r1, d8
 800ee6c:	f7f1 fb68 	bl	8000540 <__aeabi_dmul>
 800ee70:	4604      	mov	r4, r0
 800ee72:	460d      	mov	r5, r1
 800ee74:	4602      	mov	r2, r0
 800ee76:	460b      	mov	r3, r1
 800ee78:	4640      	mov	r0, r8
 800ee7a:	4649      	mov	r1, r9
 800ee7c:	f7f1 f9a8 	bl	80001d0 <__aeabi_dsub>
 800ee80:	4602      	mov	r2, r0
 800ee82:	460b      	mov	r3, r1
 800ee84:	4606      	mov	r6, r0
 800ee86:	460f      	mov	r7, r1
 800ee88:	4640      	mov	r0, r8
 800ee8a:	4649      	mov	r1, r9
 800ee8c:	f7f1 f9a0 	bl	80001d0 <__aeabi_dsub>
 800ee90:	4622      	mov	r2, r4
 800ee92:	462b      	mov	r3, r5
 800ee94:	f7f1 f99c 	bl	80001d0 <__aeabi_dsub>
 800ee98:	a31b      	add	r3, pc, #108	; (adr r3, 800ef08 <__ieee754_rem_pio2+0x330>)
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	4604      	mov	r4, r0
 800eea0:	460d      	mov	r5, r1
 800eea2:	ec51 0b18 	vmov	r0, r1, d8
 800eea6:	f7f1 fb4b 	bl	8000540 <__aeabi_dmul>
 800eeaa:	4622      	mov	r2, r4
 800eeac:	462b      	mov	r3, r5
 800eeae:	f7f1 f98f 	bl	80001d0 <__aeabi_dsub>
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	460d      	mov	r5, r1
 800eeb6:	e75f      	b.n	800ed78 <__ieee754_rem_pio2+0x1a0>
 800eeb8:	4b1b      	ldr	r3, [pc, #108]	; (800ef28 <__ieee754_rem_pio2+0x350>)
 800eeba:	4598      	cmp	r8, r3
 800eebc:	dd36      	ble.n	800ef2c <__ieee754_rem_pio2+0x354>
 800eebe:	ee10 2a10 	vmov	r2, s0
 800eec2:	462b      	mov	r3, r5
 800eec4:	4620      	mov	r0, r4
 800eec6:	4629      	mov	r1, r5
 800eec8:	f7f1 f982 	bl	80001d0 <__aeabi_dsub>
 800eecc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eed0:	e9ca 0100 	strd	r0, r1, [sl]
 800eed4:	e694      	b.n	800ec00 <__ieee754_rem_pio2+0x28>
 800eed6:	bf00      	nop
 800eed8:	54400000 	.word	0x54400000
 800eedc:	3ff921fb 	.word	0x3ff921fb
 800eee0:	1a626331 	.word	0x1a626331
 800eee4:	3dd0b461 	.word	0x3dd0b461
 800eee8:	1a600000 	.word	0x1a600000
 800eeec:	3dd0b461 	.word	0x3dd0b461
 800eef0:	2e037073 	.word	0x2e037073
 800eef4:	3ba3198a 	.word	0x3ba3198a
 800eef8:	6dc9c883 	.word	0x6dc9c883
 800eefc:	3fe45f30 	.word	0x3fe45f30
 800ef00:	2e000000 	.word	0x2e000000
 800ef04:	3ba3198a 	.word	0x3ba3198a
 800ef08:	252049c1 	.word	0x252049c1
 800ef0c:	397b839a 	.word	0x397b839a
 800ef10:	3fe921fb 	.word	0x3fe921fb
 800ef14:	4002d97b 	.word	0x4002d97b
 800ef18:	3ff921fb 	.word	0x3ff921fb
 800ef1c:	413921fb 	.word	0x413921fb
 800ef20:	3fe00000 	.word	0x3fe00000
 800ef24:	08010d38 	.word	0x08010d38
 800ef28:	7fefffff 	.word	0x7fefffff
 800ef2c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ef30:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ef34:	ee10 0a10 	vmov	r0, s0
 800ef38:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ef3c:	ee10 6a10 	vmov	r6, s0
 800ef40:	460f      	mov	r7, r1
 800ef42:	f7f1 fdad 	bl	8000aa0 <__aeabi_d2iz>
 800ef46:	f7f1 fa91 	bl	800046c <__aeabi_i2d>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	4630      	mov	r0, r6
 800ef50:	4639      	mov	r1, r7
 800ef52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef56:	f7f1 f93b 	bl	80001d0 <__aeabi_dsub>
 800ef5a:	4b23      	ldr	r3, [pc, #140]	; (800efe8 <__ieee754_rem_pio2+0x410>)
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f7f1 faef 	bl	8000540 <__aeabi_dmul>
 800ef62:	460f      	mov	r7, r1
 800ef64:	4606      	mov	r6, r0
 800ef66:	f7f1 fd9b 	bl	8000aa0 <__aeabi_d2iz>
 800ef6a:	f7f1 fa7f 	bl	800046c <__aeabi_i2d>
 800ef6e:	4602      	mov	r2, r0
 800ef70:	460b      	mov	r3, r1
 800ef72:	4630      	mov	r0, r6
 800ef74:	4639      	mov	r1, r7
 800ef76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ef7a:	f7f1 f929 	bl	80001d0 <__aeabi_dsub>
 800ef7e:	4b1a      	ldr	r3, [pc, #104]	; (800efe8 <__ieee754_rem_pio2+0x410>)
 800ef80:	2200      	movs	r2, #0
 800ef82:	f7f1 fadd 	bl	8000540 <__aeabi_dmul>
 800ef86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ef8a:	ad04      	add	r5, sp, #16
 800ef8c:	f04f 0803 	mov.w	r8, #3
 800ef90:	46a9      	mov	r9, r5
 800ef92:	2600      	movs	r6, #0
 800ef94:	2700      	movs	r7, #0
 800ef96:	4632      	mov	r2, r6
 800ef98:	463b      	mov	r3, r7
 800ef9a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ef9e:	46c3      	mov	fp, r8
 800efa0:	3d08      	subs	r5, #8
 800efa2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800efa6:	f7f1 fd33 	bl	8000a10 <__aeabi_dcmpeq>
 800efaa:	2800      	cmp	r0, #0
 800efac:	d1f3      	bne.n	800ef96 <__ieee754_rem_pio2+0x3be>
 800efae:	4b0f      	ldr	r3, [pc, #60]	; (800efec <__ieee754_rem_pio2+0x414>)
 800efb0:	9301      	str	r3, [sp, #4]
 800efb2:	2302      	movs	r3, #2
 800efb4:	9300      	str	r3, [sp, #0]
 800efb6:	4622      	mov	r2, r4
 800efb8:	465b      	mov	r3, fp
 800efba:	4651      	mov	r1, sl
 800efbc:	4648      	mov	r0, r9
 800efbe:	f000 fd9f 	bl	800fb00 <__kernel_rem_pio2>
 800efc2:	9b02      	ldr	r3, [sp, #8]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	4683      	mov	fp, r0
 800efc8:	f6bf ae46 	bge.w	800ec58 <__ieee754_rem_pio2+0x80>
 800efcc:	e9da 2100 	ldrd	r2, r1, [sl]
 800efd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efd4:	e9ca 2300 	strd	r2, r3, [sl]
 800efd8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800efdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efe0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800efe4:	e73a      	b.n	800ee5c <__ieee754_rem_pio2+0x284>
 800efe6:	bf00      	nop
 800efe8:	41700000 	.word	0x41700000
 800efec:	08010db8 	.word	0x08010db8

0800eff0 <__ieee754_sqrt>:
 800eff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff4:	ec55 4b10 	vmov	r4, r5, d0
 800eff8:	4e55      	ldr	r6, [pc, #340]	; (800f150 <__ieee754_sqrt+0x160>)
 800effa:	43ae      	bics	r6, r5
 800effc:	ee10 0a10 	vmov	r0, s0
 800f000:	ee10 3a10 	vmov	r3, s0
 800f004:	462a      	mov	r2, r5
 800f006:	4629      	mov	r1, r5
 800f008:	d110      	bne.n	800f02c <__ieee754_sqrt+0x3c>
 800f00a:	ee10 2a10 	vmov	r2, s0
 800f00e:	462b      	mov	r3, r5
 800f010:	f7f1 fa96 	bl	8000540 <__aeabi_dmul>
 800f014:	4602      	mov	r2, r0
 800f016:	460b      	mov	r3, r1
 800f018:	4620      	mov	r0, r4
 800f01a:	4629      	mov	r1, r5
 800f01c:	f7f1 f8da 	bl	80001d4 <__adddf3>
 800f020:	4604      	mov	r4, r0
 800f022:	460d      	mov	r5, r1
 800f024:	ec45 4b10 	vmov	d0, r4, r5
 800f028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f02c:	2d00      	cmp	r5, #0
 800f02e:	dc10      	bgt.n	800f052 <__ieee754_sqrt+0x62>
 800f030:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f034:	4330      	orrs	r0, r6
 800f036:	d0f5      	beq.n	800f024 <__ieee754_sqrt+0x34>
 800f038:	b15d      	cbz	r5, 800f052 <__ieee754_sqrt+0x62>
 800f03a:	ee10 2a10 	vmov	r2, s0
 800f03e:	462b      	mov	r3, r5
 800f040:	ee10 0a10 	vmov	r0, s0
 800f044:	f7f1 f8c4 	bl	80001d0 <__aeabi_dsub>
 800f048:	4602      	mov	r2, r0
 800f04a:	460b      	mov	r3, r1
 800f04c:	f7f1 fba2 	bl	8000794 <__aeabi_ddiv>
 800f050:	e7e6      	b.n	800f020 <__ieee754_sqrt+0x30>
 800f052:	1512      	asrs	r2, r2, #20
 800f054:	d074      	beq.n	800f140 <__ieee754_sqrt+0x150>
 800f056:	07d4      	lsls	r4, r2, #31
 800f058:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f05c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f060:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f064:	bf5e      	ittt	pl
 800f066:	0fda      	lsrpl	r2, r3, #31
 800f068:	005b      	lslpl	r3, r3, #1
 800f06a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f06e:	2400      	movs	r4, #0
 800f070:	0fda      	lsrs	r2, r3, #31
 800f072:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f076:	107f      	asrs	r7, r7, #1
 800f078:	005b      	lsls	r3, r3, #1
 800f07a:	2516      	movs	r5, #22
 800f07c:	4620      	mov	r0, r4
 800f07e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f082:	1886      	adds	r6, r0, r2
 800f084:	428e      	cmp	r6, r1
 800f086:	bfde      	ittt	le
 800f088:	1b89      	suble	r1, r1, r6
 800f08a:	18b0      	addle	r0, r6, r2
 800f08c:	18a4      	addle	r4, r4, r2
 800f08e:	0049      	lsls	r1, r1, #1
 800f090:	3d01      	subs	r5, #1
 800f092:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f096:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f09a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f09e:	d1f0      	bne.n	800f082 <__ieee754_sqrt+0x92>
 800f0a0:	462a      	mov	r2, r5
 800f0a2:	f04f 0e20 	mov.w	lr, #32
 800f0a6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f0aa:	4281      	cmp	r1, r0
 800f0ac:	eb06 0c05 	add.w	ip, r6, r5
 800f0b0:	dc02      	bgt.n	800f0b8 <__ieee754_sqrt+0xc8>
 800f0b2:	d113      	bne.n	800f0dc <__ieee754_sqrt+0xec>
 800f0b4:	459c      	cmp	ip, r3
 800f0b6:	d811      	bhi.n	800f0dc <__ieee754_sqrt+0xec>
 800f0b8:	f1bc 0f00 	cmp.w	ip, #0
 800f0bc:	eb0c 0506 	add.w	r5, ip, r6
 800f0c0:	da43      	bge.n	800f14a <__ieee754_sqrt+0x15a>
 800f0c2:	2d00      	cmp	r5, #0
 800f0c4:	db41      	blt.n	800f14a <__ieee754_sqrt+0x15a>
 800f0c6:	f100 0801 	add.w	r8, r0, #1
 800f0ca:	1a09      	subs	r1, r1, r0
 800f0cc:	459c      	cmp	ip, r3
 800f0ce:	bf88      	it	hi
 800f0d0:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800f0d4:	eba3 030c 	sub.w	r3, r3, ip
 800f0d8:	4432      	add	r2, r6
 800f0da:	4640      	mov	r0, r8
 800f0dc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f0e0:	f1be 0e01 	subs.w	lr, lr, #1
 800f0e4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f0e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f0ec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f0f0:	d1db      	bne.n	800f0aa <__ieee754_sqrt+0xba>
 800f0f2:	430b      	orrs	r3, r1
 800f0f4:	d006      	beq.n	800f104 <__ieee754_sqrt+0x114>
 800f0f6:	1c50      	adds	r0, r2, #1
 800f0f8:	bf13      	iteet	ne
 800f0fa:	3201      	addne	r2, #1
 800f0fc:	3401      	addeq	r4, #1
 800f0fe:	4672      	moveq	r2, lr
 800f100:	f022 0201 	bicne.w	r2, r2, #1
 800f104:	1063      	asrs	r3, r4, #1
 800f106:	0852      	lsrs	r2, r2, #1
 800f108:	07e1      	lsls	r1, r4, #31
 800f10a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f10e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f112:	bf48      	it	mi
 800f114:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f118:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f11c:	4614      	mov	r4, r2
 800f11e:	e781      	b.n	800f024 <__ieee754_sqrt+0x34>
 800f120:	0ad9      	lsrs	r1, r3, #11
 800f122:	3815      	subs	r0, #21
 800f124:	055b      	lsls	r3, r3, #21
 800f126:	2900      	cmp	r1, #0
 800f128:	d0fa      	beq.n	800f120 <__ieee754_sqrt+0x130>
 800f12a:	02cd      	lsls	r5, r1, #11
 800f12c:	d50a      	bpl.n	800f144 <__ieee754_sqrt+0x154>
 800f12e:	f1c2 0420 	rsb	r4, r2, #32
 800f132:	fa23 f404 	lsr.w	r4, r3, r4
 800f136:	1e55      	subs	r5, r2, #1
 800f138:	4093      	lsls	r3, r2
 800f13a:	4321      	orrs	r1, r4
 800f13c:	1b42      	subs	r2, r0, r5
 800f13e:	e78a      	b.n	800f056 <__ieee754_sqrt+0x66>
 800f140:	4610      	mov	r0, r2
 800f142:	e7f0      	b.n	800f126 <__ieee754_sqrt+0x136>
 800f144:	0049      	lsls	r1, r1, #1
 800f146:	3201      	adds	r2, #1
 800f148:	e7ef      	b.n	800f12a <__ieee754_sqrt+0x13a>
 800f14a:	4680      	mov	r8, r0
 800f14c:	e7bd      	b.n	800f0ca <__ieee754_sqrt+0xda>
 800f14e:	bf00      	nop
 800f150:	7ff00000 	.word	0x7ff00000

0800f154 <__ieee754_powf>:
 800f154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f158:	ee10 4a90 	vmov	r4, s1
 800f15c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800f160:	ed2d 8b02 	vpush	{d8}
 800f164:	ee10 6a10 	vmov	r6, s0
 800f168:	eeb0 8a40 	vmov.f32	s16, s0
 800f16c:	eef0 8a60 	vmov.f32	s17, s1
 800f170:	d10c      	bne.n	800f18c <__ieee754_powf+0x38>
 800f172:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800f176:	0076      	lsls	r6, r6, #1
 800f178:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800f17c:	f240 8296 	bls.w	800f6ac <__ieee754_powf+0x558>
 800f180:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f184:	ecbd 8b02 	vpop	{d8}
 800f188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f18c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f190:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f194:	dcf4      	bgt.n	800f180 <__ieee754_powf+0x2c>
 800f196:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f19a:	dd08      	ble.n	800f1ae <__ieee754_powf+0x5a>
 800f19c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800f1a0:	d1ee      	bne.n	800f180 <__ieee754_powf+0x2c>
 800f1a2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800f1a6:	0064      	lsls	r4, r4, #1
 800f1a8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800f1ac:	e7e6      	b.n	800f17c <__ieee754_powf+0x28>
 800f1ae:	2e00      	cmp	r6, #0
 800f1b0:	da20      	bge.n	800f1f4 <__ieee754_powf+0xa0>
 800f1b2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800f1b6:	da2d      	bge.n	800f214 <__ieee754_powf+0xc0>
 800f1b8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f1bc:	f2c0 827f 	blt.w	800f6be <__ieee754_powf+0x56a>
 800f1c0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800f1c4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f1c8:	fa48 f703 	asr.w	r7, r8, r3
 800f1cc:	fa07 f303 	lsl.w	r3, r7, r3
 800f1d0:	4543      	cmp	r3, r8
 800f1d2:	f040 8274 	bne.w	800f6be <__ieee754_powf+0x56a>
 800f1d6:	f007 0701 	and.w	r7, r7, #1
 800f1da:	f1c7 0702 	rsb	r7, r7, #2
 800f1de:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f1e2:	d11f      	bne.n	800f224 <__ieee754_powf+0xd0>
 800f1e4:	2c00      	cmp	r4, #0
 800f1e6:	f280 8267 	bge.w	800f6b8 <__ieee754_powf+0x564>
 800f1ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f1ee:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f1f2:	e7c7      	b.n	800f184 <__ieee754_powf+0x30>
 800f1f4:	2700      	movs	r7, #0
 800f1f6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f1fa:	d1f0      	bne.n	800f1de <__ieee754_powf+0x8a>
 800f1fc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800f200:	f000 8254 	beq.w	800f6ac <__ieee754_powf+0x558>
 800f204:	dd08      	ble.n	800f218 <__ieee754_powf+0xc4>
 800f206:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800f510 <__ieee754_powf+0x3bc>
 800f20a:	2c00      	cmp	r4, #0
 800f20c:	bfa8      	it	ge
 800f20e:	eeb0 0a68 	vmovge.f32	s0, s17
 800f212:	e7b7      	b.n	800f184 <__ieee754_powf+0x30>
 800f214:	2702      	movs	r7, #2
 800f216:	e7ee      	b.n	800f1f6 <__ieee754_powf+0xa2>
 800f218:	2c00      	cmp	r4, #0
 800f21a:	f280 824a 	bge.w	800f6b2 <__ieee754_powf+0x55e>
 800f21e:	eeb1 0a68 	vneg.f32	s0, s17
 800f222:	e7af      	b.n	800f184 <__ieee754_powf+0x30>
 800f224:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f228:	d102      	bne.n	800f230 <__ieee754_powf+0xdc>
 800f22a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f22e:	e7a9      	b.n	800f184 <__ieee754_powf+0x30>
 800f230:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f234:	eeb0 0a48 	vmov.f32	s0, s16
 800f238:	d107      	bne.n	800f24a <__ieee754_powf+0xf6>
 800f23a:	2e00      	cmp	r6, #0
 800f23c:	db05      	blt.n	800f24a <__ieee754_powf+0xf6>
 800f23e:	ecbd 8b02 	vpop	{d8}
 800f242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f246:	f000 bb8f 	b.w	800f968 <__ieee754_sqrtf>
 800f24a:	f001 fc73 	bl	8010b34 <fabsf>
 800f24e:	b125      	cbz	r5, 800f25a <__ieee754_powf+0x106>
 800f250:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800f254:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f258:	d116      	bne.n	800f288 <__ieee754_powf+0x134>
 800f25a:	2c00      	cmp	r4, #0
 800f25c:	bfbc      	itt	lt
 800f25e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f262:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f266:	2e00      	cmp	r6, #0
 800f268:	da8c      	bge.n	800f184 <__ieee754_powf+0x30>
 800f26a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800f26e:	ea55 0307 	orrs.w	r3, r5, r7
 800f272:	d104      	bne.n	800f27e <__ieee754_powf+0x12a>
 800f274:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f278:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f27c:	e782      	b.n	800f184 <__ieee754_powf+0x30>
 800f27e:	2f01      	cmp	r7, #1
 800f280:	d180      	bne.n	800f184 <__ieee754_powf+0x30>
 800f282:	eeb1 0a40 	vneg.f32	s0, s0
 800f286:	e77d      	b.n	800f184 <__ieee754_powf+0x30>
 800f288:	0ff0      	lsrs	r0, r6, #31
 800f28a:	3801      	subs	r0, #1
 800f28c:	ea57 0300 	orrs.w	r3, r7, r0
 800f290:	d104      	bne.n	800f29c <__ieee754_powf+0x148>
 800f292:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f296:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f29a:	e773      	b.n	800f184 <__ieee754_powf+0x30>
 800f29c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800f2a0:	dd74      	ble.n	800f38c <__ieee754_powf+0x238>
 800f2a2:	4b9c      	ldr	r3, [pc, #624]	; (800f514 <__ieee754_powf+0x3c0>)
 800f2a4:	429d      	cmp	r5, r3
 800f2a6:	dc08      	bgt.n	800f2ba <__ieee754_powf+0x166>
 800f2a8:	2c00      	cmp	r4, #0
 800f2aa:	da0b      	bge.n	800f2c4 <__ieee754_powf+0x170>
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	ecbd 8b02 	vpop	{d8}
 800f2b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b6:	f001 bb9b 	b.w	80109f0 <__math_oflowf>
 800f2ba:	4b97      	ldr	r3, [pc, #604]	; (800f518 <__ieee754_powf+0x3c4>)
 800f2bc:	429d      	cmp	r5, r3
 800f2be:	dd08      	ble.n	800f2d2 <__ieee754_powf+0x17e>
 800f2c0:	2c00      	cmp	r4, #0
 800f2c2:	dcf3      	bgt.n	800f2ac <__ieee754_powf+0x158>
 800f2c4:	2000      	movs	r0, #0
 800f2c6:	ecbd 8b02 	vpop	{d8}
 800f2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ce:	f001 bb89 	b.w	80109e4 <__math_uflowf>
 800f2d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f2d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f2da:	eddf 6a90 	vldr	s13, [pc, #576]	; 800f51c <__ieee754_powf+0x3c8>
 800f2de:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f2e2:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f2e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f2ea:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f2ee:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f2f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2f6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800f520 <__ieee754_powf+0x3cc>
 800f2fa:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800f2fe:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800f524 <__ieee754_powf+0x3d0>
 800f302:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f306:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800f528 <__ieee754_powf+0x3d4>
 800f30a:	eef0 6a67 	vmov.f32	s13, s15
 800f30e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f312:	ee16 3a90 	vmov	r3, s13
 800f316:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f31a:	f023 030f 	bic.w	r3, r3, #15
 800f31e:	ee00 3a90 	vmov	s1, r3
 800f322:	eee0 0a47 	vfms.f32	s1, s0, s14
 800f326:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f32a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800f32e:	f024 040f 	bic.w	r4, r4, #15
 800f332:	ee07 4a10 	vmov	s14, r4
 800f336:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f33a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f33e:	ee07 3a90 	vmov	s15, r3
 800f342:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f346:	3f01      	subs	r7, #1
 800f348:	ea57 0200 	orrs.w	r2, r7, r0
 800f34c:	ee07 4a10 	vmov	s14, r4
 800f350:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f354:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f358:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f35c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f360:	ee17 4a10 	vmov	r4, s14
 800f364:	bf08      	it	eq
 800f366:	eeb0 8a40 	vmoveq.f32	s16, s0
 800f36a:	2c00      	cmp	r4, #0
 800f36c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f370:	f340 817e 	ble.w	800f670 <__ieee754_powf+0x51c>
 800f374:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800f378:	f340 80f8 	ble.w	800f56c <__ieee754_powf+0x418>
 800f37c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f384:	bf4c      	ite	mi
 800f386:	2001      	movmi	r0, #1
 800f388:	2000      	movpl	r0, #0
 800f38a:	e790      	b.n	800f2ae <__ieee754_powf+0x15a>
 800f38c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800f390:	bf01      	itttt	eq
 800f392:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800f52c <__ieee754_powf+0x3d8>
 800f396:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f39a:	f06f 0217 	mvneq.w	r2, #23
 800f39e:	ee17 5a90 	vmoveq	r5, s15
 800f3a2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f3a6:	bf18      	it	ne
 800f3a8:	2200      	movne	r2, #0
 800f3aa:	3b7f      	subs	r3, #127	; 0x7f
 800f3ac:	4413      	add	r3, r2
 800f3ae:	4a60      	ldr	r2, [pc, #384]	; (800f530 <__ieee754_powf+0x3dc>)
 800f3b0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800f3b4:	4295      	cmp	r5, r2
 800f3b6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800f3ba:	dd06      	ble.n	800f3ca <__ieee754_powf+0x276>
 800f3bc:	4a5d      	ldr	r2, [pc, #372]	; (800f534 <__ieee754_powf+0x3e0>)
 800f3be:	4295      	cmp	r5, r2
 800f3c0:	f340 80a4 	ble.w	800f50c <__ieee754_powf+0x3b8>
 800f3c4:	3301      	adds	r3, #1
 800f3c6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f3ca:	2500      	movs	r5, #0
 800f3cc:	4a5a      	ldr	r2, [pc, #360]	; (800f538 <__ieee754_powf+0x3e4>)
 800f3ce:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800f3d2:	ee07 1a90 	vmov	s15, r1
 800f3d6:	ed92 7a00 	vldr	s14, [r2]
 800f3da:	4a58      	ldr	r2, [pc, #352]	; (800f53c <__ieee754_powf+0x3e8>)
 800f3dc:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f3e0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f3e4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800f3e8:	1049      	asrs	r1, r1, #1
 800f3ea:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800f3ee:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800f3f2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800f3f6:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800f3fa:	ee06 1a10 	vmov	s12, r1
 800f3fe:	ee65 4a26 	vmul.f32	s9, s10, s13
 800f402:	ee36 7a47 	vsub.f32	s14, s12, s14
 800f406:	ee14 6a90 	vmov	r6, s9
 800f40a:	4016      	ands	r6, r2
 800f40c:	ee05 6a90 	vmov	s11, r6
 800f410:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800f414:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f418:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800f540 <__ieee754_powf+0x3ec>
 800f41c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800f420:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800f424:	ee25 6a26 	vmul.f32	s12, s10, s13
 800f428:	eddf 6a46 	vldr	s13, [pc, #280]	; 800f544 <__ieee754_powf+0x3f0>
 800f42c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f430:	eddf 6a45 	vldr	s13, [pc, #276]	; 800f548 <__ieee754_powf+0x3f4>
 800f434:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f438:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f51c <__ieee754_powf+0x3c8>
 800f43c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f440:	eddf 6a42 	vldr	s13, [pc, #264]	; 800f54c <__ieee754_powf+0x3f8>
 800f444:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f448:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800f550 <__ieee754_powf+0x3fc>
 800f44c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f450:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800f454:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800f458:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f45c:	eee5 6a07 	vfma.f32	s13, s10, s14
 800f460:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800f464:	eef0 7a45 	vmov.f32	s15, s10
 800f468:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800f46c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f470:	ee17 1a90 	vmov	r1, s15
 800f474:	4011      	ands	r1, r2
 800f476:	ee07 1a90 	vmov	s15, r1
 800f47a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800f47e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800f482:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f486:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f48a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f48e:	eeb0 6a47 	vmov.f32	s12, s14
 800f492:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800f496:	ee16 1a10 	vmov	r1, s12
 800f49a:	4011      	ands	r1, r2
 800f49c:	ee06 1a90 	vmov	s13, r1
 800f4a0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800f4a4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f554 <__ieee754_powf+0x400>
 800f4a8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800f558 <__ieee754_powf+0x404>
 800f4ac:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f4b0:	ee06 1a10 	vmov	s12, r1
 800f4b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4b8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800f55c <__ieee754_powf+0x408>
 800f4bc:	4928      	ldr	r1, [pc, #160]	; (800f560 <__ieee754_powf+0x40c>)
 800f4be:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f4c2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800f4c6:	edd1 7a00 	vldr	s15, [r1]
 800f4ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f4ce:	ee07 3a90 	vmov	s15, r3
 800f4d2:	4b24      	ldr	r3, [pc, #144]	; (800f564 <__ieee754_powf+0x410>)
 800f4d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f4d8:	eef0 7a47 	vmov.f32	s15, s14
 800f4dc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f4e0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800f4e4:	edd5 0a00 	vldr	s1, [r5]
 800f4e8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f4ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4f0:	ee17 3a90 	vmov	r3, s15
 800f4f4:	4013      	ands	r3, r2
 800f4f6:	ee07 3a90 	vmov	s15, r3
 800f4fa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800f4fe:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800f502:	eee6 6a65 	vfms.f32	s13, s12, s11
 800f506:	ee77 7a66 	vsub.f32	s15, s14, s13
 800f50a:	e70e      	b.n	800f32a <__ieee754_powf+0x1d6>
 800f50c:	2501      	movs	r5, #1
 800f50e:	e75d      	b.n	800f3cc <__ieee754_powf+0x278>
 800f510:	00000000 	.word	0x00000000
 800f514:	3f7ffff3 	.word	0x3f7ffff3
 800f518:	3f800007 	.word	0x3f800007
 800f51c:	3eaaaaab 	.word	0x3eaaaaab
 800f520:	3fb8aa3b 	.word	0x3fb8aa3b
 800f524:	36eca570 	.word	0x36eca570
 800f528:	3fb8aa00 	.word	0x3fb8aa00
 800f52c:	4b800000 	.word	0x4b800000
 800f530:	001cc471 	.word	0x001cc471
 800f534:	005db3d6 	.word	0x005db3d6
 800f538:	08010ec0 	.word	0x08010ec0
 800f53c:	fffff000 	.word	0xfffff000
 800f540:	3e6c3255 	.word	0x3e6c3255
 800f544:	3e53f142 	.word	0x3e53f142
 800f548:	3e8ba305 	.word	0x3e8ba305
 800f54c:	3edb6db7 	.word	0x3edb6db7
 800f550:	3f19999a 	.word	0x3f19999a
 800f554:	3f76384f 	.word	0x3f76384f
 800f558:	3f763800 	.word	0x3f763800
 800f55c:	369dc3a0 	.word	0x369dc3a0
 800f560:	08010ed0 	.word	0x08010ed0
 800f564:	08010ec8 	.word	0x08010ec8
 800f568:	3338aa3c 	.word	0x3338aa3c
 800f56c:	f040 8095 	bne.w	800f69a <__ieee754_powf+0x546>
 800f570:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800f568 <__ieee754_powf+0x414>
 800f574:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f578:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f57c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f584:	f73f aefa 	bgt.w	800f37c <__ieee754_powf+0x228>
 800f588:	15db      	asrs	r3, r3, #23
 800f58a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800f58e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f592:	4103      	asrs	r3, r0
 800f594:	4423      	add	r3, r4
 800f596:	494b      	ldr	r1, [pc, #300]	; (800f6c4 <__ieee754_powf+0x570>)
 800f598:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f59c:	3a7f      	subs	r2, #127	; 0x7f
 800f59e:	4111      	asrs	r1, r2
 800f5a0:	ea23 0101 	bic.w	r1, r3, r1
 800f5a4:	ee07 1a10 	vmov	s14, r1
 800f5a8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800f5ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800f5b0:	f1c2 0217 	rsb	r2, r2, #23
 800f5b4:	4110      	asrs	r0, r2
 800f5b6:	2c00      	cmp	r4, #0
 800f5b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5bc:	bfb8      	it	lt
 800f5be:	4240      	neglt	r0, r0
 800f5c0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f5c4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800f6c8 <__ieee754_powf+0x574>
 800f5c8:	eddf 6a40 	vldr	s13, [pc, #256]	; 800f6cc <__ieee754_powf+0x578>
 800f5cc:	ee17 3a10 	vmov	r3, s14
 800f5d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f5d4:	f023 030f 	bic.w	r3, r3, #15
 800f5d8:	ee07 3a10 	vmov	s14, r3
 800f5dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5e0:	ee27 0a00 	vmul.f32	s0, s14, s0
 800f5e4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f5e8:	eddf 7a39 	vldr	s15, [pc, #228]	; 800f6d0 <__ieee754_powf+0x57c>
 800f5ec:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800f5f0:	eef0 7a40 	vmov.f32	s15, s0
 800f5f4:	eee7 7a26 	vfma.f32	s15, s14, s13
 800f5f8:	eeb0 6a67 	vmov.f32	s12, s15
 800f5fc:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f600:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f604:	ee30 0a46 	vsub.f32	s0, s0, s12
 800f608:	eddf 6a32 	vldr	s13, [pc, #200]	; 800f6d4 <__ieee754_powf+0x580>
 800f60c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800f6d8 <__ieee754_powf+0x584>
 800f610:	eee7 6a06 	vfma.f32	s13, s14, s12
 800f614:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800f6dc <__ieee754_powf+0x588>
 800f618:	eea6 6a87 	vfma.f32	s12, s13, s14
 800f61c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800f6e0 <__ieee754_powf+0x58c>
 800f620:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f624:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800f6e4 <__ieee754_powf+0x590>
 800f628:	eea6 6a87 	vfma.f32	s12, s13, s14
 800f62c:	eef0 6a67 	vmov.f32	s13, s15
 800f630:	eee6 6a47 	vfms.f32	s13, s12, s14
 800f634:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f638:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800f63c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800f640:	eea7 0a80 	vfma.f32	s0, s15, s0
 800f644:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800f648:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f64c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f650:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f654:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f658:	ee10 3a10 	vmov	r3, s0
 800f65c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f664:	da1f      	bge.n	800f6a6 <__ieee754_powf+0x552>
 800f666:	f001 fabb 	bl	8010be0 <scalbnf>
 800f66a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f66e:	e589      	b.n	800f184 <__ieee754_powf+0x30>
 800f670:	4a1d      	ldr	r2, [pc, #116]	; (800f6e8 <__ieee754_powf+0x594>)
 800f672:	4293      	cmp	r3, r2
 800f674:	dd07      	ble.n	800f686 <__ieee754_powf+0x532>
 800f676:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67e:	bf4c      	ite	mi
 800f680:	2001      	movmi	r0, #1
 800f682:	2000      	movpl	r0, #0
 800f684:	e61f      	b.n	800f2c6 <__ieee754_powf+0x172>
 800f686:	d108      	bne.n	800f69a <__ieee754_powf+0x546>
 800f688:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f68c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f694:	f6ff af78 	blt.w	800f588 <__ieee754_powf+0x434>
 800f698:	e7ed      	b.n	800f676 <__ieee754_powf+0x522>
 800f69a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800f69e:	f73f af73 	bgt.w	800f588 <__ieee754_powf+0x434>
 800f6a2:	2000      	movs	r0, #0
 800f6a4:	e78c      	b.n	800f5c0 <__ieee754_powf+0x46c>
 800f6a6:	ee00 3a10 	vmov	s0, r3
 800f6aa:	e7de      	b.n	800f66a <__ieee754_powf+0x516>
 800f6ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f6b0:	e568      	b.n	800f184 <__ieee754_powf+0x30>
 800f6b2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f6ec <__ieee754_powf+0x598>
 800f6b6:	e565      	b.n	800f184 <__ieee754_powf+0x30>
 800f6b8:	eeb0 0a48 	vmov.f32	s0, s16
 800f6bc:	e562      	b.n	800f184 <__ieee754_powf+0x30>
 800f6be:	2700      	movs	r7, #0
 800f6c0:	e58d      	b.n	800f1de <__ieee754_powf+0x8a>
 800f6c2:	bf00      	nop
 800f6c4:	007fffff 	.word	0x007fffff
 800f6c8:	35bfbe8c 	.word	0x35bfbe8c
 800f6cc:	3f317200 	.word	0x3f317200
 800f6d0:	3f317218 	.word	0x3f317218
 800f6d4:	b5ddea0e 	.word	0xb5ddea0e
 800f6d8:	3331bb4c 	.word	0x3331bb4c
 800f6dc:	388ab355 	.word	0x388ab355
 800f6e0:	bb360b61 	.word	0xbb360b61
 800f6e4:	3e2aaaab 	.word	0x3e2aaaab
 800f6e8:	43160000 	.word	0x43160000
 800f6ec:	00000000 	.word	0x00000000

0800f6f0 <__ieee754_rem_pio2f>:
 800f6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6f2:	ee10 6a10 	vmov	r6, s0
 800f6f6:	4b8e      	ldr	r3, [pc, #568]	; (800f930 <__ieee754_rem_pio2f+0x240>)
 800f6f8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f6fc:	429d      	cmp	r5, r3
 800f6fe:	b087      	sub	sp, #28
 800f700:	eef0 7a40 	vmov.f32	s15, s0
 800f704:	4604      	mov	r4, r0
 800f706:	dc05      	bgt.n	800f714 <__ieee754_rem_pio2f+0x24>
 800f708:	2300      	movs	r3, #0
 800f70a:	ed80 0a00 	vstr	s0, [r0]
 800f70e:	6043      	str	r3, [r0, #4]
 800f710:	2000      	movs	r0, #0
 800f712:	e01a      	b.n	800f74a <__ieee754_rem_pio2f+0x5a>
 800f714:	4b87      	ldr	r3, [pc, #540]	; (800f934 <__ieee754_rem_pio2f+0x244>)
 800f716:	429d      	cmp	r5, r3
 800f718:	dc46      	bgt.n	800f7a8 <__ieee754_rem_pio2f+0xb8>
 800f71a:	2e00      	cmp	r6, #0
 800f71c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800f938 <__ieee754_rem_pio2f+0x248>
 800f720:	4b86      	ldr	r3, [pc, #536]	; (800f93c <__ieee754_rem_pio2f+0x24c>)
 800f722:	f025 050f 	bic.w	r5, r5, #15
 800f726:	dd1f      	ble.n	800f768 <__ieee754_rem_pio2f+0x78>
 800f728:	429d      	cmp	r5, r3
 800f72a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f72e:	d00e      	beq.n	800f74e <__ieee754_rem_pio2f+0x5e>
 800f730:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800f940 <__ieee754_rem_pio2f+0x250>
 800f734:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f738:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f73c:	ed80 0a00 	vstr	s0, [r0]
 800f740:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f744:	2001      	movs	r0, #1
 800f746:	edc4 7a01 	vstr	s15, [r4, #4]
 800f74a:	b007      	add	sp, #28
 800f74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f74e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800f944 <__ieee754_rem_pio2f+0x254>
 800f752:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800f948 <__ieee754_rem_pio2f+0x258>
 800f756:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f75a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f75e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f762:	edc0 6a00 	vstr	s13, [r0]
 800f766:	e7eb      	b.n	800f740 <__ieee754_rem_pio2f+0x50>
 800f768:	429d      	cmp	r5, r3
 800f76a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f76e:	d00e      	beq.n	800f78e <__ieee754_rem_pio2f+0x9e>
 800f770:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800f940 <__ieee754_rem_pio2f+0x250>
 800f774:	ee37 0a87 	vadd.f32	s0, s15, s14
 800f778:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f77c:	ed80 0a00 	vstr	s0, [r0]
 800f780:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f788:	edc4 7a01 	vstr	s15, [r4, #4]
 800f78c:	e7dd      	b.n	800f74a <__ieee754_rem_pio2f+0x5a>
 800f78e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800f944 <__ieee754_rem_pio2f+0x254>
 800f792:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800f948 <__ieee754_rem_pio2f+0x258>
 800f796:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f79a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f79e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f7a2:	edc0 6a00 	vstr	s13, [r0]
 800f7a6:	e7eb      	b.n	800f780 <__ieee754_rem_pio2f+0x90>
 800f7a8:	4b68      	ldr	r3, [pc, #416]	; (800f94c <__ieee754_rem_pio2f+0x25c>)
 800f7aa:	429d      	cmp	r5, r3
 800f7ac:	dc72      	bgt.n	800f894 <__ieee754_rem_pio2f+0x1a4>
 800f7ae:	f001 f9c1 	bl	8010b34 <fabsf>
 800f7b2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f950 <__ieee754_rem_pio2f+0x260>
 800f7b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f7ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f7be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f7c6:	ee17 0a90 	vmov	r0, s15
 800f7ca:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800f938 <__ieee754_rem_pio2f+0x248>
 800f7ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f7d2:	281f      	cmp	r0, #31
 800f7d4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800f940 <__ieee754_rem_pio2f+0x250>
 800f7d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7dc:	eeb1 6a47 	vneg.f32	s12, s14
 800f7e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f7e4:	ee16 2a90 	vmov	r2, s13
 800f7e8:	dc1c      	bgt.n	800f824 <__ieee754_rem_pio2f+0x134>
 800f7ea:	495a      	ldr	r1, [pc, #360]	; (800f954 <__ieee754_rem_pio2f+0x264>)
 800f7ec:	1e47      	subs	r7, r0, #1
 800f7ee:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800f7f2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800f7f6:	428b      	cmp	r3, r1
 800f7f8:	d014      	beq.n	800f824 <__ieee754_rem_pio2f+0x134>
 800f7fa:	6022      	str	r2, [r4, #0]
 800f7fc:	ed94 7a00 	vldr	s14, [r4]
 800f800:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f804:	2e00      	cmp	r6, #0
 800f806:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f80a:	ed84 0a01 	vstr	s0, [r4, #4]
 800f80e:	da9c      	bge.n	800f74a <__ieee754_rem_pio2f+0x5a>
 800f810:	eeb1 7a47 	vneg.f32	s14, s14
 800f814:	eeb1 0a40 	vneg.f32	s0, s0
 800f818:	ed84 7a00 	vstr	s14, [r4]
 800f81c:	ed84 0a01 	vstr	s0, [r4, #4]
 800f820:	4240      	negs	r0, r0
 800f822:	e792      	b.n	800f74a <__ieee754_rem_pio2f+0x5a>
 800f824:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f828:	15eb      	asrs	r3, r5, #23
 800f82a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800f82e:	2d08      	cmp	r5, #8
 800f830:	dde3      	ble.n	800f7fa <__ieee754_rem_pio2f+0x10a>
 800f832:	eddf 7a44 	vldr	s15, [pc, #272]	; 800f944 <__ieee754_rem_pio2f+0x254>
 800f836:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f948 <__ieee754_rem_pio2f+0x258>
 800f83a:	eef0 6a40 	vmov.f32	s13, s0
 800f83e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f842:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f846:	eea6 0a27 	vfma.f32	s0, s12, s15
 800f84a:	eef0 7a40 	vmov.f32	s15, s0
 800f84e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f852:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f856:	ee15 2a90 	vmov	r2, s11
 800f85a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f85e:	1a5b      	subs	r3, r3, r1
 800f860:	2b19      	cmp	r3, #25
 800f862:	dc04      	bgt.n	800f86e <__ieee754_rem_pio2f+0x17e>
 800f864:	edc4 5a00 	vstr	s11, [r4]
 800f868:	eeb0 0a66 	vmov.f32	s0, s13
 800f86c:	e7c6      	b.n	800f7fc <__ieee754_rem_pio2f+0x10c>
 800f86e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800f958 <__ieee754_rem_pio2f+0x268>
 800f872:	eeb0 0a66 	vmov.f32	s0, s13
 800f876:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f87a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f87e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800f95c <__ieee754_rem_pio2f+0x26c>
 800f882:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f886:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f88a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f88e:	ed84 7a00 	vstr	s14, [r4]
 800f892:	e7b3      	b.n	800f7fc <__ieee754_rem_pio2f+0x10c>
 800f894:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f898:	db06      	blt.n	800f8a8 <__ieee754_rem_pio2f+0x1b8>
 800f89a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f89e:	edc0 7a01 	vstr	s15, [r0, #4]
 800f8a2:	edc0 7a00 	vstr	s15, [r0]
 800f8a6:	e733      	b.n	800f710 <__ieee754_rem_pio2f+0x20>
 800f8a8:	15ea      	asrs	r2, r5, #23
 800f8aa:	3a86      	subs	r2, #134	; 0x86
 800f8ac:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f8b0:	ee07 3a90 	vmov	s15, r3
 800f8b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f8b8:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f960 <__ieee754_rem_pio2f+0x270>
 800f8bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f8c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8c4:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f8c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f8cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f8d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f8d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8d8:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f8dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f8e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e8:	edcd 7a05 	vstr	s15, [sp, #20]
 800f8ec:	d11e      	bne.n	800f92c <__ieee754_rem_pio2f+0x23c>
 800f8ee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f6:	bf14      	ite	ne
 800f8f8:	2302      	movne	r3, #2
 800f8fa:	2301      	moveq	r3, #1
 800f8fc:	4919      	ldr	r1, [pc, #100]	; (800f964 <__ieee754_rem_pio2f+0x274>)
 800f8fe:	9101      	str	r1, [sp, #4]
 800f900:	2102      	movs	r1, #2
 800f902:	9100      	str	r1, [sp, #0]
 800f904:	a803      	add	r0, sp, #12
 800f906:	4621      	mov	r1, r4
 800f908:	f000 fd68 	bl	80103dc <__kernel_rem_pio2f>
 800f90c:	2e00      	cmp	r6, #0
 800f90e:	f6bf af1c 	bge.w	800f74a <__ieee754_rem_pio2f+0x5a>
 800f912:	edd4 7a00 	vldr	s15, [r4]
 800f916:	eef1 7a67 	vneg.f32	s15, s15
 800f91a:	edc4 7a00 	vstr	s15, [r4]
 800f91e:	edd4 7a01 	vldr	s15, [r4, #4]
 800f922:	eef1 7a67 	vneg.f32	s15, s15
 800f926:	edc4 7a01 	vstr	s15, [r4, #4]
 800f92a:	e779      	b.n	800f820 <__ieee754_rem_pio2f+0x130>
 800f92c:	2303      	movs	r3, #3
 800f92e:	e7e5      	b.n	800f8fc <__ieee754_rem_pio2f+0x20c>
 800f930:	3f490fd8 	.word	0x3f490fd8
 800f934:	4016cbe3 	.word	0x4016cbe3
 800f938:	3fc90f80 	.word	0x3fc90f80
 800f93c:	3fc90fd0 	.word	0x3fc90fd0
 800f940:	37354443 	.word	0x37354443
 800f944:	37354400 	.word	0x37354400
 800f948:	2e85a308 	.word	0x2e85a308
 800f94c:	43490f80 	.word	0x43490f80
 800f950:	3f22f984 	.word	0x3f22f984
 800f954:	08010ed8 	.word	0x08010ed8
 800f958:	2e85a300 	.word	0x2e85a300
 800f95c:	248d3132 	.word	0x248d3132
 800f960:	43800000 	.word	0x43800000
 800f964:	08010f58 	.word	0x08010f58

0800f968 <__ieee754_sqrtf>:
 800f968:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f96c:	4770      	bx	lr
	...

0800f970 <__kernel_cos>:
 800f970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f974:	ec57 6b10 	vmov	r6, r7, d0
 800f978:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f97c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f980:	ed8d 1b00 	vstr	d1, [sp]
 800f984:	da07      	bge.n	800f996 <__kernel_cos+0x26>
 800f986:	ee10 0a10 	vmov	r0, s0
 800f98a:	4639      	mov	r1, r7
 800f98c:	f7f1 f888 	bl	8000aa0 <__aeabi_d2iz>
 800f990:	2800      	cmp	r0, #0
 800f992:	f000 8088 	beq.w	800faa6 <__kernel_cos+0x136>
 800f996:	4632      	mov	r2, r6
 800f998:	463b      	mov	r3, r7
 800f99a:	4630      	mov	r0, r6
 800f99c:	4639      	mov	r1, r7
 800f99e:	f7f0 fdcf 	bl	8000540 <__aeabi_dmul>
 800f9a2:	4b51      	ldr	r3, [pc, #324]	; (800fae8 <__kernel_cos+0x178>)
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	4604      	mov	r4, r0
 800f9a8:	460d      	mov	r5, r1
 800f9aa:	f7f0 fdc9 	bl	8000540 <__aeabi_dmul>
 800f9ae:	a340      	add	r3, pc, #256	; (adr r3, 800fab0 <__kernel_cos+0x140>)
 800f9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b4:	4682      	mov	sl, r0
 800f9b6:	468b      	mov	fp, r1
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	4629      	mov	r1, r5
 800f9bc:	f7f0 fdc0 	bl	8000540 <__aeabi_dmul>
 800f9c0:	a33d      	add	r3, pc, #244	; (adr r3, 800fab8 <__kernel_cos+0x148>)
 800f9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c6:	f7f0 fc05 	bl	80001d4 <__adddf3>
 800f9ca:	4622      	mov	r2, r4
 800f9cc:	462b      	mov	r3, r5
 800f9ce:	f7f0 fdb7 	bl	8000540 <__aeabi_dmul>
 800f9d2:	a33b      	add	r3, pc, #236	; (adr r3, 800fac0 <__kernel_cos+0x150>)
 800f9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d8:	f7f0 fbfa 	bl	80001d0 <__aeabi_dsub>
 800f9dc:	4622      	mov	r2, r4
 800f9de:	462b      	mov	r3, r5
 800f9e0:	f7f0 fdae 	bl	8000540 <__aeabi_dmul>
 800f9e4:	a338      	add	r3, pc, #224	; (adr r3, 800fac8 <__kernel_cos+0x158>)
 800f9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ea:	f7f0 fbf3 	bl	80001d4 <__adddf3>
 800f9ee:	4622      	mov	r2, r4
 800f9f0:	462b      	mov	r3, r5
 800f9f2:	f7f0 fda5 	bl	8000540 <__aeabi_dmul>
 800f9f6:	a336      	add	r3, pc, #216	; (adr r3, 800fad0 <__kernel_cos+0x160>)
 800f9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fc:	f7f0 fbe8 	bl	80001d0 <__aeabi_dsub>
 800fa00:	4622      	mov	r2, r4
 800fa02:	462b      	mov	r3, r5
 800fa04:	f7f0 fd9c 	bl	8000540 <__aeabi_dmul>
 800fa08:	a333      	add	r3, pc, #204	; (adr r3, 800fad8 <__kernel_cos+0x168>)
 800fa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0e:	f7f0 fbe1 	bl	80001d4 <__adddf3>
 800fa12:	4622      	mov	r2, r4
 800fa14:	462b      	mov	r3, r5
 800fa16:	f7f0 fd93 	bl	8000540 <__aeabi_dmul>
 800fa1a:	4622      	mov	r2, r4
 800fa1c:	462b      	mov	r3, r5
 800fa1e:	f7f0 fd8f 	bl	8000540 <__aeabi_dmul>
 800fa22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa26:	4604      	mov	r4, r0
 800fa28:	460d      	mov	r5, r1
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	4639      	mov	r1, r7
 800fa2e:	f7f0 fd87 	bl	8000540 <__aeabi_dmul>
 800fa32:	460b      	mov	r3, r1
 800fa34:	4602      	mov	r2, r0
 800fa36:	4629      	mov	r1, r5
 800fa38:	4620      	mov	r0, r4
 800fa3a:	f7f0 fbc9 	bl	80001d0 <__aeabi_dsub>
 800fa3e:	4b2b      	ldr	r3, [pc, #172]	; (800faec <__kernel_cos+0x17c>)
 800fa40:	4598      	cmp	r8, r3
 800fa42:	4606      	mov	r6, r0
 800fa44:	460f      	mov	r7, r1
 800fa46:	dc10      	bgt.n	800fa6a <__kernel_cos+0xfa>
 800fa48:	4602      	mov	r2, r0
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	4650      	mov	r0, sl
 800fa4e:	4659      	mov	r1, fp
 800fa50:	f7f0 fbbe 	bl	80001d0 <__aeabi_dsub>
 800fa54:	460b      	mov	r3, r1
 800fa56:	4926      	ldr	r1, [pc, #152]	; (800faf0 <__kernel_cos+0x180>)
 800fa58:	4602      	mov	r2, r0
 800fa5a:	2000      	movs	r0, #0
 800fa5c:	f7f0 fbb8 	bl	80001d0 <__aeabi_dsub>
 800fa60:	ec41 0b10 	vmov	d0, r0, r1
 800fa64:	b003      	add	sp, #12
 800fa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa6a:	4b22      	ldr	r3, [pc, #136]	; (800faf4 <__kernel_cos+0x184>)
 800fa6c:	4920      	ldr	r1, [pc, #128]	; (800faf0 <__kernel_cos+0x180>)
 800fa6e:	4598      	cmp	r8, r3
 800fa70:	bfcc      	ite	gt
 800fa72:	4d21      	ldrgt	r5, [pc, #132]	; (800faf8 <__kernel_cos+0x188>)
 800fa74:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800fa78:	2400      	movs	r4, #0
 800fa7a:	4622      	mov	r2, r4
 800fa7c:	462b      	mov	r3, r5
 800fa7e:	2000      	movs	r0, #0
 800fa80:	f7f0 fba6 	bl	80001d0 <__aeabi_dsub>
 800fa84:	4622      	mov	r2, r4
 800fa86:	4680      	mov	r8, r0
 800fa88:	4689      	mov	r9, r1
 800fa8a:	462b      	mov	r3, r5
 800fa8c:	4650      	mov	r0, sl
 800fa8e:	4659      	mov	r1, fp
 800fa90:	f7f0 fb9e 	bl	80001d0 <__aeabi_dsub>
 800fa94:	4632      	mov	r2, r6
 800fa96:	463b      	mov	r3, r7
 800fa98:	f7f0 fb9a 	bl	80001d0 <__aeabi_dsub>
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	460b      	mov	r3, r1
 800faa0:	4640      	mov	r0, r8
 800faa2:	4649      	mov	r1, r9
 800faa4:	e7da      	b.n	800fa5c <__kernel_cos+0xec>
 800faa6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800fae0 <__kernel_cos+0x170>
 800faaa:	e7db      	b.n	800fa64 <__kernel_cos+0xf4>
 800faac:	f3af 8000 	nop.w
 800fab0:	be8838d4 	.word	0xbe8838d4
 800fab4:	bda8fae9 	.word	0xbda8fae9
 800fab8:	bdb4b1c4 	.word	0xbdb4b1c4
 800fabc:	3e21ee9e 	.word	0x3e21ee9e
 800fac0:	809c52ad 	.word	0x809c52ad
 800fac4:	3e927e4f 	.word	0x3e927e4f
 800fac8:	19cb1590 	.word	0x19cb1590
 800facc:	3efa01a0 	.word	0x3efa01a0
 800fad0:	16c15177 	.word	0x16c15177
 800fad4:	3f56c16c 	.word	0x3f56c16c
 800fad8:	5555554c 	.word	0x5555554c
 800fadc:	3fa55555 	.word	0x3fa55555
 800fae0:	00000000 	.word	0x00000000
 800fae4:	3ff00000 	.word	0x3ff00000
 800fae8:	3fe00000 	.word	0x3fe00000
 800faec:	3fd33332 	.word	0x3fd33332
 800faf0:	3ff00000 	.word	0x3ff00000
 800faf4:	3fe90000 	.word	0x3fe90000
 800faf8:	3fd20000 	.word	0x3fd20000
 800fafc:	00000000 	.word	0x00000000

0800fb00 <__kernel_rem_pio2>:
 800fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb04:	ed2d 8b02 	vpush	{d8}
 800fb08:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800fb0c:	f112 0f14 	cmn.w	r2, #20
 800fb10:	9308      	str	r3, [sp, #32]
 800fb12:	9101      	str	r1, [sp, #4]
 800fb14:	4bc4      	ldr	r3, [pc, #784]	; (800fe28 <__kernel_rem_pio2+0x328>)
 800fb16:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800fb18:	900b      	str	r0, [sp, #44]	; 0x2c
 800fb1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fb1e:	9302      	str	r3, [sp, #8]
 800fb20:	9b08      	ldr	r3, [sp, #32]
 800fb22:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800fb26:	bfa8      	it	ge
 800fb28:	1ed4      	subge	r4, r2, #3
 800fb2a:	9306      	str	r3, [sp, #24]
 800fb2c:	bfb2      	itee	lt
 800fb2e:	2400      	movlt	r4, #0
 800fb30:	2318      	movge	r3, #24
 800fb32:	fb94 f4f3 	sdivge	r4, r4, r3
 800fb36:	f06f 0317 	mvn.w	r3, #23
 800fb3a:	fb04 3303 	mla	r3, r4, r3, r3
 800fb3e:	eb03 0a02 	add.w	sl, r3, r2
 800fb42:	9b02      	ldr	r3, [sp, #8]
 800fb44:	9a06      	ldr	r2, [sp, #24]
 800fb46:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800fe18 <__kernel_rem_pio2+0x318>
 800fb4a:	eb03 0802 	add.w	r8, r3, r2
 800fb4e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fb50:	1aa7      	subs	r7, r4, r2
 800fb52:	ae22      	add	r6, sp, #136	; 0x88
 800fb54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fb58:	2500      	movs	r5, #0
 800fb5a:	4545      	cmp	r5, r8
 800fb5c:	dd13      	ble.n	800fb86 <__kernel_rem_pio2+0x86>
 800fb5e:	9b08      	ldr	r3, [sp, #32]
 800fb60:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800fe18 <__kernel_rem_pio2+0x318>
 800fb64:	aa22      	add	r2, sp, #136	; 0x88
 800fb66:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fb6a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800fb6e:	f04f 0800 	mov.w	r8, #0
 800fb72:	9b02      	ldr	r3, [sp, #8]
 800fb74:	4598      	cmp	r8, r3
 800fb76:	dc2f      	bgt.n	800fbd8 <__kernel_rem_pio2+0xd8>
 800fb78:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fb7c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800fb80:	462f      	mov	r7, r5
 800fb82:	2600      	movs	r6, #0
 800fb84:	e01b      	b.n	800fbbe <__kernel_rem_pio2+0xbe>
 800fb86:	42ef      	cmn	r7, r5
 800fb88:	d407      	bmi.n	800fb9a <__kernel_rem_pio2+0x9a>
 800fb8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fb8e:	f7f0 fc6d 	bl	800046c <__aeabi_i2d>
 800fb92:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fb96:	3501      	adds	r5, #1
 800fb98:	e7df      	b.n	800fb5a <__kernel_rem_pio2+0x5a>
 800fb9a:	ec51 0b18 	vmov	r0, r1, d8
 800fb9e:	e7f8      	b.n	800fb92 <__kernel_rem_pio2+0x92>
 800fba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fba4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fba8:	f7f0 fcca 	bl	8000540 <__aeabi_dmul>
 800fbac:	4602      	mov	r2, r0
 800fbae:	460b      	mov	r3, r1
 800fbb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fbb4:	f7f0 fb0e 	bl	80001d4 <__adddf3>
 800fbb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fbbc:	3601      	adds	r6, #1
 800fbbe:	9b06      	ldr	r3, [sp, #24]
 800fbc0:	429e      	cmp	r6, r3
 800fbc2:	f1a7 0708 	sub.w	r7, r7, #8
 800fbc6:	ddeb      	ble.n	800fba0 <__kernel_rem_pio2+0xa0>
 800fbc8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fbcc:	f108 0801 	add.w	r8, r8, #1
 800fbd0:	ecab 7b02 	vstmia	fp!, {d7}
 800fbd4:	3508      	adds	r5, #8
 800fbd6:	e7cc      	b.n	800fb72 <__kernel_rem_pio2+0x72>
 800fbd8:	9b02      	ldr	r3, [sp, #8]
 800fbda:	aa0e      	add	r2, sp, #56	; 0x38
 800fbdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fbe0:	930d      	str	r3, [sp, #52]	; 0x34
 800fbe2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fbe4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fbe8:	9c02      	ldr	r4, [sp, #8]
 800fbea:	930c      	str	r3, [sp, #48]	; 0x30
 800fbec:	00e3      	lsls	r3, r4, #3
 800fbee:	930a      	str	r3, [sp, #40]	; 0x28
 800fbf0:	ab9a      	add	r3, sp, #616	; 0x268
 800fbf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fbf6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fbfa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fbfe:	ab72      	add	r3, sp, #456	; 0x1c8
 800fc00:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fc04:	46c3      	mov	fp, r8
 800fc06:	46a1      	mov	r9, r4
 800fc08:	f1b9 0f00 	cmp.w	r9, #0
 800fc0c:	f1a5 0508 	sub.w	r5, r5, #8
 800fc10:	dc77      	bgt.n	800fd02 <__kernel_rem_pio2+0x202>
 800fc12:	ec47 6b10 	vmov	d0, r6, r7
 800fc16:	4650      	mov	r0, sl
 800fc18:	f000 ff06 	bl	8010a28 <scalbn>
 800fc1c:	ec57 6b10 	vmov	r6, r7, d0
 800fc20:	2200      	movs	r2, #0
 800fc22:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fc26:	ee10 0a10 	vmov	r0, s0
 800fc2a:	4639      	mov	r1, r7
 800fc2c:	f7f0 fc88 	bl	8000540 <__aeabi_dmul>
 800fc30:	ec41 0b10 	vmov	d0, r0, r1
 800fc34:	f7fe f86c 	bl	800dd10 <floor>
 800fc38:	4b7c      	ldr	r3, [pc, #496]	; (800fe2c <__kernel_rem_pio2+0x32c>)
 800fc3a:	ec51 0b10 	vmov	r0, r1, d0
 800fc3e:	2200      	movs	r2, #0
 800fc40:	f7f0 fc7e 	bl	8000540 <__aeabi_dmul>
 800fc44:	4602      	mov	r2, r0
 800fc46:	460b      	mov	r3, r1
 800fc48:	4630      	mov	r0, r6
 800fc4a:	4639      	mov	r1, r7
 800fc4c:	f7f0 fac0 	bl	80001d0 <__aeabi_dsub>
 800fc50:	460f      	mov	r7, r1
 800fc52:	4606      	mov	r6, r0
 800fc54:	f7f0 ff24 	bl	8000aa0 <__aeabi_d2iz>
 800fc58:	9004      	str	r0, [sp, #16]
 800fc5a:	f7f0 fc07 	bl	800046c <__aeabi_i2d>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	460b      	mov	r3, r1
 800fc62:	4630      	mov	r0, r6
 800fc64:	4639      	mov	r1, r7
 800fc66:	f7f0 fab3 	bl	80001d0 <__aeabi_dsub>
 800fc6a:	f1ba 0f00 	cmp.w	sl, #0
 800fc6e:	4606      	mov	r6, r0
 800fc70:	460f      	mov	r7, r1
 800fc72:	dd6d      	ble.n	800fd50 <__kernel_rem_pio2+0x250>
 800fc74:	1e62      	subs	r2, r4, #1
 800fc76:	ab0e      	add	r3, sp, #56	; 0x38
 800fc78:	9d04      	ldr	r5, [sp, #16]
 800fc7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fc7e:	f1ca 0118 	rsb	r1, sl, #24
 800fc82:	fa40 f301 	asr.w	r3, r0, r1
 800fc86:	441d      	add	r5, r3
 800fc88:	408b      	lsls	r3, r1
 800fc8a:	1ac0      	subs	r0, r0, r3
 800fc8c:	ab0e      	add	r3, sp, #56	; 0x38
 800fc8e:	9504      	str	r5, [sp, #16]
 800fc90:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800fc94:	f1ca 0317 	rsb	r3, sl, #23
 800fc98:	fa40 fb03 	asr.w	fp, r0, r3
 800fc9c:	f1bb 0f00 	cmp.w	fp, #0
 800fca0:	dd65      	ble.n	800fd6e <__kernel_rem_pio2+0x26e>
 800fca2:	9b04      	ldr	r3, [sp, #16]
 800fca4:	2200      	movs	r2, #0
 800fca6:	3301      	adds	r3, #1
 800fca8:	9304      	str	r3, [sp, #16]
 800fcaa:	4615      	mov	r5, r2
 800fcac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800fcb0:	4294      	cmp	r4, r2
 800fcb2:	f300 809c 	bgt.w	800fdee <__kernel_rem_pio2+0x2ee>
 800fcb6:	f1ba 0f00 	cmp.w	sl, #0
 800fcba:	dd07      	ble.n	800fccc <__kernel_rem_pio2+0x1cc>
 800fcbc:	f1ba 0f01 	cmp.w	sl, #1
 800fcc0:	f000 80c0 	beq.w	800fe44 <__kernel_rem_pio2+0x344>
 800fcc4:	f1ba 0f02 	cmp.w	sl, #2
 800fcc8:	f000 80c6 	beq.w	800fe58 <__kernel_rem_pio2+0x358>
 800fccc:	f1bb 0f02 	cmp.w	fp, #2
 800fcd0:	d14d      	bne.n	800fd6e <__kernel_rem_pio2+0x26e>
 800fcd2:	4632      	mov	r2, r6
 800fcd4:	463b      	mov	r3, r7
 800fcd6:	4956      	ldr	r1, [pc, #344]	; (800fe30 <__kernel_rem_pio2+0x330>)
 800fcd8:	2000      	movs	r0, #0
 800fcda:	f7f0 fa79 	bl	80001d0 <__aeabi_dsub>
 800fcde:	4606      	mov	r6, r0
 800fce0:	460f      	mov	r7, r1
 800fce2:	2d00      	cmp	r5, #0
 800fce4:	d043      	beq.n	800fd6e <__kernel_rem_pio2+0x26e>
 800fce6:	4650      	mov	r0, sl
 800fce8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800fe20 <__kernel_rem_pio2+0x320>
 800fcec:	f000 fe9c 	bl	8010a28 <scalbn>
 800fcf0:	4630      	mov	r0, r6
 800fcf2:	4639      	mov	r1, r7
 800fcf4:	ec53 2b10 	vmov	r2, r3, d0
 800fcf8:	f7f0 fa6a 	bl	80001d0 <__aeabi_dsub>
 800fcfc:	4606      	mov	r6, r0
 800fcfe:	460f      	mov	r7, r1
 800fd00:	e035      	b.n	800fd6e <__kernel_rem_pio2+0x26e>
 800fd02:	4b4c      	ldr	r3, [pc, #304]	; (800fe34 <__kernel_rem_pio2+0x334>)
 800fd04:	2200      	movs	r2, #0
 800fd06:	4630      	mov	r0, r6
 800fd08:	4639      	mov	r1, r7
 800fd0a:	f7f0 fc19 	bl	8000540 <__aeabi_dmul>
 800fd0e:	f7f0 fec7 	bl	8000aa0 <__aeabi_d2iz>
 800fd12:	f7f0 fbab 	bl	800046c <__aeabi_i2d>
 800fd16:	4602      	mov	r2, r0
 800fd18:	460b      	mov	r3, r1
 800fd1a:	ec43 2b18 	vmov	d8, r2, r3
 800fd1e:	4b46      	ldr	r3, [pc, #280]	; (800fe38 <__kernel_rem_pio2+0x338>)
 800fd20:	2200      	movs	r2, #0
 800fd22:	f7f0 fc0d 	bl	8000540 <__aeabi_dmul>
 800fd26:	4602      	mov	r2, r0
 800fd28:	460b      	mov	r3, r1
 800fd2a:	4630      	mov	r0, r6
 800fd2c:	4639      	mov	r1, r7
 800fd2e:	f7f0 fa4f 	bl	80001d0 <__aeabi_dsub>
 800fd32:	f7f0 feb5 	bl	8000aa0 <__aeabi_d2iz>
 800fd36:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd3a:	f84b 0b04 	str.w	r0, [fp], #4
 800fd3e:	ec51 0b18 	vmov	r0, r1, d8
 800fd42:	f7f0 fa47 	bl	80001d4 <__adddf3>
 800fd46:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800fd4a:	4606      	mov	r6, r0
 800fd4c:	460f      	mov	r7, r1
 800fd4e:	e75b      	b.n	800fc08 <__kernel_rem_pio2+0x108>
 800fd50:	d106      	bne.n	800fd60 <__kernel_rem_pio2+0x260>
 800fd52:	1e63      	subs	r3, r4, #1
 800fd54:	aa0e      	add	r2, sp, #56	; 0x38
 800fd56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fd5a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800fd5e:	e79d      	b.n	800fc9c <__kernel_rem_pio2+0x19c>
 800fd60:	4b36      	ldr	r3, [pc, #216]	; (800fe3c <__kernel_rem_pio2+0x33c>)
 800fd62:	2200      	movs	r2, #0
 800fd64:	f7f0 fe72 	bl	8000a4c <__aeabi_dcmpge>
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	d13d      	bne.n	800fde8 <__kernel_rem_pio2+0x2e8>
 800fd6c:	4683      	mov	fp, r0
 800fd6e:	2200      	movs	r2, #0
 800fd70:	2300      	movs	r3, #0
 800fd72:	4630      	mov	r0, r6
 800fd74:	4639      	mov	r1, r7
 800fd76:	f7f0 fe4b 	bl	8000a10 <__aeabi_dcmpeq>
 800fd7a:	2800      	cmp	r0, #0
 800fd7c:	f000 80c0 	beq.w	800ff00 <__kernel_rem_pio2+0x400>
 800fd80:	1e65      	subs	r5, r4, #1
 800fd82:	462b      	mov	r3, r5
 800fd84:	2200      	movs	r2, #0
 800fd86:	9902      	ldr	r1, [sp, #8]
 800fd88:	428b      	cmp	r3, r1
 800fd8a:	da6c      	bge.n	800fe66 <__kernel_rem_pio2+0x366>
 800fd8c:	2a00      	cmp	r2, #0
 800fd8e:	f000 8089 	beq.w	800fea4 <__kernel_rem_pio2+0x3a4>
 800fd92:	ab0e      	add	r3, sp, #56	; 0x38
 800fd94:	f1aa 0a18 	sub.w	sl, sl, #24
 800fd98:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	f000 80ad 	beq.w	800fefc <__kernel_rem_pio2+0x3fc>
 800fda2:	4650      	mov	r0, sl
 800fda4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800fe20 <__kernel_rem_pio2+0x320>
 800fda8:	f000 fe3e 	bl	8010a28 <scalbn>
 800fdac:	ab9a      	add	r3, sp, #616	; 0x268
 800fdae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fdb2:	ec57 6b10 	vmov	r6, r7, d0
 800fdb6:	00ec      	lsls	r4, r5, #3
 800fdb8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800fdbc:	46aa      	mov	sl, r5
 800fdbe:	f1ba 0f00 	cmp.w	sl, #0
 800fdc2:	f280 80d6 	bge.w	800ff72 <__kernel_rem_pio2+0x472>
 800fdc6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800fe18 <__kernel_rem_pio2+0x318>
 800fdca:	462e      	mov	r6, r5
 800fdcc:	2e00      	cmp	r6, #0
 800fdce:	f2c0 8104 	blt.w	800ffda <__kernel_rem_pio2+0x4da>
 800fdd2:	ab72      	add	r3, sp, #456	; 0x1c8
 800fdd4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800fdd8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800fe40 <__kernel_rem_pio2+0x340>
 800fddc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800fde0:	f04f 0800 	mov.w	r8, #0
 800fde4:	1baf      	subs	r7, r5, r6
 800fde6:	e0ea      	b.n	800ffbe <__kernel_rem_pio2+0x4be>
 800fde8:	f04f 0b02 	mov.w	fp, #2
 800fdec:	e759      	b.n	800fca2 <__kernel_rem_pio2+0x1a2>
 800fdee:	f8d8 3000 	ldr.w	r3, [r8]
 800fdf2:	b955      	cbnz	r5, 800fe0a <__kernel_rem_pio2+0x30a>
 800fdf4:	b123      	cbz	r3, 800fe00 <__kernel_rem_pio2+0x300>
 800fdf6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fdfa:	f8c8 3000 	str.w	r3, [r8]
 800fdfe:	2301      	movs	r3, #1
 800fe00:	3201      	adds	r2, #1
 800fe02:	f108 0804 	add.w	r8, r8, #4
 800fe06:	461d      	mov	r5, r3
 800fe08:	e752      	b.n	800fcb0 <__kernel_rem_pio2+0x1b0>
 800fe0a:	1acb      	subs	r3, r1, r3
 800fe0c:	f8c8 3000 	str.w	r3, [r8]
 800fe10:	462b      	mov	r3, r5
 800fe12:	e7f5      	b.n	800fe00 <__kernel_rem_pio2+0x300>
 800fe14:	f3af 8000 	nop.w
	...
 800fe24:	3ff00000 	.word	0x3ff00000
 800fe28:	080112b0 	.word	0x080112b0
 800fe2c:	40200000 	.word	0x40200000
 800fe30:	3ff00000 	.word	0x3ff00000
 800fe34:	3e700000 	.word	0x3e700000
 800fe38:	41700000 	.word	0x41700000
 800fe3c:	3fe00000 	.word	0x3fe00000
 800fe40:	08011270 	.word	0x08011270
 800fe44:	1e62      	subs	r2, r4, #1
 800fe46:	ab0e      	add	r3, sp, #56	; 0x38
 800fe48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe4c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fe50:	a90e      	add	r1, sp, #56	; 0x38
 800fe52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fe56:	e739      	b.n	800fccc <__kernel_rem_pio2+0x1cc>
 800fe58:	1e62      	subs	r2, r4, #1
 800fe5a:	ab0e      	add	r3, sp, #56	; 0x38
 800fe5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fe64:	e7f4      	b.n	800fe50 <__kernel_rem_pio2+0x350>
 800fe66:	a90e      	add	r1, sp, #56	; 0x38
 800fe68:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fe6c:	3b01      	subs	r3, #1
 800fe6e:	430a      	orrs	r2, r1
 800fe70:	e789      	b.n	800fd86 <__kernel_rem_pio2+0x286>
 800fe72:	3301      	adds	r3, #1
 800fe74:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fe78:	2900      	cmp	r1, #0
 800fe7a:	d0fa      	beq.n	800fe72 <__kernel_rem_pio2+0x372>
 800fe7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe7e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800fe82:	446a      	add	r2, sp
 800fe84:	3a98      	subs	r2, #152	; 0x98
 800fe86:	920a      	str	r2, [sp, #40]	; 0x28
 800fe88:	9a08      	ldr	r2, [sp, #32]
 800fe8a:	18e3      	adds	r3, r4, r3
 800fe8c:	18a5      	adds	r5, r4, r2
 800fe8e:	aa22      	add	r2, sp, #136	; 0x88
 800fe90:	f104 0801 	add.w	r8, r4, #1
 800fe94:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800fe98:	9304      	str	r3, [sp, #16]
 800fe9a:	9b04      	ldr	r3, [sp, #16]
 800fe9c:	4543      	cmp	r3, r8
 800fe9e:	da04      	bge.n	800feaa <__kernel_rem_pio2+0x3aa>
 800fea0:	461c      	mov	r4, r3
 800fea2:	e6a3      	b.n	800fbec <__kernel_rem_pio2+0xec>
 800fea4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fea6:	2301      	movs	r3, #1
 800fea8:	e7e4      	b.n	800fe74 <__kernel_rem_pio2+0x374>
 800feaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800feac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800feb0:	f7f0 fadc 	bl	800046c <__aeabi_i2d>
 800feb4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800feb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800feba:	46ab      	mov	fp, r5
 800febc:	461c      	mov	r4, r3
 800febe:	f04f 0900 	mov.w	r9, #0
 800fec2:	2600      	movs	r6, #0
 800fec4:	2700      	movs	r7, #0
 800fec6:	9b06      	ldr	r3, [sp, #24]
 800fec8:	4599      	cmp	r9, r3
 800feca:	dd06      	ble.n	800feda <__kernel_rem_pio2+0x3da>
 800fecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fece:	e8e3 6702 	strd	r6, r7, [r3], #8
 800fed2:	f108 0801 	add.w	r8, r8, #1
 800fed6:	930a      	str	r3, [sp, #40]	; 0x28
 800fed8:	e7df      	b.n	800fe9a <__kernel_rem_pio2+0x39a>
 800feda:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800fede:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800fee2:	f7f0 fb2d 	bl	8000540 <__aeabi_dmul>
 800fee6:	4602      	mov	r2, r0
 800fee8:	460b      	mov	r3, r1
 800feea:	4630      	mov	r0, r6
 800feec:	4639      	mov	r1, r7
 800feee:	f7f0 f971 	bl	80001d4 <__adddf3>
 800fef2:	f109 0901 	add.w	r9, r9, #1
 800fef6:	4606      	mov	r6, r0
 800fef8:	460f      	mov	r7, r1
 800fefa:	e7e4      	b.n	800fec6 <__kernel_rem_pio2+0x3c6>
 800fefc:	3d01      	subs	r5, #1
 800fefe:	e748      	b.n	800fd92 <__kernel_rem_pio2+0x292>
 800ff00:	ec47 6b10 	vmov	d0, r6, r7
 800ff04:	f1ca 0000 	rsb	r0, sl, #0
 800ff08:	f000 fd8e 	bl	8010a28 <scalbn>
 800ff0c:	ec57 6b10 	vmov	r6, r7, d0
 800ff10:	4ba0      	ldr	r3, [pc, #640]	; (8010194 <__kernel_rem_pio2+0x694>)
 800ff12:	ee10 0a10 	vmov	r0, s0
 800ff16:	2200      	movs	r2, #0
 800ff18:	4639      	mov	r1, r7
 800ff1a:	f7f0 fd97 	bl	8000a4c <__aeabi_dcmpge>
 800ff1e:	b1f8      	cbz	r0, 800ff60 <__kernel_rem_pio2+0x460>
 800ff20:	4b9d      	ldr	r3, [pc, #628]	; (8010198 <__kernel_rem_pio2+0x698>)
 800ff22:	2200      	movs	r2, #0
 800ff24:	4630      	mov	r0, r6
 800ff26:	4639      	mov	r1, r7
 800ff28:	f7f0 fb0a 	bl	8000540 <__aeabi_dmul>
 800ff2c:	f7f0 fdb8 	bl	8000aa0 <__aeabi_d2iz>
 800ff30:	4680      	mov	r8, r0
 800ff32:	f7f0 fa9b 	bl	800046c <__aeabi_i2d>
 800ff36:	4b97      	ldr	r3, [pc, #604]	; (8010194 <__kernel_rem_pio2+0x694>)
 800ff38:	2200      	movs	r2, #0
 800ff3a:	f7f0 fb01 	bl	8000540 <__aeabi_dmul>
 800ff3e:	460b      	mov	r3, r1
 800ff40:	4602      	mov	r2, r0
 800ff42:	4639      	mov	r1, r7
 800ff44:	4630      	mov	r0, r6
 800ff46:	f7f0 f943 	bl	80001d0 <__aeabi_dsub>
 800ff4a:	f7f0 fda9 	bl	8000aa0 <__aeabi_d2iz>
 800ff4e:	1c65      	adds	r5, r4, #1
 800ff50:	ab0e      	add	r3, sp, #56	; 0x38
 800ff52:	f10a 0a18 	add.w	sl, sl, #24
 800ff56:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ff5a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ff5e:	e720      	b.n	800fda2 <__kernel_rem_pio2+0x2a2>
 800ff60:	4630      	mov	r0, r6
 800ff62:	4639      	mov	r1, r7
 800ff64:	f7f0 fd9c 	bl	8000aa0 <__aeabi_d2iz>
 800ff68:	ab0e      	add	r3, sp, #56	; 0x38
 800ff6a:	4625      	mov	r5, r4
 800ff6c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ff70:	e717      	b.n	800fda2 <__kernel_rem_pio2+0x2a2>
 800ff72:	ab0e      	add	r3, sp, #56	; 0x38
 800ff74:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ff78:	f7f0 fa78 	bl	800046c <__aeabi_i2d>
 800ff7c:	4632      	mov	r2, r6
 800ff7e:	463b      	mov	r3, r7
 800ff80:	f7f0 fade 	bl	8000540 <__aeabi_dmul>
 800ff84:	4b84      	ldr	r3, [pc, #528]	; (8010198 <__kernel_rem_pio2+0x698>)
 800ff86:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	4639      	mov	r1, r7
 800ff90:	f7f0 fad6 	bl	8000540 <__aeabi_dmul>
 800ff94:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ff98:	4606      	mov	r6, r0
 800ff9a:	460f      	mov	r7, r1
 800ff9c:	e70f      	b.n	800fdbe <__kernel_rem_pio2+0x2be>
 800ff9e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ffa2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ffa6:	f7f0 facb 	bl	8000540 <__aeabi_dmul>
 800ffaa:	4602      	mov	r2, r0
 800ffac:	460b      	mov	r3, r1
 800ffae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ffb2:	f7f0 f90f 	bl	80001d4 <__adddf3>
 800ffb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ffba:	f108 0801 	add.w	r8, r8, #1
 800ffbe:	9b02      	ldr	r3, [sp, #8]
 800ffc0:	4598      	cmp	r8, r3
 800ffc2:	dc01      	bgt.n	800ffc8 <__kernel_rem_pio2+0x4c8>
 800ffc4:	45b8      	cmp	r8, r7
 800ffc6:	ddea      	ble.n	800ff9e <__kernel_rem_pio2+0x49e>
 800ffc8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ffcc:	ab4a      	add	r3, sp, #296	; 0x128
 800ffce:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ffd2:	ed87 7b00 	vstr	d7, [r7]
 800ffd6:	3e01      	subs	r6, #1
 800ffd8:	e6f8      	b.n	800fdcc <__kernel_rem_pio2+0x2cc>
 800ffda:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ffdc:	2b02      	cmp	r3, #2
 800ffde:	dc0b      	bgt.n	800fff8 <__kernel_rem_pio2+0x4f8>
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	dc35      	bgt.n	8010050 <__kernel_rem_pio2+0x550>
 800ffe4:	d059      	beq.n	801009a <__kernel_rem_pio2+0x59a>
 800ffe6:	9b04      	ldr	r3, [sp, #16]
 800ffe8:	f003 0007 	and.w	r0, r3, #7
 800ffec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800fff0:	ecbd 8b02 	vpop	{d8}
 800fff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fff8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800fffa:	2b03      	cmp	r3, #3
 800fffc:	d1f3      	bne.n	800ffe6 <__kernel_rem_pio2+0x4e6>
 800fffe:	ab4a      	add	r3, sp, #296	; 0x128
 8010000:	4423      	add	r3, r4
 8010002:	9306      	str	r3, [sp, #24]
 8010004:	461c      	mov	r4, r3
 8010006:	469a      	mov	sl, r3
 8010008:	9502      	str	r5, [sp, #8]
 801000a:	9b02      	ldr	r3, [sp, #8]
 801000c:	2b00      	cmp	r3, #0
 801000e:	f1aa 0a08 	sub.w	sl, sl, #8
 8010012:	dc6b      	bgt.n	80100ec <__kernel_rem_pio2+0x5ec>
 8010014:	46aa      	mov	sl, r5
 8010016:	f1ba 0f01 	cmp.w	sl, #1
 801001a:	f1a4 0408 	sub.w	r4, r4, #8
 801001e:	f300 8085 	bgt.w	801012c <__kernel_rem_pio2+0x62c>
 8010022:	9c06      	ldr	r4, [sp, #24]
 8010024:	2000      	movs	r0, #0
 8010026:	3408      	adds	r4, #8
 8010028:	2100      	movs	r1, #0
 801002a:	2d01      	cmp	r5, #1
 801002c:	f300 809d 	bgt.w	801016a <__kernel_rem_pio2+0x66a>
 8010030:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010034:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8010038:	f1bb 0f00 	cmp.w	fp, #0
 801003c:	f040 809b 	bne.w	8010176 <__kernel_rem_pio2+0x676>
 8010040:	9b01      	ldr	r3, [sp, #4]
 8010042:	e9c3 5600 	strd	r5, r6, [r3]
 8010046:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801004a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801004e:	e7ca      	b.n	800ffe6 <__kernel_rem_pio2+0x4e6>
 8010050:	3408      	adds	r4, #8
 8010052:	ab4a      	add	r3, sp, #296	; 0x128
 8010054:	441c      	add	r4, r3
 8010056:	462e      	mov	r6, r5
 8010058:	2000      	movs	r0, #0
 801005a:	2100      	movs	r1, #0
 801005c:	2e00      	cmp	r6, #0
 801005e:	da36      	bge.n	80100ce <__kernel_rem_pio2+0x5ce>
 8010060:	f1bb 0f00 	cmp.w	fp, #0
 8010064:	d039      	beq.n	80100da <__kernel_rem_pio2+0x5da>
 8010066:	4602      	mov	r2, r0
 8010068:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801006c:	9c01      	ldr	r4, [sp, #4]
 801006e:	e9c4 2300 	strd	r2, r3, [r4]
 8010072:	4602      	mov	r2, r0
 8010074:	460b      	mov	r3, r1
 8010076:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801007a:	f7f0 f8a9 	bl	80001d0 <__aeabi_dsub>
 801007e:	ae4c      	add	r6, sp, #304	; 0x130
 8010080:	2401      	movs	r4, #1
 8010082:	42a5      	cmp	r5, r4
 8010084:	da2c      	bge.n	80100e0 <__kernel_rem_pio2+0x5e0>
 8010086:	f1bb 0f00 	cmp.w	fp, #0
 801008a:	d002      	beq.n	8010092 <__kernel_rem_pio2+0x592>
 801008c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010090:	4619      	mov	r1, r3
 8010092:	9b01      	ldr	r3, [sp, #4]
 8010094:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010098:	e7a5      	b.n	800ffe6 <__kernel_rem_pio2+0x4e6>
 801009a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801009e:	eb0d 0403 	add.w	r4, sp, r3
 80100a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80100a6:	2000      	movs	r0, #0
 80100a8:	2100      	movs	r1, #0
 80100aa:	2d00      	cmp	r5, #0
 80100ac:	da09      	bge.n	80100c2 <__kernel_rem_pio2+0x5c2>
 80100ae:	f1bb 0f00 	cmp.w	fp, #0
 80100b2:	d002      	beq.n	80100ba <__kernel_rem_pio2+0x5ba>
 80100b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100b8:	4619      	mov	r1, r3
 80100ba:	9b01      	ldr	r3, [sp, #4]
 80100bc:	e9c3 0100 	strd	r0, r1, [r3]
 80100c0:	e791      	b.n	800ffe6 <__kernel_rem_pio2+0x4e6>
 80100c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80100c6:	f7f0 f885 	bl	80001d4 <__adddf3>
 80100ca:	3d01      	subs	r5, #1
 80100cc:	e7ed      	b.n	80100aa <__kernel_rem_pio2+0x5aa>
 80100ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80100d2:	f7f0 f87f 	bl	80001d4 <__adddf3>
 80100d6:	3e01      	subs	r6, #1
 80100d8:	e7c0      	b.n	801005c <__kernel_rem_pio2+0x55c>
 80100da:	4602      	mov	r2, r0
 80100dc:	460b      	mov	r3, r1
 80100de:	e7c5      	b.n	801006c <__kernel_rem_pio2+0x56c>
 80100e0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80100e4:	f7f0 f876 	bl	80001d4 <__adddf3>
 80100e8:	3401      	adds	r4, #1
 80100ea:	e7ca      	b.n	8010082 <__kernel_rem_pio2+0x582>
 80100ec:	e9da 8900 	ldrd	r8, r9, [sl]
 80100f0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80100f4:	9b02      	ldr	r3, [sp, #8]
 80100f6:	3b01      	subs	r3, #1
 80100f8:	9302      	str	r3, [sp, #8]
 80100fa:	4632      	mov	r2, r6
 80100fc:	463b      	mov	r3, r7
 80100fe:	4640      	mov	r0, r8
 8010100:	4649      	mov	r1, r9
 8010102:	f7f0 f867 	bl	80001d4 <__adddf3>
 8010106:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801010a:	4602      	mov	r2, r0
 801010c:	460b      	mov	r3, r1
 801010e:	4640      	mov	r0, r8
 8010110:	4649      	mov	r1, r9
 8010112:	f7f0 f85d 	bl	80001d0 <__aeabi_dsub>
 8010116:	4632      	mov	r2, r6
 8010118:	463b      	mov	r3, r7
 801011a:	f7f0 f85b 	bl	80001d4 <__adddf3>
 801011e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8010122:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010126:	ed8a 7b00 	vstr	d7, [sl]
 801012a:	e76e      	b.n	801000a <__kernel_rem_pio2+0x50a>
 801012c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010130:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010134:	4640      	mov	r0, r8
 8010136:	4632      	mov	r2, r6
 8010138:	463b      	mov	r3, r7
 801013a:	4649      	mov	r1, r9
 801013c:	f7f0 f84a 	bl	80001d4 <__adddf3>
 8010140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	4640      	mov	r0, r8
 801014a:	4649      	mov	r1, r9
 801014c:	f7f0 f840 	bl	80001d0 <__aeabi_dsub>
 8010150:	4632      	mov	r2, r6
 8010152:	463b      	mov	r3, r7
 8010154:	f7f0 f83e 	bl	80001d4 <__adddf3>
 8010158:	ed9d 7b02 	vldr	d7, [sp, #8]
 801015c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010160:	ed84 7b00 	vstr	d7, [r4]
 8010164:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010168:	e755      	b.n	8010016 <__kernel_rem_pio2+0x516>
 801016a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801016e:	f7f0 f831 	bl	80001d4 <__adddf3>
 8010172:	3d01      	subs	r5, #1
 8010174:	e759      	b.n	801002a <__kernel_rem_pio2+0x52a>
 8010176:	9b01      	ldr	r3, [sp, #4]
 8010178:	9a01      	ldr	r2, [sp, #4]
 801017a:	601d      	str	r5, [r3, #0]
 801017c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010180:	605c      	str	r4, [r3, #4]
 8010182:	609f      	str	r7, [r3, #8]
 8010184:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010188:	60d3      	str	r3, [r2, #12]
 801018a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801018e:	6110      	str	r0, [r2, #16]
 8010190:	6153      	str	r3, [r2, #20]
 8010192:	e728      	b.n	800ffe6 <__kernel_rem_pio2+0x4e6>
 8010194:	41700000 	.word	0x41700000
 8010198:	3e700000 	.word	0x3e700000
 801019c:	00000000 	.word	0x00000000

080101a0 <__kernel_sin>:
 80101a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a4:	ed2d 8b04 	vpush	{d8-d9}
 80101a8:	eeb0 8a41 	vmov.f32	s16, s2
 80101ac:	eef0 8a61 	vmov.f32	s17, s3
 80101b0:	ec55 4b10 	vmov	r4, r5, d0
 80101b4:	b083      	sub	sp, #12
 80101b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80101ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80101be:	9001      	str	r0, [sp, #4]
 80101c0:	da06      	bge.n	80101d0 <__kernel_sin+0x30>
 80101c2:	ee10 0a10 	vmov	r0, s0
 80101c6:	4629      	mov	r1, r5
 80101c8:	f7f0 fc6a 	bl	8000aa0 <__aeabi_d2iz>
 80101cc:	2800      	cmp	r0, #0
 80101ce:	d051      	beq.n	8010274 <__kernel_sin+0xd4>
 80101d0:	4622      	mov	r2, r4
 80101d2:	462b      	mov	r3, r5
 80101d4:	4620      	mov	r0, r4
 80101d6:	4629      	mov	r1, r5
 80101d8:	f7f0 f9b2 	bl	8000540 <__aeabi_dmul>
 80101dc:	4682      	mov	sl, r0
 80101de:	468b      	mov	fp, r1
 80101e0:	4602      	mov	r2, r0
 80101e2:	460b      	mov	r3, r1
 80101e4:	4620      	mov	r0, r4
 80101e6:	4629      	mov	r1, r5
 80101e8:	f7f0 f9aa 	bl	8000540 <__aeabi_dmul>
 80101ec:	a341      	add	r3, pc, #260	; (adr r3, 80102f4 <__kernel_sin+0x154>)
 80101ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f2:	4680      	mov	r8, r0
 80101f4:	4689      	mov	r9, r1
 80101f6:	4650      	mov	r0, sl
 80101f8:	4659      	mov	r1, fp
 80101fa:	f7f0 f9a1 	bl	8000540 <__aeabi_dmul>
 80101fe:	a33f      	add	r3, pc, #252	; (adr r3, 80102fc <__kernel_sin+0x15c>)
 8010200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010204:	f7ef ffe4 	bl	80001d0 <__aeabi_dsub>
 8010208:	4652      	mov	r2, sl
 801020a:	465b      	mov	r3, fp
 801020c:	f7f0 f998 	bl	8000540 <__aeabi_dmul>
 8010210:	a33c      	add	r3, pc, #240	; (adr r3, 8010304 <__kernel_sin+0x164>)
 8010212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010216:	f7ef ffdd 	bl	80001d4 <__adddf3>
 801021a:	4652      	mov	r2, sl
 801021c:	465b      	mov	r3, fp
 801021e:	f7f0 f98f 	bl	8000540 <__aeabi_dmul>
 8010222:	a33a      	add	r3, pc, #232	; (adr r3, 801030c <__kernel_sin+0x16c>)
 8010224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010228:	f7ef ffd2 	bl	80001d0 <__aeabi_dsub>
 801022c:	4652      	mov	r2, sl
 801022e:	465b      	mov	r3, fp
 8010230:	f7f0 f986 	bl	8000540 <__aeabi_dmul>
 8010234:	a337      	add	r3, pc, #220	; (adr r3, 8010314 <__kernel_sin+0x174>)
 8010236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023a:	f7ef ffcb 	bl	80001d4 <__adddf3>
 801023e:	9b01      	ldr	r3, [sp, #4]
 8010240:	4606      	mov	r6, r0
 8010242:	460f      	mov	r7, r1
 8010244:	b9eb      	cbnz	r3, 8010282 <__kernel_sin+0xe2>
 8010246:	4602      	mov	r2, r0
 8010248:	460b      	mov	r3, r1
 801024a:	4650      	mov	r0, sl
 801024c:	4659      	mov	r1, fp
 801024e:	f7f0 f977 	bl	8000540 <__aeabi_dmul>
 8010252:	a325      	add	r3, pc, #148	; (adr r3, 80102e8 <__kernel_sin+0x148>)
 8010254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010258:	f7ef ffba 	bl	80001d0 <__aeabi_dsub>
 801025c:	4642      	mov	r2, r8
 801025e:	464b      	mov	r3, r9
 8010260:	f7f0 f96e 	bl	8000540 <__aeabi_dmul>
 8010264:	4602      	mov	r2, r0
 8010266:	460b      	mov	r3, r1
 8010268:	4620      	mov	r0, r4
 801026a:	4629      	mov	r1, r5
 801026c:	f7ef ffb2 	bl	80001d4 <__adddf3>
 8010270:	4604      	mov	r4, r0
 8010272:	460d      	mov	r5, r1
 8010274:	ec45 4b10 	vmov	d0, r4, r5
 8010278:	b003      	add	sp, #12
 801027a:	ecbd 8b04 	vpop	{d8-d9}
 801027e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010282:	4b1b      	ldr	r3, [pc, #108]	; (80102f0 <__kernel_sin+0x150>)
 8010284:	ec51 0b18 	vmov	r0, r1, d8
 8010288:	2200      	movs	r2, #0
 801028a:	f7f0 f959 	bl	8000540 <__aeabi_dmul>
 801028e:	4632      	mov	r2, r6
 8010290:	ec41 0b19 	vmov	d9, r0, r1
 8010294:	463b      	mov	r3, r7
 8010296:	4640      	mov	r0, r8
 8010298:	4649      	mov	r1, r9
 801029a:	f7f0 f951 	bl	8000540 <__aeabi_dmul>
 801029e:	4602      	mov	r2, r0
 80102a0:	460b      	mov	r3, r1
 80102a2:	ec51 0b19 	vmov	r0, r1, d9
 80102a6:	f7ef ff93 	bl	80001d0 <__aeabi_dsub>
 80102aa:	4652      	mov	r2, sl
 80102ac:	465b      	mov	r3, fp
 80102ae:	f7f0 f947 	bl	8000540 <__aeabi_dmul>
 80102b2:	ec53 2b18 	vmov	r2, r3, d8
 80102b6:	f7ef ff8b 	bl	80001d0 <__aeabi_dsub>
 80102ba:	a30b      	add	r3, pc, #44	; (adr r3, 80102e8 <__kernel_sin+0x148>)
 80102bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c0:	4606      	mov	r6, r0
 80102c2:	460f      	mov	r7, r1
 80102c4:	4640      	mov	r0, r8
 80102c6:	4649      	mov	r1, r9
 80102c8:	f7f0 f93a 	bl	8000540 <__aeabi_dmul>
 80102cc:	4602      	mov	r2, r0
 80102ce:	460b      	mov	r3, r1
 80102d0:	4630      	mov	r0, r6
 80102d2:	4639      	mov	r1, r7
 80102d4:	f7ef ff7e 	bl	80001d4 <__adddf3>
 80102d8:	4602      	mov	r2, r0
 80102da:	460b      	mov	r3, r1
 80102dc:	4620      	mov	r0, r4
 80102de:	4629      	mov	r1, r5
 80102e0:	f7ef ff76 	bl	80001d0 <__aeabi_dsub>
 80102e4:	e7c4      	b.n	8010270 <__kernel_sin+0xd0>
 80102e6:	bf00      	nop
 80102e8:	55555549 	.word	0x55555549
 80102ec:	3fc55555 	.word	0x3fc55555
 80102f0:	3fe00000 	.word	0x3fe00000
 80102f4:	5acfd57c 	.word	0x5acfd57c
 80102f8:	3de5d93a 	.word	0x3de5d93a
 80102fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8010300:	3e5ae5e6 	.word	0x3e5ae5e6
 8010304:	57b1fe7d 	.word	0x57b1fe7d
 8010308:	3ec71de3 	.word	0x3ec71de3
 801030c:	19c161d5 	.word	0x19c161d5
 8010310:	3f2a01a0 	.word	0x3f2a01a0
 8010314:	1110f8a6 	.word	0x1110f8a6
 8010318:	3f811111 	.word	0x3f811111

0801031c <__kernel_cosf>:
 801031c:	ee10 3a10 	vmov	r3, s0
 8010320:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010324:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8010328:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801032c:	da05      	bge.n	801033a <__kernel_cosf+0x1e>
 801032e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010332:	ee17 2a90 	vmov	r2, s15
 8010336:	2a00      	cmp	r2, #0
 8010338:	d03d      	beq.n	80103b6 <__kernel_cosf+0x9a>
 801033a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801033e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80103bc <__kernel_cosf+0xa0>
 8010342:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80103c0 <__kernel_cosf+0xa4>
 8010346:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80103c4 <__kernel_cosf+0xa8>
 801034a:	4a1f      	ldr	r2, [pc, #124]	; (80103c8 <__kernel_cosf+0xac>)
 801034c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010350:	4293      	cmp	r3, r2
 8010352:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80103cc <__kernel_cosf+0xb0>
 8010356:	eee7 7a25 	vfma.f32	s15, s14, s11
 801035a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80103d0 <__kernel_cosf+0xb4>
 801035e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8010362:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80103d4 <__kernel_cosf+0xb8>
 8010366:	eee7 7a25 	vfma.f32	s15, s14, s11
 801036a:	eeb0 7a66 	vmov.f32	s14, s13
 801036e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8010372:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010376:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801037a:	ee67 6a25 	vmul.f32	s13, s14, s11
 801037e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8010382:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010386:	dc04      	bgt.n	8010392 <__kernel_cosf+0x76>
 8010388:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801038c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8010390:	4770      	bx	lr
 8010392:	4a11      	ldr	r2, [pc, #68]	; (80103d8 <__kernel_cosf+0xbc>)
 8010394:	4293      	cmp	r3, r2
 8010396:	bfda      	itte	le
 8010398:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801039c:	ee06 3a90 	vmovle	s13, r3
 80103a0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80103a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80103a8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80103ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80103b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80103b4:	4770      	bx	lr
 80103b6:	eeb0 0a46 	vmov.f32	s0, s12
 80103ba:	4770      	bx	lr
 80103bc:	ad47d74e 	.word	0xad47d74e
 80103c0:	310f74f6 	.word	0x310f74f6
 80103c4:	3d2aaaab 	.word	0x3d2aaaab
 80103c8:	3e999999 	.word	0x3e999999
 80103cc:	b493f27c 	.word	0xb493f27c
 80103d0:	37d00d01 	.word	0x37d00d01
 80103d4:	bab60b61 	.word	0xbab60b61
 80103d8:	3f480000 	.word	0x3f480000

080103dc <__kernel_rem_pio2f>:
 80103dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e0:	ed2d 8b04 	vpush	{d8-d9}
 80103e4:	b0d9      	sub	sp, #356	; 0x164
 80103e6:	4688      	mov	r8, r1
 80103e8:	9002      	str	r0, [sp, #8]
 80103ea:	49bb      	ldr	r1, [pc, #748]	; (80106d8 <__kernel_rem_pio2f+0x2fc>)
 80103ec:	9866      	ldr	r0, [sp, #408]	; 0x198
 80103ee:	9301      	str	r3, [sp, #4]
 80103f0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80103f4:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80103f8:	1e59      	subs	r1, r3, #1
 80103fa:	1d13      	adds	r3, r2, #4
 80103fc:	db27      	blt.n	801044e <__kernel_rem_pio2f+0x72>
 80103fe:	f1b2 0b03 	subs.w	fp, r2, #3
 8010402:	bf48      	it	mi
 8010404:	f102 0b04 	addmi.w	fp, r2, #4
 8010408:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801040c:	1c45      	adds	r5, r0, #1
 801040e:	00ec      	lsls	r4, r5, #3
 8010410:	1a47      	subs	r7, r0, r1
 8010412:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80106e8 <__kernel_rem_pio2f+0x30c>
 8010416:	9403      	str	r4, [sp, #12]
 8010418:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801041c:	eb0a 0c01 	add.w	ip, sl, r1
 8010420:	ae1c      	add	r6, sp, #112	; 0x70
 8010422:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8010426:	2400      	movs	r4, #0
 8010428:	4564      	cmp	r4, ip
 801042a:	dd12      	ble.n	8010452 <__kernel_rem_pio2f+0x76>
 801042c:	9b01      	ldr	r3, [sp, #4]
 801042e:	ac1c      	add	r4, sp, #112	; 0x70
 8010430:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8010434:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8010438:	f04f 0c00 	mov.w	ip, #0
 801043c:	45d4      	cmp	ip, sl
 801043e:	dc27      	bgt.n	8010490 <__kernel_rem_pio2f+0xb4>
 8010440:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8010444:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80106e8 <__kernel_rem_pio2f+0x30c>
 8010448:	4627      	mov	r7, r4
 801044a:	2600      	movs	r6, #0
 801044c:	e016      	b.n	801047c <__kernel_rem_pio2f+0xa0>
 801044e:	2000      	movs	r0, #0
 8010450:	e7dc      	b.n	801040c <__kernel_rem_pio2f+0x30>
 8010452:	42e7      	cmn	r7, r4
 8010454:	bf5d      	ittte	pl
 8010456:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801045a:	ee07 3a90 	vmovpl	s15, r3
 801045e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010462:	eef0 7a47 	vmovmi.f32	s15, s14
 8010466:	ece6 7a01 	vstmia	r6!, {s15}
 801046a:	3401      	adds	r4, #1
 801046c:	e7dc      	b.n	8010428 <__kernel_rem_pio2f+0x4c>
 801046e:	ecf9 6a01 	vldmia	r9!, {s13}
 8010472:	ed97 7a00 	vldr	s14, [r7]
 8010476:	eee6 7a87 	vfma.f32	s15, s13, s14
 801047a:	3601      	adds	r6, #1
 801047c:	428e      	cmp	r6, r1
 801047e:	f1a7 0704 	sub.w	r7, r7, #4
 8010482:	ddf4      	ble.n	801046e <__kernel_rem_pio2f+0x92>
 8010484:	eceb 7a01 	vstmia	fp!, {s15}
 8010488:	f10c 0c01 	add.w	ip, ip, #1
 801048c:	3404      	adds	r4, #4
 801048e:	e7d5      	b.n	801043c <__kernel_rem_pio2f+0x60>
 8010490:	ab08      	add	r3, sp, #32
 8010492:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8010496:	eddf 8a93 	vldr	s17, [pc, #588]	; 80106e4 <__kernel_rem_pio2f+0x308>
 801049a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80106e0 <__kernel_rem_pio2f+0x304>
 801049e:	9304      	str	r3, [sp, #16]
 80104a0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80104a4:	4656      	mov	r6, sl
 80104a6:	00b3      	lsls	r3, r6, #2
 80104a8:	9305      	str	r3, [sp, #20]
 80104aa:	ab58      	add	r3, sp, #352	; 0x160
 80104ac:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80104b0:	ac08      	add	r4, sp, #32
 80104b2:	ab44      	add	r3, sp, #272	; 0x110
 80104b4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80104b8:	46a4      	mov	ip, r4
 80104ba:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80104be:	4637      	mov	r7, r6
 80104c0:	2f00      	cmp	r7, #0
 80104c2:	f1a0 0004 	sub.w	r0, r0, #4
 80104c6:	dc4f      	bgt.n	8010568 <__kernel_rem_pio2f+0x18c>
 80104c8:	4628      	mov	r0, r5
 80104ca:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80104ce:	f000 fb87 	bl	8010be0 <scalbnf>
 80104d2:	eeb0 8a40 	vmov.f32	s16, s0
 80104d6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80104da:	ee28 0a00 	vmul.f32	s0, s16, s0
 80104de:	f000 fb3d 	bl	8010b5c <floorf>
 80104e2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80104e6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80104ea:	2d00      	cmp	r5, #0
 80104ec:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80104f0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80104f4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80104f8:	ee17 9a90 	vmov	r9, s15
 80104fc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010500:	dd44      	ble.n	801058c <__kernel_rem_pio2f+0x1b0>
 8010502:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8010506:	ab08      	add	r3, sp, #32
 8010508:	f1c5 0e08 	rsb	lr, r5, #8
 801050c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8010510:	fa47 f00e 	asr.w	r0, r7, lr
 8010514:	4481      	add	r9, r0
 8010516:	fa00 f00e 	lsl.w	r0, r0, lr
 801051a:	1a3f      	subs	r7, r7, r0
 801051c:	f1c5 0007 	rsb	r0, r5, #7
 8010520:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8010524:	4107      	asrs	r7, r0
 8010526:	2f00      	cmp	r7, #0
 8010528:	dd3f      	ble.n	80105aa <__kernel_rem_pio2f+0x1ce>
 801052a:	f04f 0e00 	mov.w	lr, #0
 801052e:	f109 0901 	add.w	r9, r9, #1
 8010532:	4673      	mov	r3, lr
 8010534:	4576      	cmp	r6, lr
 8010536:	dc6b      	bgt.n	8010610 <__kernel_rem_pio2f+0x234>
 8010538:	2d00      	cmp	r5, #0
 801053a:	dd04      	ble.n	8010546 <__kernel_rem_pio2f+0x16a>
 801053c:	2d01      	cmp	r5, #1
 801053e:	d078      	beq.n	8010632 <__kernel_rem_pio2f+0x256>
 8010540:	2d02      	cmp	r5, #2
 8010542:	f000 8081 	beq.w	8010648 <__kernel_rem_pio2f+0x26c>
 8010546:	2f02      	cmp	r7, #2
 8010548:	d12f      	bne.n	80105aa <__kernel_rem_pio2f+0x1ce>
 801054a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801054e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010552:	b353      	cbz	r3, 80105aa <__kernel_rem_pio2f+0x1ce>
 8010554:	4628      	mov	r0, r5
 8010556:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801055a:	f000 fb41 	bl	8010be0 <scalbnf>
 801055e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8010562:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010566:	e020      	b.n	80105aa <__kernel_rem_pio2f+0x1ce>
 8010568:	ee60 7a28 	vmul.f32	s15, s0, s17
 801056c:	3f01      	subs	r7, #1
 801056e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010576:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801057a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801057e:	ecac 0a01 	vstmia	ip!, {s0}
 8010582:	ed90 0a00 	vldr	s0, [r0]
 8010586:	ee37 0a80 	vadd.f32	s0, s15, s0
 801058a:	e799      	b.n	80104c0 <__kernel_rem_pio2f+0xe4>
 801058c:	d105      	bne.n	801059a <__kernel_rem_pio2f+0x1be>
 801058e:	1e70      	subs	r0, r6, #1
 8010590:	ab08      	add	r3, sp, #32
 8010592:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8010596:	11ff      	asrs	r7, r7, #7
 8010598:	e7c5      	b.n	8010526 <__kernel_rem_pio2f+0x14a>
 801059a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801059e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80105a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105a6:	da31      	bge.n	801060c <__kernel_rem_pio2f+0x230>
 80105a8:	2700      	movs	r7, #0
 80105aa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80105ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105b2:	f040 809b 	bne.w	80106ec <__kernel_rem_pio2f+0x310>
 80105b6:	1e74      	subs	r4, r6, #1
 80105b8:	46a4      	mov	ip, r4
 80105ba:	2000      	movs	r0, #0
 80105bc:	45d4      	cmp	ip, sl
 80105be:	da4a      	bge.n	8010656 <__kernel_rem_pio2f+0x27a>
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d07a      	beq.n	80106ba <__kernel_rem_pio2f+0x2de>
 80105c4:	ab08      	add	r3, sp, #32
 80105c6:	3d08      	subs	r5, #8
 80105c8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	f000 8081 	beq.w	80106d4 <__kernel_rem_pio2f+0x2f8>
 80105d2:	4628      	mov	r0, r5
 80105d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80105d8:	00a5      	lsls	r5, r4, #2
 80105da:	f000 fb01 	bl	8010be0 <scalbnf>
 80105de:	aa44      	add	r2, sp, #272	; 0x110
 80105e0:	1d2b      	adds	r3, r5, #4
 80105e2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80106e4 <__kernel_rem_pio2f+0x308>
 80105e6:	18d1      	adds	r1, r2, r3
 80105e8:	4622      	mov	r2, r4
 80105ea:	2a00      	cmp	r2, #0
 80105ec:	f280 80ae 	bge.w	801074c <__kernel_rem_pio2f+0x370>
 80105f0:	4622      	mov	r2, r4
 80105f2:	2a00      	cmp	r2, #0
 80105f4:	f2c0 80cc 	blt.w	8010790 <__kernel_rem_pio2f+0x3b4>
 80105f8:	a944      	add	r1, sp, #272	; 0x110
 80105fa:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80105fe:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80106dc <__kernel_rem_pio2f+0x300>
 8010602:	eddf 7a39 	vldr	s15, [pc, #228]	; 80106e8 <__kernel_rem_pio2f+0x30c>
 8010606:	2000      	movs	r0, #0
 8010608:	1aa1      	subs	r1, r4, r2
 801060a:	e0b6      	b.n	801077a <__kernel_rem_pio2f+0x39e>
 801060c:	2702      	movs	r7, #2
 801060e:	e78c      	b.n	801052a <__kernel_rem_pio2f+0x14e>
 8010610:	6820      	ldr	r0, [r4, #0]
 8010612:	b94b      	cbnz	r3, 8010628 <__kernel_rem_pio2f+0x24c>
 8010614:	b118      	cbz	r0, 801061e <__kernel_rem_pio2f+0x242>
 8010616:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801061a:	6020      	str	r0, [r4, #0]
 801061c:	2001      	movs	r0, #1
 801061e:	f10e 0e01 	add.w	lr, lr, #1
 8010622:	3404      	adds	r4, #4
 8010624:	4603      	mov	r3, r0
 8010626:	e785      	b.n	8010534 <__kernel_rem_pio2f+0x158>
 8010628:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801062c:	6020      	str	r0, [r4, #0]
 801062e:	4618      	mov	r0, r3
 8010630:	e7f5      	b.n	801061e <__kernel_rem_pio2f+0x242>
 8010632:	1e74      	subs	r4, r6, #1
 8010634:	a808      	add	r0, sp, #32
 8010636:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801063a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801063e:	f10d 0c20 	add.w	ip, sp, #32
 8010642:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8010646:	e77e      	b.n	8010546 <__kernel_rem_pio2f+0x16a>
 8010648:	1e74      	subs	r4, r6, #1
 801064a:	a808      	add	r0, sp, #32
 801064c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010650:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8010654:	e7f3      	b.n	801063e <__kernel_rem_pio2f+0x262>
 8010656:	ab08      	add	r3, sp, #32
 8010658:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801065c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8010660:	4318      	orrs	r0, r3
 8010662:	e7ab      	b.n	80105bc <__kernel_rem_pio2f+0x1e0>
 8010664:	f10c 0c01 	add.w	ip, ip, #1
 8010668:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 801066c:	2c00      	cmp	r4, #0
 801066e:	d0f9      	beq.n	8010664 <__kernel_rem_pio2f+0x288>
 8010670:	9b05      	ldr	r3, [sp, #20]
 8010672:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8010676:	eb0d 0003 	add.w	r0, sp, r3
 801067a:	9b01      	ldr	r3, [sp, #4]
 801067c:	18f4      	adds	r4, r6, r3
 801067e:	ab1c      	add	r3, sp, #112	; 0x70
 8010680:	1c77      	adds	r7, r6, #1
 8010682:	384c      	subs	r0, #76	; 0x4c
 8010684:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010688:	4466      	add	r6, ip
 801068a:	42be      	cmp	r6, r7
 801068c:	f6ff af0b 	blt.w	80104a6 <__kernel_rem_pio2f+0xca>
 8010690:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8010694:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010698:	ee07 3a90 	vmov	s15, r3
 801069c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106a0:	f04f 0c00 	mov.w	ip, #0
 80106a4:	ece4 7a01 	vstmia	r4!, {s15}
 80106a8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80106e8 <__kernel_rem_pio2f+0x30c>
 80106ac:	46a1      	mov	r9, r4
 80106ae:	458c      	cmp	ip, r1
 80106b0:	dd07      	ble.n	80106c2 <__kernel_rem_pio2f+0x2e6>
 80106b2:	ece0 7a01 	vstmia	r0!, {s15}
 80106b6:	3701      	adds	r7, #1
 80106b8:	e7e7      	b.n	801068a <__kernel_rem_pio2f+0x2ae>
 80106ba:	9804      	ldr	r0, [sp, #16]
 80106bc:	f04f 0c01 	mov.w	ip, #1
 80106c0:	e7d2      	b.n	8010668 <__kernel_rem_pio2f+0x28c>
 80106c2:	ecfe 6a01 	vldmia	lr!, {s13}
 80106c6:	ed39 7a01 	vldmdb	r9!, {s14}
 80106ca:	f10c 0c01 	add.w	ip, ip, #1
 80106ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 80106d2:	e7ec      	b.n	80106ae <__kernel_rem_pio2f+0x2d2>
 80106d4:	3c01      	subs	r4, #1
 80106d6:	e775      	b.n	80105c4 <__kernel_rem_pio2f+0x1e8>
 80106d8:	080112ec 	.word	0x080112ec
 80106dc:	080112c0 	.word	0x080112c0
 80106e0:	43800000 	.word	0x43800000
 80106e4:	3b800000 	.word	0x3b800000
 80106e8:	00000000 	.word	0x00000000
 80106ec:	9b03      	ldr	r3, [sp, #12]
 80106ee:	eeb0 0a48 	vmov.f32	s0, s16
 80106f2:	1a98      	subs	r0, r3, r2
 80106f4:	f000 fa74 	bl	8010be0 <scalbnf>
 80106f8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80106e0 <__kernel_rem_pio2f+0x304>
 80106fc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010704:	db19      	blt.n	801073a <__kernel_rem_pio2f+0x35e>
 8010706:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80106e4 <__kernel_rem_pio2f+0x308>
 801070a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801070e:	aa08      	add	r2, sp, #32
 8010710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010714:	1c74      	adds	r4, r6, #1
 8010716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801071a:	3508      	adds	r5, #8
 801071c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010724:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010728:	ee10 3a10 	vmov	r3, s0
 801072c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010730:	ee17 3a90 	vmov	r3, s15
 8010734:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010738:	e74b      	b.n	80105d2 <__kernel_rem_pio2f+0x1f6>
 801073a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801073e:	aa08      	add	r2, sp, #32
 8010740:	ee10 3a10 	vmov	r3, s0
 8010744:	4634      	mov	r4, r6
 8010746:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801074a:	e742      	b.n	80105d2 <__kernel_rem_pio2f+0x1f6>
 801074c:	a808      	add	r0, sp, #32
 801074e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010752:	9001      	str	r0, [sp, #4]
 8010754:	ee07 0a90 	vmov	s15, r0
 8010758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801075c:	3a01      	subs	r2, #1
 801075e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010762:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010766:	ed61 7a01 	vstmdb	r1!, {s15}
 801076a:	e73e      	b.n	80105ea <__kernel_rem_pio2f+0x20e>
 801076c:	ecfc 6a01 	vldmia	ip!, {s13}
 8010770:	ecb6 7a01 	vldmia	r6!, {s14}
 8010774:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010778:	3001      	adds	r0, #1
 801077a:	4550      	cmp	r0, sl
 801077c:	dc01      	bgt.n	8010782 <__kernel_rem_pio2f+0x3a6>
 801077e:	4288      	cmp	r0, r1
 8010780:	ddf4      	ble.n	801076c <__kernel_rem_pio2f+0x390>
 8010782:	a858      	add	r0, sp, #352	; 0x160
 8010784:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010788:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801078c:	3a01      	subs	r2, #1
 801078e:	e730      	b.n	80105f2 <__kernel_rem_pio2f+0x216>
 8010790:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8010792:	2a02      	cmp	r2, #2
 8010794:	dc09      	bgt.n	80107aa <__kernel_rem_pio2f+0x3ce>
 8010796:	2a00      	cmp	r2, #0
 8010798:	dc2a      	bgt.n	80107f0 <__kernel_rem_pio2f+0x414>
 801079a:	d043      	beq.n	8010824 <__kernel_rem_pio2f+0x448>
 801079c:	f009 0007 	and.w	r0, r9, #7
 80107a0:	b059      	add	sp, #356	; 0x164
 80107a2:	ecbd 8b04 	vpop	{d8-d9}
 80107a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107aa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80107ac:	2b03      	cmp	r3, #3
 80107ae:	d1f5      	bne.n	801079c <__kernel_rem_pio2f+0x3c0>
 80107b0:	ab30      	add	r3, sp, #192	; 0xc0
 80107b2:	442b      	add	r3, r5
 80107b4:	461a      	mov	r2, r3
 80107b6:	4619      	mov	r1, r3
 80107b8:	4620      	mov	r0, r4
 80107ba:	2800      	cmp	r0, #0
 80107bc:	f1a1 0104 	sub.w	r1, r1, #4
 80107c0:	dc51      	bgt.n	8010866 <__kernel_rem_pio2f+0x48a>
 80107c2:	4621      	mov	r1, r4
 80107c4:	2901      	cmp	r1, #1
 80107c6:	f1a2 0204 	sub.w	r2, r2, #4
 80107ca:	dc5c      	bgt.n	8010886 <__kernel_rem_pio2f+0x4aa>
 80107cc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80106e8 <__kernel_rem_pio2f+0x30c>
 80107d0:	3304      	adds	r3, #4
 80107d2:	2c01      	cmp	r4, #1
 80107d4:	dc67      	bgt.n	80108a6 <__kernel_rem_pio2f+0x4ca>
 80107d6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80107da:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80107de:	2f00      	cmp	r7, #0
 80107e0:	d167      	bne.n	80108b2 <__kernel_rem_pio2f+0x4d6>
 80107e2:	edc8 6a00 	vstr	s13, [r8]
 80107e6:	ed88 7a01 	vstr	s14, [r8, #4]
 80107ea:	edc8 7a02 	vstr	s15, [r8, #8]
 80107ee:	e7d5      	b.n	801079c <__kernel_rem_pio2f+0x3c0>
 80107f0:	aa30      	add	r2, sp, #192	; 0xc0
 80107f2:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80106e8 <__kernel_rem_pio2f+0x30c>
 80107f6:	4413      	add	r3, r2
 80107f8:	4622      	mov	r2, r4
 80107fa:	2a00      	cmp	r2, #0
 80107fc:	da24      	bge.n	8010848 <__kernel_rem_pio2f+0x46c>
 80107fe:	b34f      	cbz	r7, 8010854 <__kernel_rem_pio2f+0x478>
 8010800:	eef1 7a47 	vneg.f32	s15, s14
 8010804:	edc8 7a00 	vstr	s15, [r8]
 8010808:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801080c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010810:	aa31      	add	r2, sp, #196	; 0xc4
 8010812:	2301      	movs	r3, #1
 8010814:	429c      	cmp	r4, r3
 8010816:	da20      	bge.n	801085a <__kernel_rem_pio2f+0x47e>
 8010818:	b10f      	cbz	r7, 801081e <__kernel_rem_pio2f+0x442>
 801081a:	eef1 7a67 	vneg.f32	s15, s15
 801081e:	edc8 7a01 	vstr	s15, [r8, #4]
 8010822:	e7bb      	b.n	801079c <__kernel_rem_pio2f+0x3c0>
 8010824:	aa30      	add	r2, sp, #192	; 0xc0
 8010826:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80106e8 <__kernel_rem_pio2f+0x30c>
 801082a:	4413      	add	r3, r2
 801082c:	2c00      	cmp	r4, #0
 801082e:	da05      	bge.n	801083c <__kernel_rem_pio2f+0x460>
 8010830:	b10f      	cbz	r7, 8010836 <__kernel_rem_pio2f+0x45a>
 8010832:	eef1 7a67 	vneg.f32	s15, s15
 8010836:	edc8 7a00 	vstr	s15, [r8]
 801083a:	e7af      	b.n	801079c <__kernel_rem_pio2f+0x3c0>
 801083c:	ed33 7a01 	vldmdb	r3!, {s14}
 8010840:	3c01      	subs	r4, #1
 8010842:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010846:	e7f1      	b.n	801082c <__kernel_rem_pio2f+0x450>
 8010848:	ed73 7a01 	vldmdb	r3!, {s15}
 801084c:	3a01      	subs	r2, #1
 801084e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010852:	e7d2      	b.n	80107fa <__kernel_rem_pio2f+0x41e>
 8010854:	eef0 7a47 	vmov.f32	s15, s14
 8010858:	e7d4      	b.n	8010804 <__kernel_rem_pio2f+0x428>
 801085a:	ecb2 7a01 	vldmia	r2!, {s14}
 801085e:	3301      	adds	r3, #1
 8010860:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010864:	e7d6      	b.n	8010814 <__kernel_rem_pio2f+0x438>
 8010866:	edd1 7a00 	vldr	s15, [r1]
 801086a:	edd1 6a01 	vldr	s13, [r1, #4]
 801086e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010872:	3801      	subs	r0, #1
 8010874:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010878:	ed81 7a00 	vstr	s14, [r1]
 801087c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010880:	edc1 7a01 	vstr	s15, [r1, #4]
 8010884:	e799      	b.n	80107ba <__kernel_rem_pio2f+0x3de>
 8010886:	edd2 7a00 	vldr	s15, [r2]
 801088a:	edd2 6a01 	vldr	s13, [r2, #4]
 801088e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010892:	3901      	subs	r1, #1
 8010894:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010898:	ed82 7a00 	vstr	s14, [r2]
 801089c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80108a0:	edc2 7a01 	vstr	s15, [r2, #4]
 80108a4:	e78e      	b.n	80107c4 <__kernel_rem_pio2f+0x3e8>
 80108a6:	ed33 7a01 	vldmdb	r3!, {s14}
 80108aa:	3c01      	subs	r4, #1
 80108ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80108b0:	e78f      	b.n	80107d2 <__kernel_rem_pio2f+0x3f6>
 80108b2:	eef1 6a66 	vneg.f32	s13, s13
 80108b6:	eeb1 7a47 	vneg.f32	s14, s14
 80108ba:	edc8 6a00 	vstr	s13, [r8]
 80108be:	ed88 7a01 	vstr	s14, [r8, #4]
 80108c2:	eef1 7a67 	vneg.f32	s15, s15
 80108c6:	e790      	b.n	80107ea <__kernel_rem_pio2f+0x40e>

080108c8 <__kernel_sinf>:
 80108c8:	ee10 3a10 	vmov	r3, s0
 80108cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80108d0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80108d4:	da04      	bge.n	80108e0 <__kernel_sinf+0x18>
 80108d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80108da:	ee17 3a90 	vmov	r3, s15
 80108de:	b35b      	cbz	r3, 8010938 <__kernel_sinf+0x70>
 80108e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80108e4:	eddf 7a15 	vldr	s15, [pc, #84]	; 801093c <__kernel_sinf+0x74>
 80108e8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8010940 <__kernel_sinf+0x78>
 80108ec:	eea7 6a27 	vfma.f32	s12, s14, s15
 80108f0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8010944 <__kernel_sinf+0x7c>
 80108f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80108f8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8010948 <__kernel_sinf+0x80>
 80108fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010900:	eddf 7a12 	vldr	s15, [pc, #72]	; 801094c <__kernel_sinf+0x84>
 8010904:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010908:	eee6 7a07 	vfma.f32	s15, s12, s14
 801090c:	b930      	cbnz	r0, 801091c <__kernel_sinf+0x54>
 801090e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8010950 <__kernel_sinf+0x88>
 8010912:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010916:	eea6 0a26 	vfma.f32	s0, s12, s13
 801091a:	4770      	bx	lr
 801091c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010920:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010924:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010928:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801092c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8010954 <__kernel_sinf+0x8c>
 8010930:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010934:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010938:	4770      	bx	lr
 801093a:	bf00      	nop
 801093c:	2f2ec9d3 	.word	0x2f2ec9d3
 8010940:	b2d72f34 	.word	0xb2d72f34
 8010944:	3638ef1b 	.word	0x3638ef1b
 8010948:	b9500d01 	.word	0xb9500d01
 801094c:	3c088889 	.word	0x3c088889
 8010950:	be2aaaab 	.word	0xbe2aaaab
 8010954:	3e2aaaab 	.word	0x3e2aaaab

08010958 <with_errno>:
 8010958:	b570      	push	{r4, r5, r6, lr}
 801095a:	4604      	mov	r4, r0
 801095c:	460d      	mov	r5, r1
 801095e:	4616      	mov	r6, r2
 8010960:	f7fd f888 	bl	800da74 <__errno>
 8010964:	4629      	mov	r1, r5
 8010966:	6006      	str	r6, [r0, #0]
 8010968:	4620      	mov	r0, r4
 801096a:	bd70      	pop	{r4, r5, r6, pc}

0801096c <xflow>:
 801096c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801096e:	4614      	mov	r4, r2
 8010970:	461d      	mov	r5, r3
 8010972:	b108      	cbz	r0, 8010978 <xflow+0xc>
 8010974:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010978:	e9cd 2300 	strd	r2, r3, [sp]
 801097c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010980:	4620      	mov	r0, r4
 8010982:	4629      	mov	r1, r5
 8010984:	f7ef fddc 	bl	8000540 <__aeabi_dmul>
 8010988:	2222      	movs	r2, #34	; 0x22
 801098a:	b003      	add	sp, #12
 801098c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010990:	f7ff bfe2 	b.w	8010958 <with_errno>

08010994 <__math_uflow>:
 8010994:	b508      	push	{r3, lr}
 8010996:	2200      	movs	r2, #0
 8010998:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801099c:	f7ff ffe6 	bl	801096c <xflow>
 80109a0:	ec41 0b10 	vmov	d0, r0, r1
 80109a4:	bd08      	pop	{r3, pc}

080109a6 <__math_oflow>:
 80109a6:	b508      	push	{r3, lr}
 80109a8:	2200      	movs	r2, #0
 80109aa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80109ae:	f7ff ffdd 	bl	801096c <xflow>
 80109b2:	ec41 0b10 	vmov	d0, r0, r1
 80109b6:	bd08      	pop	{r3, pc}

080109b8 <with_errnof>:
 80109b8:	b513      	push	{r0, r1, r4, lr}
 80109ba:	4604      	mov	r4, r0
 80109bc:	ed8d 0a01 	vstr	s0, [sp, #4]
 80109c0:	f7fd f858 	bl	800da74 <__errno>
 80109c4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80109c8:	6004      	str	r4, [r0, #0]
 80109ca:	b002      	add	sp, #8
 80109cc:	bd10      	pop	{r4, pc}

080109ce <xflowf>:
 80109ce:	b130      	cbz	r0, 80109de <xflowf+0x10>
 80109d0:	eef1 7a40 	vneg.f32	s15, s0
 80109d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80109d8:	2022      	movs	r0, #34	; 0x22
 80109da:	f7ff bfed 	b.w	80109b8 <with_errnof>
 80109de:	eef0 7a40 	vmov.f32	s15, s0
 80109e2:	e7f7      	b.n	80109d4 <xflowf+0x6>

080109e4 <__math_uflowf>:
 80109e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80109ec <__math_uflowf+0x8>
 80109e8:	f7ff bff1 	b.w	80109ce <xflowf>
 80109ec:	10000000 	.word	0x10000000

080109f0 <__math_oflowf>:
 80109f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80109f8 <__math_oflowf+0x8>
 80109f4:	f7ff bfeb 	b.w	80109ce <xflowf>
 80109f8:	70000000 	.word	0x70000000

080109fc <fabs>:
 80109fc:	ec51 0b10 	vmov	r0, r1, d0
 8010a00:	ee10 2a10 	vmov	r2, s0
 8010a04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010a08:	ec43 2b10 	vmov	d0, r2, r3
 8010a0c:	4770      	bx	lr

08010a0e <finite>:
 8010a0e:	b082      	sub	sp, #8
 8010a10:	ed8d 0b00 	vstr	d0, [sp]
 8010a14:	9801      	ldr	r0, [sp, #4]
 8010a16:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010a1a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010a1e:	0fc0      	lsrs	r0, r0, #31
 8010a20:	b002      	add	sp, #8
 8010a22:	4770      	bx	lr
 8010a24:	0000      	movs	r0, r0
	...

08010a28 <scalbn>:
 8010a28:	b570      	push	{r4, r5, r6, lr}
 8010a2a:	ec55 4b10 	vmov	r4, r5, d0
 8010a2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010a32:	4606      	mov	r6, r0
 8010a34:	462b      	mov	r3, r5
 8010a36:	b99a      	cbnz	r2, 8010a60 <scalbn+0x38>
 8010a38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010a3c:	4323      	orrs	r3, r4
 8010a3e:	d036      	beq.n	8010aae <scalbn+0x86>
 8010a40:	4b39      	ldr	r3, [pc, #228]	; (8010b28 <scalbn+0x100>)
 8010a42:	4629      	mov	r1, r5
 8010a44:	ee10 0a10 	vmov	r0, s0
 8010a48:	2200      	movs	r2, #0
 8010a4a:	f7ef fd79 	bl	8000540 <__aeabi_dmul>
 8010a4e:	4b37      	ldr	r3, [pc, #220]	; (8010b2c <scalbn+0x104>)
 8010a50:	429e      	cmp	r6, r3
 8010a52:	4604      	mov	r4, r0
 8010a54:	460d      	mov	r5, r1
 8010a56:	da10      	bge.n	8010a7a <scalbn+0x52>
 8010a58:	a32b      	add	r3, pc, #172	; (adr r3, 8010b08 <scalbn+0xe0>)
 8010a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a5e:	e03a      	b.n	8010ad6 <scalbn+0xae>
 8010a60:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010a64:	428a      	cmp	r2, r1
 8010a66:	d10c      	bne.n	8010a82 <scalbn+0x5a>
 8010a68:	ee10 2a10 	vmov	r2, s0
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	4629      	mov	r1, r5
 8010a70:	f7ef fbb0 	bl	80001d4 <__adddf3>
 8010a74:	4604      	mov	r4, r0
 8010a76:	460d      	mov	r5, r1
 8010a78:	e019      	b.n	8010aae <scalbn+0x86>
 8010a7a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010a7e:	460b      	mov	r3, r1
 8010a80:	3a36      	subs	r2, #54	; 0x36
 8010a82:	4432      	add	r2, r6
 8010a84:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010a88:	428a      	cmp	r2, r1
 8010a8a:	dd08      	ble.n	8010a9e <scalbn+0x76>
 8010a8c:	2d00      	cmp	r5, #0
 8010a8e:	a120      	add	r1, pc, #128	; (adr r1, 8010b10 <scalbn+0xe8>)
 8010a90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a94:	da1c      	bge.n	8010ad0 <scalbn+0xa8>
 8010a96:	a120      	add	r1, pc, #128	; (adr r1, 8010b18 <scalbn+0xf0>)
 8010a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a9c:	e018      	b.n	8010ad0 <scalbn+0xa8>
 8010a9e:	2a00      	cmp	r2, #0
 8010aa0:	dd08      	ble.n	8010ab4 <scalbn+0x8c>
 8010aa2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010aa6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010aaa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010aae:	ec45 4b10 	vmov	d0, r4, r5
 8010ab2:	bd70      	pop	{r4, r5, r6, pc}
 8010ab4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010ab8:	da19      	bge.n	8010aee <scalbn+0xc6>
 8010aba:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010abe:	429e      	cmp	r6, r3
 8010ac0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010ac4:	dd0a      	ble.n	8010adc <scalbn+0xb4>
 8010ac6:	a112      	add	r1, pc, #72	; (adr r1, 8010b10 <scalbn+0xe8>)
 8010ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d1e2      	bne.n	8010a96 <scalbn+0x6e>
 8010ad0:	a30f      	add	r3, pc, #60	; (adr r3, 8010b10 <scalbn+0xe8>)
 8010ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad6:	f7ef fd33 	bl	8000540 <__aeabi_dmul>
 8010ada:	e7cb      	b.n	8010a74 <scalbn+0x4c>
 8010adc:	a10a      	add	r1, pc, #40	; (adr r1, 8010b08 <scalbn+0xe0>)
 8010ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d0b8      	beq.n	8010a58 <scalbn+0x30>
 8010ae6:	a10e      	add	r1, pc, #56	; (adr r1, 8010b20 <scalbn+0xf8>)
 8010ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010aec:	e7b4      	b.n	8010a58 <scalbn+0x30>
 8010aee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010af2:	3236      	adds	r2, #54	; 0x36
 8010af4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010af8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010afc:	4620      	mov	r0, r4
 8010afe:	4b0c      	ldr	r3, [pc, #48]	; (8010b30 <scalbn+0x108>)
 8010b00:	2200      	movs	r2, #0
 8010b02:	e7e8      	b.n	8010ad6 <scalbn+0xae>
 8010b04:	f3af 8000 	nop.w
 8010b08:	c2f8f359 	.word	0xc2f8f359
 8010b0c:	01a56e1f 	.word	0x01a56e1f
 8010b10:	8800759c 	.word	0x8800759c
 8010b14:	7e37e43c 	.word	0x7e37e43c
 8010b18:	8800759c 	.word	0x8800759c
 8010b1c:	fe37e43c 	.word	0xfe37e43c
 8010b20:	c2f8f359 	.word	0xc2f8f359
 8010b24:	81a56e1f 	.word	0x81a56e1f
 8010b28:	43500000 	.word	0x43500000
 8010b2c:	ffff3cb0 	.word	0xffff3cb0
 8010b30:	3c900000 	.word	0x3c900000

08010b34 <fabsf>:
 8010b34:	ee10 3a10 	vmov	r3, s0
 8010b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010b3c:	ee00 3a10 	vmov	s0, r3
 8010b40:	4770      	bx	lr

08010b42 <finitef>:
 8010b42:	b082      	sub	sp, #8
 8010b44:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010b48:	9801      	ldr	r0, [sp, #4]
 8010b4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010b4e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010b52:	bfac      	ite	ge
 8010b54:	2000      	movge	r0, #0
 8010b56:	2001      	movlt	r0, #1
 8010b58:	b002      	add	sp, #8
 8010b5a:	4770      	bx	lr

08010b5c <floorf>:
 8010b5c:	ee10 3a10 	vmov	r3, s0
 8010b60:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010b64:	3a7f      	subs	r2, #127	; 0x7f
 8010b66:	2a16      	cmp	r2, #22
 8010b68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010b6c:	dc2a      	bgt.n	8010bc4 <floorf+0x68>
 8010b6e:	2a00      	cmp	r2, #0
 8010b70:	da11      	bge.n	8010b96 <floorf+0x3a>
 8010b72:	eddf 7a18 	vldr	s15, [pc, #96]	; 8010bd4 <floorf+0x78>
 8010b76:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b7a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b82:	dd05      	ble.n	8010b90 <floorf+0x34>
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	da23      	bge.n	8010bd0 <floorf+0x74>
 8010b88:	4a13      	ldr	r2, [pc, #76]	; (8010bd8 <floorf+0x7c>)
 8010b8a:	2900      	cmp	r1, #0
 8010b8c:	bf18      	it	ne
 8010b8e:	4613      	movne	r3, r2
 8010b90:	ee00 3a10 	vmov	s0, r3
 8010b94:	4770      	bx	lr
 8010b96:	4911      	ldr	r1, [pc, #68]	; (8010bdc <floorf+0x80>)
 8010b98:	4111      	asrs	r1, r2
 8010b9a:	420b      	tst	r3, r1
 8010b9c:	d0fa      	beq.n	8010b94 <floorf+0x38>
 8010b9e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8010bd4 <floorf+0x78>
 8010ba2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010ba6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bae:	ddef      	ble.n	8010b90 <floorf+0x34>
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	bfbe      	ittt	lt
 8010bb4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8010bb8:	fa40 f202 	asrlt.w	r2, r0, r2
 8010bbc:	189b      	addlt	r3, r3, r2
 8010bbe:	ea23 0301 	bic.w	r3, r3, r1
 8010bc2:	e7e5      	b.n	8010b90 <floorf+0x34>
 8010bc4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010bc8:	d3e4      	bcc.n	8010b94 <floorf+0x38>
 8010bca:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010bce:	4770      	bx	lr
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	e7dd      	b.n	8010b90 <floorf+0x34>
 8010bd4:	7149f2ca 	.word	0x7149f2ca
 8010bd8:	bf800000 	.word	0xbf800000
 8010bdc:	007fffff 	.word	0x007fffff

08010be0 <scalbnf>:
 8010be0:	ee10 3a10 	vmov	r3, s0
 8010be4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8010be8:	d025      	beq.n	8010c36 <scalbnf+0x56>
 8010bea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010bee:	d302      	bcc.n	8010bf6 <scalbnf+0x16>
 8010bf0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010bf4:	4770      	bx	lr
 8010bf6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8010bfa:	d122      	bne.n	8010c42 <scalbnf+0x62>
 8010bfc:	4b2a      	ldr	r3, [pc, #168]	; (8010ca8 <scalbnf+0xc8>)
 8010bfe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010cac <scalbnf+0xcc>
 8010c02:	4298      	cmp	r0, r3
 8010c04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010c08:	db16      	blt.n	8010c38 <scalbnf+0x58>
 8010c0a:	ee10 3a10 	vmov	r3, s0
 8010c0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010c12:	3a19      	subs	r2, #25
 8010c14:	4402      	add	r2, r0
 8010c16:	2afe      	cmp	r2, #254	; 0xfe
 8010c18:	dd15      	ble.n	8010c46 <scalbnf+0x66>
 8010c1a:	ee10 3a10 	vmov	r3, s0
 8010c1e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8010cb0 <scalbnf+0xd0>
 8010c22:	eddf 6a24 	vldr	s13, [pc, #144]	; 8010cb4 <scalbnf+0xd4>
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	eeb0 7a67 	vmov.f32	s14, s15
 8010c2c:	bfb8      	it	lt
 8010c2e:	eef0 7a66 	vmovlt.f32	s15, s13
 8010c32:	ee27 0a27 	vmul.f32	s0, s14, s15
 8010c36:	4770      	bx	lr
 8010c38:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010cb8 <scalbnf+0xd8>
 8010c3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010c40:	4770      	bx	lr
 8010c42:	0dd2      	lsrs	r2, r2, #23
 8010c44:	e7e6      	b.n	8010c14 <scalbnf+0x34>
 8010c46:	2a00      	cmp	r2, #0
 8010c48:	dd06      	ble.n	8010c58 <scalbnf+0x78>
 8010c4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010c4e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010c52:	ee00 3a10 	vmov	s0, r3
 8010c56:	4770      	bx	lr
 8010c58:	f112 0f16 	cmn.w	r2, #22
 8010c5c:	da1a      	bge.n	8010c94 <scalbnf+0xb4>
 8010c5e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010c62:	4298      	cmp	r0, r3
 8010c64:	ee10 3a10 	vmov	r3, s0
 8010c68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010c6c:	dd0a      	ble.n	8010c84 <scalbnf+0xa4>
 8010c6e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8010cb0 <scalbnf+0xd0>
 8010c72:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8010cb4 <scalbnf+0xd4>
 8010c76:	eef0 7a40 	vmov.f32	s15, s0
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	bf18      	it	ne
 8010c7e:	eeb0 0a47 	vmovne.f32	s0, s14
 8010c82:	e7db      	b.n	8010c3c <scalbnf+0x5c>
 8010c84:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8010cb8 <scalbnf+0xd8>
 8010c88:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8010cbc <scalbnf+0xdc>
 8010c8c:	eef0 7a40 	vmov.f32	s15, s0
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	e7f3      	b.n	8010c7c <scalbnf+0x9c>
 8010c94:	3219      	adds	r2, #25
 8010c96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010c9a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010c9e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010cc0 <scalbnf+0xe0>
 8010ca2:	ee07 3a10 	vmov	s14, r3
 8010ca6:	e7c4      	b.n	8010c32 <scalbnf+0x52>
 8010ca8:	ffff3cb0 	.word	0xffff3cb0
 8010cac:	4c000000 	.word	0x4c000000
 8010cb0:	7149f2ca 	.word	0x7149f2ca
 8010cb4:	f149f2ca 	.word	0xf149f2ca
 8010cb8:	0da24260 	.word	0x0da24260
 8010cbc:	8da24260 	.word	0x8da24260
 8010cc0:	33000000 	.word	0x33000000

08010cc4 <_init>:
 8010cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cc6:	bf00      	nop
 8010cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cca:	bc08      	pop	{r3}
 8010ccc:	469e      	mov	lr, r3
 8010cce:	4770      	bx	lr

08010cd0 <_fini>:
 8010cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cd2:	bf00      	nop
 8010cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cd6:	bc08      	pop	{r3}
 8010cd8:	469e      	mov	lr, r3
 8010cda:	4770      	bx	lr
